<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Python on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/python/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Tue, 09 Feb 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Creating a support ticket</title>
      <link>https://softlayer.github.io/python/create_ticket/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/create_ticket/</guid>
      <description>&lt;p&gt;Standard support tickets&amp;rsquo; titles must be selected from a pre-determined list of ticket subjects, defined in the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket_Subject&#34;&gt;SoftLayer_Ticket_Subject&lt;/a&gt; service. The following example will output all of the Ticket Subjects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
subjects = client[&#39;Ticket_Subject&#39;].getAllObjects()
pp(subjects)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the Ticket Subject ID you can pass it to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket/createStandardTicket&#34;&gt;createStandardTicket&lt;/a&gt;. In the following example we are opening a ticket under the subject Hardware Firewall Question (ID 1121).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
client = SoftLayer.Client()
currentUser = client[&#39;Account&#39;].getCurrentUser()
new_ticket = {
       &#39;subjectId&#39;: 1121,
       &#39;assignedUserId&#39;: currentUser[&#39;id&#39;]
}
created_ticket = client[&#39;Ticket&#39;].createStandardTicket(new_ticket, &amp;quot;Content of the ticket goes here&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>https://softlayer.github.io/python/cancel_service/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/cancel_service/</guid>
      <description>&lt;p&gt;In the following example we are retrieving the Billing Item of a Virtual Guest with the ID of 12345678 and passing that ID to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelService&#34;&gt;cancelService&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[id]&amp;quot;
billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=12345678)
cancelItem = client[&#39;SoftLayer_Billing_Item&#39;].cancelService(id = billingId[&#39;id&#39;])

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/python/nextinvoice/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/nextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
nextInvoiceAmount = client[&#39;SoftLayer_Account&#39;].getNextInvoiceTotalAmount()
pp(nextInvoiceAmount)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find a billing item from a provisioned product</title>
      <link>https://softlayer.github.io/python/getbillingitem/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getbillingitem/</guid>
      <description>&lt;p&gt;In the following example we are looking for the Billing Item of an Virtual Guest with an ID of 1234567.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[id]&amp;quot;
billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567)
pp(billingId)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>https://softlayer.github.io/python/monthtodate/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/monthtodate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]&amp;quot;
toDateCost = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567)
pp(toDateCost)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;
{&#39;createDate&#39;: &#39;2016-02-05T14:07:37-06:00&#39;,
  &#39;currentHourlyCharge&#39;: &#39;.023&#39;,
  &#39;hourlyRecurringFee&#39;: &#39;.023&#39;,
  &#39;hoursUsed&#39;: &#39;1&#39;}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/reload_hardware/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Will reload the operating system with a new imageTemplate, 
        along with a set of sshKeys. This will erease all data.
        &amp;quot;&amp;quot;&amp;quot;
        # Change these IDs
        imageId = 1234567
        sshKey1 = 123
        sshKey2 = 456
        serverId = 102938
        config = {
            &#39;imageTemplateId&#39;: imageId, 
            &#39;sshKeyIds&#39;: [sshKey1, sshKey2]
        }

        output = client[&#39;Hardware_Server&#39;].reloadOperatingSystem(&#39;FORCE&#39;, config, id=serverId)

        pp(config)
        print &amp;quot;RESULT\n&amp;quot;
        pp(output)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Edit IP address note</title>
      <link>https://softlayer.github.io/python/edit_ip_note/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/edit_ip_note/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def getSubnets(self):
        subnets = self.client[&#39;SoftLayer_Account&#39;].getSubnets()
        for subnet in subnets:
            print(&amp;quot;%s - %s/%s - %s&amp;quot; % 
                (   subnet[&#39;id&#39;],
                    subnet[&#39;gateway&#39;],
                    subnet[&#39;cidr&#39;],
                    subnet[&#39;networkVlanId&#39;]
                )
            )

    def getIpInSubnet(self, subnet_id):
        mask = &amp;quot;mask[virtualGuest,hardware]&amp;quot;
        subnet = self.client[&#39;SoftLayer_Network_Subnet&#39;]
        ips = subnet.getIpAddresses(id=subnet_id,mask=mask)
        for ip in ips:
            status = &amp;quot;Free&amp;quot;
            if ip[&#39;subnet&#39;][&#39;subnetType&#39;] == &amp;quot;PRIMARY&amp;quot;:
                status = &amp;quot;Reserved&amp;quot;
            elif ip[&#39;isNetwork&#39;]:
                status = &amp;quot;Network Ip&amp;quot;
            elif ip[&#39;isGateway&#39;]:
                status = &amp;quot;Gateway Ip&amp;quot;
            try: 
                status = ip[&#39;virtualGuest&#39;][&#39;fullyQualifiedDomainName&#39;]
            except KeyError:
                pass
            try:
                status = ip[&#39;hardware&#39;][&#39;fullyQualifiedDomainName&#39;]
            except KeyError:
                pass

            try:
                note = ip[&#39;note&#39;]
            except KeyError:
                note = &amp;quot;none&amp;quot;
            print(&amp;quot;%s: %s - %s - %s&amp;quot; % (ip[&#39;id&#39;],ip[&#39;ipAddress&#39;],status, note))

    def editNote(self, ip_id, note):
        &amp;quot;&amp;quot;&amp;quot;
            With editObject on SoftLayer_Network_Subnet_IpAddress you can only 
            edit the note, everything else will get ignored silently.
        &amp;quot;&amp;quot;&amp;quot;
        ip = {
            &#39;id&#39;: ip_id,
            &#39;note&#39;: note,
        }
        self.client[&#39;SoftLayer_Network_Subnet_IpAddress&#39;].editObject(ip,id=ip_id)

if __name__ == &amp;quot;__main__&amp;quot;:
    # CHANGE ME
    subnet_ip = 1234
    # CHANGE ME
    ip_id = 4567
    main = example()
    # List all subnets, find the ID of the one you want to work with
    main.getSubnets()
    # List all the IPs and their notes, find the id of the one you want to edit
    main.getIpInSubnet(subnet_ip)
    # Edit the note
    main.editNote(ip_id,&amp;quot;Hello World22&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Place block storage (performance ISCSI) order</title>
      <link>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a block storage (performance ISCSI).

Important manual pages:
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItems
http://sldn.softlayer.com/reference/services/SoftLayer_Location
http://sldn.softlayer.com/reference/services/SoftLayer_Location/getDatacenters
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type/getAllObjects
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Location
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Storage_Enterprise
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/blog/cmporter/Location-based-Pricing-and-You
http://sldn.softlayer.com/blog/bpotter/Going-Further-SoftLayer-API-Python-Client-Part-3
http://sldn.softlayer.com/article/Object-Filters
http://sldn.softlayer.com/article/Python
http://sldn.softlayer.com/article/Object-Masks

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# Values &amp;quot;AMS01&amp;quot;, &amp;quot;AMS03&amp;quot;, &amp;quot;CHE01&amp;quot;, &amp;quot;DAL05&amp;quot;, &amp;quot;DAL06&amp;quot; &amp;quot;FRA02&amp;quot;, &amp;quot;HKG02&amp;quot;, &amp;quot;LON02&amp;quot;, etc.
location = &amp;quot;AMS01&amp;quot;

# Values &amp;quot;20&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;80&amp;quot;, &amp;quot;100&amp;quot;, etc.
storageSize = &amp;quot;40&amp;quot;

# Values between &amp;quot;100&amp;quot; and &amp;quot;6000&amp;quot; by intervals of 100.
iops = &amp;quot;100&amp;quot;

# Values &amp;quot;Hyper-V&amp;quot;, &amp;quot;Linux&amp;quot;, &amp;quot;VMWare&amp;quot;, &amp;quot;Windows 2008+&amp;quot;, &amp;quot;Windows GPT&amp;quot;, &amp;quot;Windows 2003&amp;quot;, &amp;quot;Xen&amp;quot;
os = &amp;quot;Linux&amp;quot;

PACKAGE_ID = 222

client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]
packageService = client[&#39;SoftLayer_Product_Package&#39;]
locationService = client[&#39;SoftLayer_Location&#39;]
osService = client[&#39;SoftLayer_Network_Storage_Iscsi_OS_Type&#39;]

objectFilterDatacenter = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: location.lower()}}
objectFilterStorageNfs = {&amp;quot;items&amp;quot;: {&amp;quot;categories&amp;quot;: {&amp;quot;categoryCode&amp;quot;: {&amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iscsi&amp;quot;}}}}
objectFilterOsType = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: os}}

try:
    # Getting the datacenter.
    datacenter = locationService.getDatacenters(filter=objectFilterDatacenter)
    # Getting the performance storage NFS prices.
    itemsStorageNfs = packageService.getItems(id=PACKAGE_ID, filter=objectFilterStorageNfs)
    # Getting the storage space prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_space&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesStorageSpace = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the storage space value is invalid.
    if len(pricesStorageSpace) == 0:
        raise ValueError(&#39;The storage space value: &#39; + storageSize + &#39; GB, is not valid.&#39;)
    # Getting the IOPS prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: iops
                }
            },
            &amp;quot;attributes&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iops&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesIops = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the IOPS value is invalid for the configured storage space.
    if len(pricesIops) == 0:
        raise ValueError(&#39;The IOPS value: &#39; + iops + &#39;, is not valid for the storage space: &#39; + storageSize + &#39; GB.&#39;)
    # Getting the OS.
    os = osService.getAllObjects(filter=objectFilterOsType)
    # Building the order template.
    orderData = {
        &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Network_PerformanceStorage_Iscsi&amp;quot;,
        &amp;quot;packageId&amp;quot;: PACKAGE_ID,
        &amp;quot;location&amp;quot;: datacenter[0][&#39;id&#39;],
        &amp;quot;quantity&amp;quot;: 1,
        &amp;quot;prices&amp;quot;: [
            {
                &amp;quot;id&amp;quot;: itemsStorageNfs[0][&#39;prices&#39;][0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesStorageSpace[0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesIops[0][&#39;id&#39;]
            }
        ],
        &amp;quot;osFormatType&amp;quot;: os[0]
    }
    # verifyOrder() will check your order for errors. Replace this with a call to
    # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
    # that you can use for your records.
    response = productOrderService.verifyOrder(orderData)
    print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://softlayer.github.io/python/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/orderSSLCert/</guid>
      <description>

&lt;h4 id=&#34;generating-a-csr:a798909b54a41db7cd3faf021a46bea5&#34;&gt;Generating a CSR&lt;/h4&gt;

&lt;p&gt;You will need a csr to make this request, it should be on your local file system.&lt;/p&gt;

&lt;p&gt;The contents of the CSR &lt;em&gt;MATTER&lt;/em&gt;, they need to match the information for what you are ordering.
+ orderApproverEmailAddress must match the Email Address of the CSR
+ The CSR Common name must be set and must be a part of the orderApproverEmailAddress&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ openssl genrsa -out domain.key 2048
$ openssl req -new -sha256 -key domain.key -out domain.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:TX
Locality Name (eg, city) []:Houston
Organization Name (eg, company) [Internet Widgits Pty Ltd]:SoftLayer
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:lablayer.info
Email Address []:admin@lablayer.info

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

$
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer
import pprint
import logging

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        pp = pprint.PrettyPrinter(indent=4)
        filename = &#39;./domain.csr&#39;

        cert = self.file_get_contents(filename)
        addressInfo =  {
                    &amp;quot;addressLine1&amp;quot; : &amp;quot;1234 fleet street&amp;quot;,
                    &amp;quot;city&amp;quot; : &amp;quot;Houston&amp;quot;,
                    &amp;quot;countryCode&amp;quot; : &amp;quot;US&amp;quot;,
                    &amp;quot;postalCode&amp;quot; : &amp;quot;77090&amp;quot;,
                    &amp;quot;state&amp;quot; : &amp;quot;TX&amp;quot;
                }
        contactInfo = {
                &amp;quot;address&amp;quot;: addressInfo,
                &amp;quot;emailAddress&amp;quot;: &amp;quot;chgallo@lablayer.info&amp;quot;,
                &amp;quot;firstName&amp;quot;: &amp;quot;Christopher&amp;quot;,
                &amp;quot;lastName&amp;quot;: &amp;quot;Gallo&amp;quot;,
                &amp;quot;organizationName&amp;quot;: &amp;quot;SoftLayer&amp;quot;,
                &amp;quot;phoneNumber&amp;quot;: &amp;quot;281-123-4567&amp;quot;,
                &amp;quot;title&amp;quot;: &amp;quot;Dev&amp;quot;
            }
        sslContainer= {&#39;orderContainers&#39;: [
        {
            &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Security_Certificate&amp;quot;,
            &amp;quot;packageId&amp;quot;:0,
            &amp;quot;quantity&amp;quot;:1,
            &amp;quot;serverCount&amp;quot;:1,
            &amp;quot;certificateSigningRequest&amp;quot;: cert,
            &amp;quot;serverType&amp;quot;: &amp;quot;apacheopenssl&amp;quot;,
            # Needs to be a VERY specific email @ the domain you are registering
            # admin / administrator / hostmaster / root / webmaster / mailmaster
            &amp;quot;orderApproverEmailAddress&amp;quot;: &amp;quot;admin@lablayer.info&amp;quot;,
            &amp;quot;technicalContact&amp;quot;: contactInfo,
            &amp;quot;administrativeContact&amp;quot;: contactInfo,
            &amp;quot;billingContact&amp;quot;: contactInfo,
            &amp;quot;organizationInformation&amp;quot;: {
                &amp;quot;address&amp;quot; :addressInfo,
                &amp;quot;organizationName&amp;quot; : &amp;quot;SoftLayer&amp;quot;,
                &amp;quot;phoneNumber&amp;quot;: &amp;quot;281-123-4567&amp;quot;
            },
            &amp;quot;prices&amp;quot;: [
                #SSL_CERTIFICATE_RAPIDSSL_1_YEAR
                {&#39;id&#39;:1836}
            ]
        }
        ]
        }

        pp.pprint(sslContainer)

        result = self.client[&#39;SoftLayer_Product_Order&#39;].verifyOrder(sslContainer)
        pp.pprint(result)

    def file_get_contents(self,filename):
        with open(filename) as f:
            return f.read()

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>getCustomGraphData</title>
      <link>https://softlayer.github.io/python/tracking_objects/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/tracking_objects/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self, tracking_id):

        tracking_service = self.client[&#39;SoftLayer_Metric_Tracking_Object&#39;]
        bw_result = tracking_service.getBandwidthData(&#39;2015-10-01&#39;, &#39;2015-11-31&#39;, &#39;public&#39;, 600, id=tracking_id)
        object_type = [{&#39;keyName&#39;:&#39;PUBLICIN&#39;,&#39;summaryType&#39;:&#39;counter&#39;,&#39;name&#39;:&#39;vif_1_rx&#39;}]
        summary_result = tracking_service.getSummaryData(&#39;2015-11-01&#39;,&#39;2015-11-02&#39;, object_type, 600, id=tracking_id)
        args = {
            &#39;startDateTime&#39; : &#39;2015-11-01&#39;,
            &#39;endDateTime&#39;:&#39;2015-11-02&#39;,
            &#39;metrics&#39;: [{&#39;keyName&#39;:&#39;PUBLICIN&#39;,&#39;summaryType&#39;:&#39;counter&#39;,&#39;name&#39;:&#39;vif_1_rx&#39;}],
            &#39;interval&#39;:600,
            &#39;returnImage&#39;: False
        }
        custom_result = tracking_service.getCustomGraphData(args,id=tracking_id)
        pp(custom_result)

    # For use with a virtual Guest, just change
    # SoftLayer_Hardware_Server here with SoftLayer_Virtual_Guest
    def getTrackingId(self, server_id):
        tracking_id = self.client[&#39;SoftLayer_Hardware_Server&#39;].getMetricTrackingObjectId(id=server_id)
        return tracking_id

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    # CHANGE THIS
    my_server_id = 12345
    tracking_id = main.getTrackingId(my_server_id)
    main.main(tracking_id)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set user permissions</title>
      <link>https://softlayer.github.io/python/set_permission/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/set_permission/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class setPermissions():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, user_id):
        permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id)
        print(&amp;quot;=== OLD PERMISSIONS ===&amp;quot;)
        self.printPermissions(permissions)
        setperm = {&#39;keyName&#39;: &amp;quot;TICKET_ADD&amp;quot;}
        self.client[&#39;User_Customer&#39;].addPortalPermission(setperm, id=user_id)
        permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id)
        print(&amp;quot;=== NEW PERMISSIONS ===&amp;quot;)
        self.printPermissions(permissions)

    def getUsers(self):
        users = self.client[&#39;Account&#39;].getUsers()
        print(&amp;quot;ID - USERNAME - E-MAIL&amp;quot;)
        for user in users:
            print(&amp;quot;%s - %s - %s &amp;quot; % (user[&#39;id&#39;], user[&#39;username&#39;], user[&#39;email&#39;]))

    def printPermissions(sefl, permissions):
        for permission in permissions:
            print(&amp;quot;%s&amp;quot; % permission[&#39;keyName&#39;])

if __name__ == &amp;quot;__main__&amp;quot;:
    main = setPermissions()
    # CHANGE ME
    my_user = 439723
    main.getUsers()
    main.main(my_user)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Packages</title>
      <link>https://softlayer.github.io/python/list_packages/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/list_packages/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()
      
    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Gets ALL packages, and prints their name and price descriptions
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[hourlyBillingAvailableFlag]&amp;quot;
        result = self.client[&#39;Product_Package&#39;].getAllObjects();
        for product in result:
            print str(product[&#39;id&#39;]) + &amp;quot; - &amp;quot; + product[&#39;name&#39;]
        # result has a LOT of stuff in it, only print it out if you are ready
        # pp.pprint(result)

    def getPackage(self, package_id=0):
        &amp;quot;&amp;quot;&amp;quot;
        Gets a specific package and prints out some useful information
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[items[prices]]&amp;quot;

        # Not all packages are available in all locations, you can check that with getLocations()
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        # pp(locations)

        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)

        for item in result[&#39;items&#39;]:
            print str(item[&#39;id&#39;]) + &amp;quot; - &amp;quot; + item[&#39;description&#39;] + &amp;quot; --- &amp;quot; + item[&#39;keyName&#39;]
            for prices in item[&#39;prices&#39;]:
                print &amp;quot;\t&amp;quot; + str(prices[&#39;id&#39;]) + &amp;quot; - locationGroupId: &amp;quot; + str(prices[&#39;locationGroupId&#39;]) 

        # Will only get the server items for this package
        # serverItems = self.client[&#39;Product_Package&#39;].getActiveServerItems(id=package_id)
        # print &amp;quot;SERVER ITEMS&amp;quot;
        # pp(serverItems)

        # Will only get the RAM items for the package
        # ramItems = self.client[&#39;Product_Package&#39;].getActiveRamItems(id=package_id)
        # print &amp;quot;RAM ITEMS&amp;quot;
        # pp(ramItems)

     
    
    def getAllLocations(self):
        mask = &amp;quot;mask[id,locations[id,name]]&amp;quot;
        result = self.client[&#39;SoftLayer_Location_Group_Pricing&#39;].getAllObjects(mask=mask);
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
    main.getPackage(126)
    main.getAllLocations()  

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>https://softlayer.github.io/python/create_vsi_options/</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/create_vsi_options/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;&#39;&#39;
An example of how to create a VSI from the SL python library
&#39;&#39;&#39;
from __future__ import print_function
import SoftLayer
from SoftLayer.managers.vs import VSManager

def create_vsi():
    #Create a client to the SoftLayer_Account API service.
    #Note: currently set without the user ID and API key since
    #it will by default use the values set in the CLI
    #to use other values use SoftLayer.Client(sl_username, sl_api_key)
    client = SoftLayer.Client()
    vsi_mgr = VSManager(client)

    # uncomment to display create options
    # print(vsi_mgr.get_create_options())

    # common values
    datacenter = &#39;sjc01&#39; # the data center code
    domain = &#39;example.com&#39; # the domain name suffix for the host
    os_code = &#39;CENTOS_6_64&#39; # the operating system code
    local_disk = True # local disk or SAN
    hourly = True # hourly or monthly billing
    dedicated = False # multi-tenant or single tenant
    private_vlan = &#39;825831&#39; # VLAN for the server see VLAN list above
    nic_speed = 1000 # speed of network device
    disks = [100] # size of the disks
    private = True # private networking only or include public internet networking as well
    ssh_keys = [227113, 229467] # the IDs of the ssh keys to load on the server - use slcli sshkey list

    # server properties
    hostname = &#39;myhost&#39;
    cpus = 4
    memory = 8192
    tags = &#39;owner:bob,project:poc,type:docker&#39;

    # code that can verify the create operation without actually doing it
    # template = vsi_mgr.verify_create_instance(hostname=hostname, domain=domain,
    #                                 cpus=cpus, memory=memory, datacenter=datacenter,
    #                                 os_code=os_code, local_disk=local_disk,
    #                                 hourly=hourly, dedicated=dedicated,
    #                                 private_vlan=private_vlan, disks=disks,
    #                                 nic_speed=nic_speed, private=private,
    #                                 ssh_keys=ssh_keys, tags=tags)
    # print(template)

    result = vsi_mgr.create_instance(hostname=hostname, domain=domain,
                                     cpus=cpus, memory=memory, datacenter=datacenter,
                                     os_code=os_code, local_disk=local_disk,
                                     hourly=hourly, dedicated=dedicated,
                                     private_vlan=private_vlan, disks=disks,
                                     nic_speed=nic_speed, private=private,
                                     ssh_keys=ssh_keys, tags=tags)
    print(result)

if __name__ == &#39;__main__&#39;:
    create_vsi()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find active VMs by creator</title>
      <link>https://softlayer.github.io/python/find_my_vms/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/find_my_vms/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;&#39;&#39;
Code example of how to list virtual instances from a SoftLayer account
You can call the script from the command and provide the user ID you
want to check. The script expects that you have the SoftLayer CLI
installed and have it configured with the credentials you&#39;d like
to use with SoftLayer.

You can run the script with the user ID you&#39;d like to check under
the account you have configured:
find_my_active_vms userid

The output of the script is in a csv format with tabs as the
column separator.
&#39;&#39;&#39;
from __future__ import print_function
import sys
import SoftLayer


def list_my_vms(creator_id=None):
    &amp;quot;&amp;quot;&amp;quot;
    Get the list of active VMs based on the creator ID

    Keyword arguments:
    creator_id -- the SoftLayer ID of the VM&#39;s creator (default: None)
    &amp;quot;&amp;quot;&amp;quot;

    # create a client to the SoftLayer_Account API service.
    client = SoftLayer.Client()

    # number of results that we expect at a time
    chunk = 200
    mask = &amp;quot;id,fullyQualifiedDomainName,primaryIpAddress,createDate,billingItem[orderItem[description, order[userRecord[username], id]]]&amp;quot;

    # get the data from the SoftLayer APIs
    vms = client.iter_call(&amp;quot;Account&amp;quot;, &amp;quot;getVirtualGuests&amp;quot;, chunk=chunk, mask=mask)
    if creator_id is None:
        # if the creator wasn&#39;t provided use the
        # user provided to the API call as the creator
        creator_id = client.auth.username

    # add table header
    print(&#39;VM ID&#39;, &#39;\t&#39;, &#39;Host&#39;, &#39;\t&#39;, &#39;Public IP&#39;, &#39;\t&#39;, &#39;Create Date&#39;)
    for vsi in vms:
        # navigate to the creator property under the VMs billing item
        if &#39;billingItem&#39; in vsi.keys():
            billing_item = vsi[&#39;billingItem&#39;]
            if &#39;orderItem&#39; in billing_item.keys():
                vm_creator_userid = billing_item[&#39;orderItem&#39;][&#39;order&#39;][&#39;userRecord&#39;][&#39;username&#39;]
                if creator_id == vm_creator_userid:
                    print(str(vsi[&#39;id&#39;]), &#39;\t&#39;,
                          vsi[&#39;fullyQualifiedDomainName&#39;], &#39;\t&#39;,
                          vsi.get(&#39;primaryIpAddress&#39;, &#39;N/A&#39;), &#39;\t&#39;, vsi[&#39;createDate&#39;])

if __name__ == &#39;__main__&#39;:
    if len(sys.argv) == 1:
        list_my_vms()
    else:
        list_my_vms(sys.argv[1])

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Server Bandwidth</title>
      <link>https://softlayer.github.io/python/get_bandwidth_data/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/get_bandwidth_data/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import pprint

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        pp = pprint.PrettyPrinter(indent=2)
        theMask = &amp;quot;mask[inboundPrivateBandwidthUsage,inboundPublicBandwidthUsage,outboundPrivateBandwidthUsage,outboundPublicBandwidthUsage]&amp;quot;
        result = self.client[&#39;SoftLayer_Account&#39;].getHardware()
        print &amp;quot;server_name,public_in,public_out,private_in,private_out&amp;quot;
        
        for server in result:
            #getHardware() only returns SoftLayer_Hardware, which doesn&#39;t have the private bw usage metrics, for some reason.
            # So we just use SoftLayer_Hardware_Server here, which has more detailed information
            serverInfo = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=server[&#39;id&#39;],mask=theMask)

            # use .get() to avoid exceptions
            pubin = serverInfo.get(&#39;inboundPublicBandwidthUsage&#39;, &#39;--&#39;)
            pubout = serverInfo.get(&#39;outboundPublicBandwidthUsage&#39;, &#39;--&#39;)
            privin =serverInfo.get(&#39;inboundPrivateBandwidthUsage&#39;, &#39;--&#39;)
            privout = serverInfo.get(&#39;outboundPrivateBandwidthUsage&#39;, &#39;--&#39;)

            print(serverInfo[&#39;fullyQualifiedDomainName&#39;] + &amp;quot;,&amp;quot;),
            print(pubin + &amp;quot;,&amp;quot;),
            print(pubout + &amp;quot;,&amp;quot;),
            print(privin + &amp;quot;,&amp;quot;),
            print(privout)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
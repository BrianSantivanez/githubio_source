<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on SoftLayer API</title>
    <link>https://softlayer.github.io/python/</link>
    <description>Recent content in Python on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a support ticket</title>
      <link>https://softlayer.github.io/python/create_ticket/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/create_ticket/</guid>
      <description>Getting Subjects Standard support tickets&amp;rsquo; titles must be selected from a pre-determined list of ticket subjects, defined in the SoftLayer_Ticket_Subject service. The following example will output all of the Ticket Subjects:
import SoftLayer client = SoftLayer.Client() def getSubjects(self): mask = &amp;quot;mask[group]&amp;quot; subjects = client.call(&#39;SoftLayer_Ticket_Subject&#39;, &#39;getAllObjects&#39;, mask=mask) print(&amp;quot;|Subject Id | Subject Name | Group Name |&amp;quot;) print(&amp;quot;| --- | --- | --- |&amp;quot;) for subject in subjects: print(&amp;quot;|%s| %s| %s|&amp;quot; % (subject[&#39;id&#39;], subject[&#39;name&#39;], subject[&#39;group&#39;][&#39;name&#39;]))  Subjects    Subject Id Subject Name Group Name     1522 API Question Support   1001 Accounting Request Accounting   1181 CDN Question SysAdmin   1261 Colocation Service Request Hardware   1041 DNS Request Support   1201 DOS/Abuse Issue Support   1121 Hardware Firewall Question Support   1021 Hardware Issue Support   1122 Hardware Load Balancer Question Support   1081 Licensing Question Support   1141 Mail Server Issue Support   1004 OS Reload Question Support   1005 Portal Information Question Support   1061 Private Network Question Support   1022 Public Network Question Support   1003 Reboots and Console Access Support   1002 Sales Request Sales   1603 Sales Request - Compute &amp;amp; Infrastructure Sales   1645 Sales Request - Firewall Service Sales   1647 Sales Request - General Question Sales   1605 Sales Request - Network &amp;amp; Security Services Sales   1643 Sales Request - Other Services Sales   1607 Sales Request - Upgrades &amp;amp; Add-ons Sales   1101 Security Issue Support   1161 Storage Question Support   1221 Transcoding Question Support   1723 VMware Solutions VMware Solutions   1482 Vyatta Question SysAdmin    Creating Tickets Once you have the Ticket Subject ID you can pass it to createStandardTicket.</description>
    </item>
    
    <item>
      <title>Ordering with KeyNames</title>
      <link>https://softlayer.github.io/python/ordering_slcli/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/ordering_slcli/</guid>
      <description>Version 5.4.0 of the Softlayer-python project introducted some managers and CLI functions that greatly simplify the ordering processes via the api.
Building a package still requires a few steps however.
1. Find the package name slcli order package-list  The most common packages are the following:
   Description Package KeyName Package Type     Additional Products ADDITIONAL_PRODUCTS ADDITIONAL_SERVICES   Cloud Server CLOUD_SERVER VIRTUAL_SERVER_INSTANCE   Network Gateway Appliance NETWORK_GATEWAY_APPLIANCE BARE_METAL_GATEWAY   Load Balancers LOAD_BALANCERS ADDITIONAL_SERVICES_LOAD_BALANCER   Bare Metal Server BARE_METAL_SERVER BARE_METAL_CPU_FAST_PROVISION   POWER8 TULETA IBM_POWER_8 BARE_METAL_POWER_CPU   Object Storage OBJECT_STORAGE ADDITIONAL_SERVICES_OBJECT_STORAGE   Firewall FIREWALL ADDITIONAL_SERVICES_FIREWALL   Storage As A Service (StaaS) STORAGE_AS_A_SERVICE_STAAS STORAGE_AS_A_SERVICE   Load Balancer As A Service (LBaaS) LBAAS LOAD_BALANCER_AS_A_SERVICE   Dedicated Host DEDICATED_HOST DEDICATED_HOST   Public Virtual Server PUBLIC_CLOUD_SERVER VIRTUAL_SERVER_INSTANCE    Once we have selected a package we need to find out where we can order this package.</description>
    </item>
    
    <item>
      <title>Create a new virtual server and attach Security Groups</title>
      <link>https://softlayer.github.io/python/createvsiwithsecgroup/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/createvsiwithsecgroup/</guid>
      <description>from __future__ import print_function import SoftLayer from SoftLayer.managers.vs import VSManager def create_vsi(): #Create a client to the SoftLayer_Account API service. #Note: currently set without the user ID and API key since #it will by default use the values set in the CLI #to use other values use SoftLayer.Client(sl_username, sl_api_key) client = SoftLayer.Client() vsi_mgr = VSManager(client) # common values datacenter = &#39;wdc07&#39; domain = &#39;cde.services&#39; os_code = &#39;UBUNTU_LATEST_64&#39; local_disk = True hourly = True dedicated = False nic_speed = 1000 disks = [100] private = False ssh_keys = [972047] public_security_groups = [43507] private_security_groups = [43511] # server properties hostname = &#39;sgvsi&#39; cpus = 2 memory = 2048 result = vsi_mgr.</description>
    </item>
    
    <item>
      <title>Add, list, and remove security group rules</title>
      <link>https://softlayer.github.io/python/securitygroup_rule_ops/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/securitygroup_rule_ops/</guid>
      <description>Adding a rule to a security group import SoftLayer # For nice debug output from pprint import pprint as pp # Create a client for use with the NetworkManager client = SoftLayer.Client() net_mgr = SoftLayer.NetworkManager(client) sg_id = 123045 direction = &#39;ingress&#39; ethertype = &#39;IPv4&#39; remote_ip = &#39;169.148.34.0/24&#39; protocol = &#39;tcp&#39; port_min = 22 port_max = 22 try: result = net_mgr.add_securitygroup_rule(sg_id, direction=direction, ethertype=ethertype, remote_ip=remote_ip, protocol=protocol, port_min=port_min, port_max=port_max) pp(result) except SoftLayer.SoftLayerAPIError as e: pp(&#39;Failed.</description>
    </item>
    
    <item>
      <title>Create, list, get, and delete security groups</title>
      <link>https://softlayer.github.io/python/securitygroup_ops/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/securitygroup_ops/</guid>
      <description>Creating a security group import SoftLayer # For nice debug output from pprint import pprint as pp # Create a client for use with the NetworkManager client = SoftLayer.Client() net_mgr = SoftLayer.NetworkManager(client) name = &#39;pythonCreatedGroupExample&#39; description = &#39;Security Group created via python&#39; try: result = net_mgr.create_securitygroup(name=name, description=description) pp(result) except SoftLayer.SoftLayerAPIError as e: pp(&#39;Failed... Unable to create a new security group: faultCode=%s, faultString=%s&#39; % (e.faultCode, e.faultString))  Deleting a security group import SoftLayer # For nice debug output from pprint import pprint as pp # Create a client for use with the NetworkManager client = SoftLayer.</description>
    </item>
    
    <item>
      <title>VSIs and security groups</title>
      <link>https://softlayer.github.io/python/securitygroup_vsis/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/securitygroup_vsis/</guid>
      <description>Creating a VSI with security groups import SoftLayer # For nice debug output from pprint import pprint as pp # Create a client for use with the VSManager client = SoftLayer.Client() vs_mgr = SoftLayer.VSManager(client) http_sg_id = 384757 ssh_sg_id = 576973 # Allow only HTTP on the public interface of the VSI public_groups = [http_sg_id] # Allow HTTP and SSH on the private interface of the VSI private_groups = [http_sg_id, ssh_sg_id] # If we didn&#39;t want to set any security groups on an interface # (which allows all traffic), we don&#39;t set the associated # creation kwarg create_kwargs = { &#39;hostname&#39;: &#39;sg-vsi&#39;, &#39;domain&#39;: &#39;mycompany.</description>
    </item>
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderBareMetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.
 Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    
    <item>
      <title>Object Storage Uploader</title>
      <link>https://softlayer.github.io/python/swiftUploader/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/swiftUploader/</guid>
      <description>Overview Weâ€™ve recently added the option to import customer-supplied Virtual Hard Disks (VHDs) to our object storage offering. This is a great option for our customers who may have special virtual machines that they have spent hours perfecting. Since learning to import these images can pose a slight challenge, especially for those unfamiliar with object storage (OpenStack Swift), I wrote this blog to share scripts that will streamline the process.</description>
    </item>
    
    <item>
      <title>Get Dedicated Host Allocation</title>
      <link>https://softlayer.github.io/python/getDediHostAllocation/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/getDediHostAllocation/</guid>
      <description>The first thing you need to get is a list of the Dedicated Hosts on your account. To list the Dedicated Hosts on your account you can use the following code:
import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() dedicatedHosts = client[&#39;SoftLayer_Account&#39;].getDedicatedHosts() pp(dedicatedHosts)  Once you have the Dedicated Host ID you can use the following code to retrieve the resource allocations on the host.
&amp;quot;&amp;quot;&amp;quot; @author Ryan TIffany &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp dedicatedHostId = 10501 client = SoftLayer.</description>
    </item>
    
    <item>
      <title>Get Dedicated Host Guests</title>
      <link>https://softlayer.github.io/python/getDedicatedHostGuests/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/getDedicatedHostGuests/</guid>
      <description>The first thing you need to get is a list of the Dedicated Hosts on your account. To list the Dedicated Hosts on your account you can use the following code:
import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() dedicatedHosts = client[&#39;SoftLayer_Account&#39;].getDedicatedHosts() pp(dedicatedHosts)  Once you have the Dedicated Host ID you can use the following code to retrieve the Virtual Guests on the host.
&amp;quot;&amp;quot;&amp;quot; @service SoftLayer_Virtual_DedicatedHost @author Ryan TIffany &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp dhId = 10001 client = SoftLayer.</description>
    </item>
    
    <item>
      <title>Migrate a VSI between dedicated hosts</title>
      <link>https://softlayer.github.io/python/migrateDedicatedInstance/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/migrateDedicatedInstance/</guid>
      <description>The first thing you need to get is a list of the Dedicated Hosts on your account. To list the Dedicated Hosts on your account you can use the following code:
import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() dedicatedHosts = client[&#39;SoftLayer_Account&#39;].getDedicatedHosts() pp(dedicatedHosts)  Once you have the Dedicated Host ID you want to migrate the Virtual Guest to you can use this script to kick of an immediate migration of the Virtual Guest.</description>
    </item>
    
    <item>
      <title>Show user accounts with and without two-factor enabled</title>
      <link>https://softlayer.github.io/python/externalBindingUsers/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/externalBindingUsers/</guid>
      <description>To get a list of users with Two-Factor authentication enabled.
&amp;quot;&amp;quot;&amp;quot; @author Ryan TIffany &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() mask = mask&amp;quot;[id,username,firstName,lastName,externalBindingCount,externalBindings]&amp;quot; theFilter = { &#39;users&#39;: { &#39;externalBindings&#39;:{ &#39;active&#39;:{ &#39;operation&#39;:&#39;1&#39; }}} } getUsers = client[&#39;SoftLayer_Account&#39;].getUsers(filter=theFilter, mask=mask) pp(getUsers)  To get a list of users without Two-Factor authentication enabled.
&amp;quot;&amp;quot;&amp;quot; @author Ryan TIffany &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp client = SoftLayer.</description>
    </item>
    
    <item>
      <title>Router Model Map</title>
      <link>https://softlayer.github.io/python/networkMapper/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/networkMapper/</guid>
      <description>Prints out model numbers of networking equipment that is on route to your servers. Could be useful if merged with https://softlayer.github.io/python/networktopology/
&amp;quot;&amp;quot;&amp;quot; @author Christopher Gallo Finds the model number of all networking equipment that is on the way to servers on the account. &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp class networkMap(): def __init__(self): self.client = SoftLayer.Client() def main(self): &amp;quot;&amp;quot;&amp;quot; Goes through each server, and prints out what networking hardware is upstream &amp;quot;&amp;quot;&amp;quot; mask = &amp;quot;mask[id, fullyQualifiedDomainName]&amp;quot; servers = self.</description>
    </item>
    
    <item>
      <title>Provision Times</title>
      <link>https://softlayer.github.io/python/provisionTimes/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/provisionTimes/</guid>
      <description>Goes through orders and prints out each transaction that provisioned a server or virtual server. Calculates provision time from the time the order was placed, till the time the transaction went to COMPLETE.
Order: 15866609 - 2017-06-09T10:42:04-06:00 FQDN, Status, transaction id, elapsed time sgtest.cdetest.info, COMPLETE, 57090965, 383.0 Order: 15861187 - 2017-06-09T09:07:49-06:00 FQDN, Status, transaction id, elapsed time jumpbox.cdetest.info, COMPLETE, 57080823, 774.0 Order: 15860993 - 2017-06-09T08:53:22-06:00 FQDN, Status, transaction id, elapsed time Order: 15853891 - 2017-06-09T04:47:32-06:00 FQDN, Status, transaction id, elapsed time d1.</description>
    </item>
    
    <item>
      <title>Get bills by user</title>
      <link>https://softlayer.github.io/python/billsByUser/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/billsByUser/</guid>
      <description>This is a rough script, it doesn&amp;rsquo;t include some of the tax fees and some of the other one off fee fields that you will find in http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item
Example Output for billsByUser()
chris-cde - 840.0 123.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $345.0 234.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $495.0 chris.testing.com : 2 x 2.0 GHz Cores $0.0 4 Portable Private IP Addresses - $0.</description>
    </item>
    
    <item>
      <title>Tag Vlans</title>
      <link>https://softlayer.github.io/python/vlanTagging/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/vlanTagging/</guid>
      <description>A rough examples of how to add vlans to servers
&amp;quot;&amp;quot;&amp;quot; @author Christopher Gallo @sldn{SoftLayer_Network_Component} @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks} @manager{hardware} Goes through a list of servers, add the specified vlan to each one &amp;quot;&amp;quot;&amp;quot; import SoftLayer class testVlanTag(): def __init__(self): &amp;quot;&amp;quot;&amp;quot;SoftLayer Client&amp;quot;&amp;quot;&amp;quot; self.client = SoftLayer.Client() self.mgr = SoftLayer.HardwareManager(self.client) def addVlanTrunks(self, id, vlans): &amp;quot;&amp;quot;&amp;quot; Adds a vlan to a network component @param id ID of SoftLayer_Network_Component you want to add vlan to @param vlans dictionary of vlan nubmers you want to add @sldn{SoftLayer_Network_Component,addNetworkVlanTrunks} @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks} &amp;quot;&amp;quot;&amp;quot; for vlanNumber in vlans: print &amp;quot;Adding vlan %s to %s&amp;quot; % (vlanNumber,id) result = self.</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/python/getKvmDetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/getKvmDetails/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; @author Ryan Tiffany &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() mask = &amp;quot;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&amp;quot; getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=31678643) pp(getDetails)  </description>
    </item>
    
    <item>
      <title>Reloading a server with a custom partition scheme</title>
      <link>https://softlayer.github.io/python/reloadCustomPartition/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/reloadCustomPartition/</guid>
      <description>The following code allows you to reload a Bare Metal server with a custom partitioning scheme. You simply need to change the serverId and the partitions to suit your needs. Note that one partition must be marked as the &amp;lsquo;grow&amp;rsquo; partition.
import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): serverId = 1154505 config = { &amp;quot;upgradeHardDriveFirmware&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;upgradeBios&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;hardDrives&amp;quot;: [ { &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Hardware_Component_HardDrive&amp;quot;, &amp;quot;partitions&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;/boot&amp;quot;, &amp;quot;minimumSize&amp;quot;: &amp;quot;.</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>https://softlayer.github.io/python/networkTopology/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/networkTopology/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; @author Christopher Gallo &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): mask = &amp;quot;&amp;quot;&amp;quot; mask[ attachedNetworkGateway[publicVlan,privateVlan], hardware[fullyQualifiedDomainName,frontendNetworkComponents[uplinkComponent], backendNetworkComponents[uplinkComponent]], network, networkSpace, primaryRouter[hostname], primarySubnet, subnets[networkIdentifier], virtualGuests[fullyQualifiedDomainName] ] &amp;quot;&amp;quot;&amp;quot; orderedVlans = {} result = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask) &amp;quot;&amp;quot;&amp;quot; This bit builds a nicely structured object of the network topology &amp;quot;&amp;quot;&amp;quot; for vlan in result: vlanNumber = vlan[&#39;vlanNumber&#39;] router,dc = vlan[&#39;primaryRouter&#39;][&#39;hostname&#39;].split(&amp;quot;.&amp;quot;) if dc not in orderedVlans: orderedVlans[dc] = {} if router not in orderedVlans[dc]: orderedVlans[dc][router] = {} toAppend = { &#39;hardware&#39;: vlan[&#39;hardware&#39;], &#39;virtualGuests&#39;: vlan[&#39;virtualGuests&#39;], &#39;subnets&#39;: vlan[&#39;subnets&#39;] } if &#39;attachedNetworkGateway&#39; in vlan: if vlan[&#39;networkSpace&#39;] == &#39;PUBLIC&#39;: gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;publicVlan&#39;][&#39;vlanNumber&#39;] elif vlan[&#39;networkSpace&#39;] == &#39;PRIVATE&#39;: gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;privateVlan&#39;][&#39;vlanNumber&#39;] if gatewayVlan not in orderedVlans[dc][router]: orderedVlans[dc][router][gatewayVlan] = {} orderedVlans[dc][router][gatewayVlan][vlanNumber] = toAppend orderedVlans[dc][router][gatewayVlan][&#39;gateway&#39;] = True else: orderedVlans[dc][router][vlanNumber] = toAppend &amp;quot;&amp;quot;&amp;quot; This bit prints out everything nicely-ish.</description>
    </item>
    
    <item>
      <title>Endurance Storage Replication</title>
      <link>https://softlayer.github.io/python/EnduranceReplication/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/EnduranceReplication/</guid>
      <description>Some good starting reading.
 https://knowledgelayer.softlayer.com/procedure/endurance-replication https://knowledgelayer.softlayer.com/procedure/endurance-snapshots http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots  For more information on the magic of storage ordering see the following
 https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py  This example should touch on all the basics of dealing with endurance storage replication volumes. This example uses the SoftLayer-python File manager a little bit for ordering
TO authorize hosts that are NOT virtual guests, see the allowAccessFrom* methods in
 http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/  Graceful vs Immediate failover</description>
    </item>
    
    <item>
      <title>Subnets and Bandwidth Pools</title>
      <link>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def getPublicSubnets(self): &amp;quot;&amp;quot;&amp;quot; subnet types SECONDARY_ON_VLAN = Portable IPs PRIMARY SUBNET_ON_VLAN = static subnets PRIMARY_6 STATIC_IP_ROUTED GLOBAL_IP ADDITIONAL_PRIMARY &amp;quot;&amp;quot;&amp;quot; object_filter = { &#39;publicSubnets&#39; : { &#39;subnetType&#39; : { &#39;operation&#39;: &#39;SECONDARY_ON_VLAN&#39; } } } subnets = self.client[&#39;Account&#39;].getPublicSubnets(filter=object_filter) pp(subnets) def getBandwidthPools(self): &amp;quot;&amp;quot;&amp;quot; bareMetalInstances and privateNetworkOnlyHardware may need to be included in the mask if applicable. &amp;quot;&amp;quot;&amp;quot; mask = &amp;quot;mask[hardware,virtualGuests]&amp;quot; pool = self.</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/python/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/getVerboseBmDetails/</guid>
      <description>This script will get the Packages, Categories, and items associated with a Bare Metal Server.
import SoftLayer import pprint from pprint import pprint as pp client = SoftLayer.Client() mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot; getDetails = client[&#39;SoftLayer_Hardware&#39;].getObject(mask=mask,id=296740) pp(getDetails)  </description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/python/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/getVerboseVsiDetails/</guid>
      <description>This script will get the Packages, Categories, and items associated with a Virtual Guest.
import SoftLayer import pprint from pprint import pprint as pp client = SoftLayer.Client() mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot; getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=26961063) pp(getDetails)  </description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/python/orderNetscaler/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderNetscaler/</guid>
      <description>import SoftLayer from pprint import pprint as pp class orderNetscaler(): def __init__(self): self.client = SoftLayer.Client() def main(self): productOrder = { &#39;orderContainers&#39;: [ {&amp;quot;hardware&amp;quot;: [{ &amp;quot;primaryBackendNetworkComponent&amp;quot;: { # REPLACE THIS &amp;quot;networkVlanId&amp;quot;: 1234 }, &amp;quot;primaryNetworkComponent&amp;quot;: { # REPLACE THIS &amp;quot;networkVlanId&amp;quot;: 456 } }], # REPLACE THIS with your location &amp;quot;location&amp;quot;: &amp;quot;DALLAS09&amp;quot;, &amp;quot;packageId&amp;quot;: 192, &amp;quot;quantity&amp;quot;: 1, # Price IDS for Netscaler and 2 IPs &amp;quot;prices&amp;quot;: [ {&amp;quot;id&amp;quot;: 44964}, {&amp;quot;id&amp;quot;: 17238} ] }] } order = self.</description>
    </item>
    
    <item>
      <title>Get a list of Virtual Guests and Bare Metal servers per Pod in a Datacenter</title>
      <link>https://softlayer.github.io/python/listByPod/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/listByPod/</guid>
      <description>import SoftLayer import pprint from prettytable import PrettyTable client = SoftLayer.Client() # Define datacenter e.g: dal05, dal09, ams01, sao01, etc datacenter = &#39;dal10&#39; # Declare a new API service objects for SoftLayer_Account accountClient = client[&#39;SoftLayer_Account&#39;] # Define objectMask and objectFilters to get additional information objectMask = &#39;mask[primaryNetworkComponent[router[hostname]]]&#39; objectFilterBms = {&amp;quot;hardware&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}} objectFilterVsi = {&amp;quot;virtualGuests&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}} # Define array to add pods pods = [] try: # Getting servers and vsis servers = accountClient.</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/python/migratevsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/migratevsi/</guid>
      <description>You can use the following python example to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.
import SoftLayer import json # The package for Virtual Guests packageId = 46 # Our exising VSI ID virtualGuests = [ { &amp;quot;id&amp;quot;:25367125 } ] # The price item id for a 25GB Local Primary Drive.</description>
    </item>
    
    <item>
      <title>Monitoring Examples</title>
      <link>https://softlayer.github.io/python/monitoring/</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/monitoring/</guid>
      <description>ResponseStatus codes and what they mean. http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Monitor_Version1_Query_Result
 0: CRITICAL 1: Warning 2: OK
 4 - 5: Unknown Status, Contact Support  More information: https://stackoverflow.com/questions/37662607/python-api-monitoring-manager
This example gets the status of your Basic and Advanced monitoring.
import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): return True def getBasicStatus(self, server_id): mask = &amp;quot;mask[fullyQualifiedDomainName, networkMonitors[lastResult]]&amp;quot; server = self.client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(id=server_id, mask=mask ) pp(server) def getAdvancedStatus(self, server_id): mask = &amp;quot;mask[fullyQualifiedDomainName, monitoringAgents[configurationValues[definition]]]&amp;quot; server = self.</description>
    </item>
    
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://softlayer.github.io/python/order_quote_advanced/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/order_quote_advanced/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def orderQuote(self, quote_id, dc_id = None, image_id = None, private_vlan = None, public_vlan = None): # If you have more than 1 server in the quote, you will need to append # a copy of this for each VSI, with hostnames changed as needed guests = { &#39;hostname&#39;: &#39;quotetest&#39;, &#39;domain&#39;: &#39;example.com&#39; } if public_vlan: guests.update({ &#39;primaryNetworkComponent&#39;: { &amp;quot;networkVlan&amp;quot;: {&amp;quot;id&amp;quot;: int(public_vlan)}}}) if private_vlan: guests.</description>
    </item>
    
    <item>
      <title>Create a snapshot schedule</title>
      <link>https://softlayer.github.io/python/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/enableSnapshots/</guid>
      <description>This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.
import SoftLayer client = SoftLayer.Client() storageId = 11657445 # Define parameters for snapshot scheduleType = &#39;WEEKLY&#39; retentionCount = &#39;20&#39; minute = &#39;1&#39; hour = &#39;13&#39; dayOfWeek = &#39;SUNDAY&#39; try: result = client[&#39;SoftLayer_Network_Storage&#39;].enableSnapshots(scheduleType, retentionCount, minute, hour, dayOfWeek, id=storageId) print (result) except SoftLayer.SoftLayerAPIError as e: print(&amp;quot;Error: &amp;quot; % (e.</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>https://softlayer.github.io/python/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/createSnapshot/</guid>
      <description>Trigger a manual snapshot creation of a Block storage volume.
import SoftLayer import json iscsiStorageId = 8744521 client = SoftLayer.create_client_from_env() networkStorageIscsiService = client[&#39;SoftLayer_Network_Storage_Iscsi&#39;] try: iscsiStorage = networkStorageIscsiService.createSnapshot(id=iscsiStorageId) print(json.dumps(iscsiStorage, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;))) except SoftLayer.SoftLayerAPIError as e: print(&amp;quot;Unable to retrieve the Network Storage Iscsi. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))  The process can take sometime to complete. You can check the snapshots associated with a storage volume by using the code below:</description>
    </item>
    
    <item>
      <title>Create A Domain</title>
      <link>https://softlayer.github.io/python/createDNS/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/createDNS/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): zone_name = &#39;lablayer2.info&#39; zone_client = self.client[&#39;SoftLayer_Dns_Domain&#39;] the_zone = { &#39;name&#39; : zone_name, &#39;resourceRecords&#39; : [ { &#39;data&#39; : &#39;123.123.123.123&#39;, &#39;host&#39; : &#39;ns1&#39;, &#39;type&#39; : &#39;a&#39;, }, { &#39;data&#39; : &#39;123.123.123.123&#39;, &#39;host&#39; : &#39;ns2&#39;, &#39;type&#39; : &#39;a&#39;, }, { &#39;data&#39; : &#39;123.123.123.123&#39;, &#39;host&#39; : &#39;@&#39;, &#39;type&#39; : &#39;a&#39;, }, { &#39;data&#39; : &#39;ns2.lablayer2.info.&#39;, &#39;host&#39; : &#39;@&#39;, &#39;type&#39; : &#39;ns&#39;, }, { &#39;data&#39; : &#39;ns1.</description>
    </item>
    
    <item>
      <title>Create a new Bandwidth Pool</title>
      <link>https://softlayer.github.io/python/createBWpool/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/createBWpool/</guid>
      <description>import SoftLayer # For nice debug output: from pprint import pprint as pp # Set the needed values to create a new item accountId = 111111 # The values for bandwidthAllotmentTypeId are: (1) and (2) # where: (1) means this allotment is marked as a virtual private rack or # (2) bandwidth pooling bandwidthAllotmentTypeId = 2 # To get locationGroupId, execute: SoftLayer_Location_Group::getAllObjects locationGroupId = 1 newBandwithPoolName = &#39;newBWpool&#39; # Create an object template to create the item.</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/python/createLBpython/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/createLBpython/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; Order a load balancer Important manual pages: http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer import json # The package to order load balancers. packageId = 194 # Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain # much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id # to know what you want to order. # Since Load Balancers can have Location Specific itemPriceId&#39;s I am using the following script to # return just the standard (location agnostic) itemPriceId&#39;s.</description>
    </item>
    
    <item>
      <title>Adding/Removing Servers in a Bandwidth Pool</title>
      <link>https://softlayer.github.io/python/adjustpool/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/adjustpool/</guid>
      <description>The following script allows you to add and remove servers in an existing bandwidth pool. The script requires empty arrays when not specifying a Bare Metal or Virtual Guest Id.
import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() hardwareToAdd = [{&amp;quot;id&amp;quot;: 123456 }] # ID&#39;s for any bare metal servers to add to the pool hardwareToRemove = [] # ID&#39;s for any bare metal servers to remove from the pool cloudsToAdd = [] # ID&#39;s for any virtual guests to add to the pool cloudsToRemove = [{&amp;quot;id&amp;quot;: 987654 }] # ID&#39;s for any virtual guests to remove from the pool pool_id = &#39;11111111&#39; # Bandwidth Pool ID adjustpool = client[&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;].</description>
    </item>
    
    <item>
      <title>Get storage credentials for Block Storage</title>
      <link>https://softlayer.github.io/python/getstoragedetails/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/getstoragedetails/</guid>
      <description>The following script allows you retrieve the username and password for Performance/Endurance Block storage if you have authorized hosts against the storage.
&amp;quot;&amp;quot;&amp;quot; Get credentials for a authorized hosts of a SoftLayer_Network_Storage_Iscsi Important manual pages http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi &amp;quot;&amp;quot;&amp;quot; import SoftLayer import json iscsiStorageId = 1234567 client = SoftLayer.create_client_from_env() networkStorageIscsiService = client[&#39;SoftLayer_Network_Storage_Iscsi&#39;] objectMask = &#39;mask[allowedHardware[allowedHost[credential]],allowedVirtualGuests[allowedHost[credential]]]&#39; try: iscsiStorage = networkStorageIscsiService.getObject(mask=objectMask, id=iscsiStorageId) print(json.dumps(iscsiStorage, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;))) except SoftLayer.SoftLayerAPIError as e: print(&amp;quot;Unable to retrieve the Network Storage Iscsi.</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://softlayer.github.io/python/location_based_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/location_based_pricing/</guid>
      <description>With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based SoftLayer_Product_Item_Price objects via the API. In the following example we will query for the Dallas 6 data center, and then filter our item (Local Load Balancer) and prices to include only the location-based pricing for the specific data center we&amp;rsquo;re in â€”or we can filter for the standard price if a location-based price doesn&amp;rsquo;t exist.</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>https://softlayer.github.io/python/standard_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/standard_pricing/</guid>
      <description>With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based SoftLayer_Product_Item_Price objects via the API. The following example shows how to get the Standard priceItemId for a package regardless of the location.
import SoftLayer import json object_filter = { &#39;items&#39;: { &#39;prices&#39;: { &#39;locationGroupId&#39;: { &#39;operation&#39;: &#39;is null&#39; } } } } client = SoftLayer.</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>https://softlayer.github.io/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/upgrade_examples/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() &amp;quot;&amp;quot;&amp;quot; Prints out what can be upgraded on a server by category. &amp;quot;&amp;quot;&amp;quot; def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;): result = self.client[service].getUpgradeItemPrices(id=hardware_id) last_id = 0 for item in result: now_id = item[&#39;categories&#39;][0][&#39;id&#39;] if now_id != last_id: print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;])) last_id = now_id print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;])) &amp;quot;&amp;quot;&amp;quot; Get the available maintenance windows that exist for a server.</description>
    </item>
    
    <item>
      <title>Backup and Restore firewall rules</title>
      <link>https://softlayer.github.io/python/manage_firewall_rules/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/manage_firewall_rules/</guid>
      <description>restoreRules here will clobber any existing rules on the firewall, so be careful with that.
 import SoftLayer from SoftLayer.CLI import firewall from pprint import pprint as pp import json from argparse import ArgumentParser class ruleSaver(): def __init__(self, path, fw): self.client = SoftLayer.Client() self.fw = SoftLayer.FirewallManager(self.client) self.path = path self.fw_type, self.fw_id = firewall.parse_id(fw) def saveRules(self): if self.fw_type == &#39;vlan&#39;: rules = self.fw.get_dedicated_fwl_rules(self.fw_id) else: rules = self.fw.get_standard_fwl_rules(self.fw_id) with open(self.path, &#39;w&#39;) as f: json.</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>https://softlayer.github.io/python/attach_disk/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/attach_disk/</guid>
      <description>Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.
Running this on a disk that is already attached will move the disk to the new guest.</description>
    </item>
    
    <item>
      <title>Update Firmware on a Bare Metal Server</title>
      <link>https://softlayer.github.io/python/update_firmware/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/update_firmware/</guid>
      <description>In the following example we are updating the firmware for the IPMI, BIOS, Hard Drives, and Raid Controller on our Bare Metal Server with ID 12345. We can toggle the specific items we want updated by setting the values to False (Do not update firmware) or True (Do update firmware).
import SoftLayer client = SoftLayer.Client() mgr = SoftLayer.HardwareManager(client) result = mgr.update_firmware(hardware_id=12345,ipmi=True,raid_controller=True,bios=True,hard_drive=True)  </description>
    </item>
    
    <item>
      <title>Manage Users</title>
      <link>https://softlayer.github.io/python/manageUsers/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/manageUsers/</guid>
      <description>Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.
import SoftLayer.API from pprint import pprint as pp def create_user(username, password): user_template = { &#39;username&#39;: username, &#39;firstName&#39;: &#39;API&#39;, &#39;lastName&#39;: &#39;Learner&#39;, &#39;email&#39;: &#39;someone@somewhere.com&#39;, &#39;companyName&#39;: &#39;IBM&#39;, &#39;address1&#39;: &#39;123 api road&#39;, &#39;city&#39;: &#39;Houston&#39;, &#39;country&#39;: &#39;US&#39;, &#39;postalCode&#39;: &#39;TX 77002&#39;, &#39;userStatusId&#39;: 1001, &#39;timezoneId&#39;: 107 } created_user = client[&#39;User_Customer&#39;].createObject( user_template, password, password) return created_user def get_permissions(_id): permissions = client[&#39;User_Customer&#39;].</description>
    </item>
    
    <item>
      <title>Get Notifications</title>
      <link>https://softlayer.github.io/python/notifications/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/notifications/</guid>
      <description>Retrieves all notifications that were created on January 1, 2016.
import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): theDate = &#39;01/01/2016 01:00:00&#39; _filter = { &#39;startDate&#39;: { &#39;operation&#39;: &#39;greaterThanDate&#39;, &#39;options&#39;: [ {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]} ] } } result = self.client[&#39;SoftLayer_Notification_Occurrence_Event&#39;].getAllObjects(filter=_filter) pp(result) if __name__ == &amp;quot;__main__&amp;quot;: main = example() main.main()  </description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/ticket_filter/</guid>
      <description>import SoftLayer from pprint import pprint as pp import logging class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): # logger = logging.getLogger() # logger.addHandler(logging.StreamHandler()) # logger.setLevel(3) theDate = &amp;quot;02/25/2016 01:00:00&amp;quot; endDate = &amp;quot;02/29/2016 01:00:00&amp;quot; mask = &amp;quot;mask[updates,group[name]]&amp;quot; theFilter1 = { &#39;tickets&#39;: { &#39;createDate&#39;: { &#39;operation&#39;: &#39;betweenDate&#39;, &#39;options&#39;: [ {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [theDate]}, {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]} ] } } } theFilter2 = { &#39;tickets&#39;: { &#39;createDate&#39;: { &#39;operation&#39;: &#39;greaterThanDate&#39;, &#39;options&#39;: [ {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]} ] }, &#39;group&#39; : { &#39;name&#39;: { &#39;operation&#39;: &#39;Cancellations&#39; } } } } result = self.</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>https://softlayer.github.io/python/cancel_service/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/cancel_service/</guid>
      <description>In the following example we are retrieving the Billing Item of a Virtual Guest with the ID of 12345678 and passing that ID to cancelService.
import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() mask = &amp;quot;mask[id]&amp;quot; billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=12345678) cancelItem = client[&#39;SoftLayer_Billing_Item&#39;].cancelService(id = billingId[&#39;id&#39;])  </description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/python/nextinvoice/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/nextinvoice/</guid>
      <description>import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() nextInvoiceAmount = client[&#39;SoftLayer_Account&#39;].getNextInvoiceTotalAmount() pp(nextInvoiceAmount)  </description>
    </item>
    
    <item>
      <title>Find a billing item from a provisioned product</title>
      <link>https://softlayer.github.io/python/getbillingitem/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/getbillingitem/</guid>
      <description>In the following example we are looking for the Billing Item of an Virtual Guest with an ID of 1234567.
import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() mask = &amp;quot;mask[id]&amp;quot; billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567) pp(billingId)  </description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>https://softlayer.github.io/python/monthtodate/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/monthtodate/</guid>
      <description>import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() mask = &amp;quot;mask[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]&amp;quot; toDateCost = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567) pp(toDateCost)  Example Response
{&#39;createDate&#39;: &#39;2016-02-05T14:07:37-06:00&#39;, &#39;currentHourlyCharge&#39;: &#39;.023&#39;, &#39;hourlyRecurringFee&#39;: &#39;.023&#39;, &#39;hoursUsed&#39;: &#39;1&#39;}  </description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/reload_hardware/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): &amp;quot;&amp;quot;&amp;quot; Will reload the operating system with a new imageTemplate, along with a set of sshKeys. This will erease all data. &amp;quot;&amp;quot;&amp;quot; # Change these IDs imageId = 1234567 sshKey1 = 123 sshKey2 = 456 serverId = 102938 config = { &#39;imageTemplateId&#39;: imageId, &#39;sshKeyIds&#39;: [sshKey1, sshKey2] } output = self.client[&#39;Hardware_Server&#39;].reloadOperatingSystem(&#39;FORCE&#39;, config, id=serverId) pp(config) print &amp;quot;RESULT\n&amp;quot; pp(output) if __name__ == &amp;quot;__main__&amp;quot;: main = example() main.</description>
    </item>
    
    <item>
      <title>Modify the configuration for a Bare Metal Server.</title>
      <link>https://softlayer.github.io/python/modify_bare_metal/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/modify_bare_metal/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; Upgrades a server. Important manual pages http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/getUpgradeItemPrices http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Property http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Hardware_Server_Upgrade License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer.API import json def getServer(serverIp, hardwareService): &amp;quot;&amp;quot;&amp;quot;Get the server. :param string serverIp: The Ip address of the server. :param SoftLayer_Hardware_Server hardwareService: the SoftLayer_Hardware_Server service. :returns: A SoftLayer_Hardware_Server object. &amp;quot;&amp;quot;&amp;quot; try: objectMask = &amp;quot;mask[id]&amp;quot; server = hardwareService.findByIpAddress(serverIp, mask=objectMask) if not server: print(&amp;quot;There is no a server with the IP address: &amp;quot; + serverIp) exit(1) except SoftLayer.</description>
    </item>
    
    <item>
      <title>Required the available servers to order</title>
      <link>https://softlayer.github.io/python/list_available_servers_to_order/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/list_available_servers_to_order/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; List all the vailable servers to order. Important manual pages: http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package_Server/getAllObjects http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Package_Server/ http://sldn.softlayer.com/article/Object-Filters License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer import json client = SoftLayer.Client() packageService = client[&#39;SoftLayer_Product_Package_Server&#39;] objectFilter = { &amp;quot;packageType&amp;quot;: { &amp;quot;operation&amp;quot;: &amp;quot;in&amp;quot;, &amp;quot;options&amp;quot;: [{ &amp;quot;name&amp;quot;: &amp;quot;data&amp;quot;, &amp;quot;value&amp;quot;: [ &amp;quot;BARE_METAL_CORE&amp;quot;, &amp;quot;BARE_METAL_CPU&amp;quot;, &amp;quot;BARE_METAL_CPU_FAST_PROVISION&amp;quot; ] }] } } try: servers = packageService.getAllObjects(filter=objectFilter) print(json.dumps(servers, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;))) except SoftLayer.SoftLayerAPIError as e: print(&amp;quot;Unable to list the servers to order.</description>
    </item>
    
    <item>
      <title>Edit IP address note</title>
      <link>https://softlayer.github.io/python/edit_ip_note/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/edit_ip_note/</guid>
      <description>import SoftLayer class example(): def __init__(self): self.client = SoftLayer.Client() def getSubnets(self): subnets = self.client[&#39;SoftLayer_Account&#39;].getSubnets() for subnet in subnets: print(&amp;quot;%s - %s/%s - %s&amp;quot; % ( subnet[&#39;id&#39;], subnet[&#39;gateway&#39;], subnet[&#39;cidr&#39;], subnet[&#39;networkVlanId&#39;] ) ) def getIpInSubnet(self, subnet_id): mask = &amp;quot;mask[virtualGuest,hardware]&amp;quot; subnet = self.client[&#39;SoftLayer_Network_Subnet&#39;] ips = subnet.getIpAddresses(id=subnet_id,mask=mask) for ip in ips: status = &amp;quot;Free&amp;quot; if ip[&#39;subnet&#39;][&#39;subnetType&#39;] == &amp;quot;PRIMARY&amp;quot;: status = &amp;quot;Reserved&amp;quot; elif ip[&#39;isNetwork&#39;]: status = &amp;quot;Network Ip&amp;quot; elif ip[&#39;isGateway&#39;]: status = &amp;quot;Gateway Ip&amp;quot; try: status = ip[&#39;virtualGuest&#39;][&#39;fullyQualifiedDomainName&#39;] except KeyError: pass try: status = ip[&#39;hardware&#39;][&#39;fullyQualifiedDomainName&#39;] except KeyError: pass try: note = ip[&#39;note&#39;] except KeyError: note = &amp;quot;none&amp;quot; print(&amp;quot;%s: %s - %s - %s&amp;quot; % (ip[&#39;id&#39;],ip[&#39;ipAddress&#39;],status, note)) def editNote(self, ip_id, note): &amp;quot;&amp;quot;&amp;quot; With editObject on SoftLayer_Network_Subnet_IpAddress you can only edit the note, everything else will get ignored silently.</description>
    </item>
    
    <item>
      <title>Place block storage (performance ISCSI) order</title>
      <link>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; Order a block storage (performance ISCSI). Important manual pages: http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItems http://sldn.softlayer.com/reference/services/SoftLayer_Location http://sldn.softlayer.com/reference/services/SoftLayer_Location/getDatacenters http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type/getAllObjects http://sldn.softlayer.com/reference/datatypes/SoftLayer_Location http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Storage_Enterprise http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price http://sldn.softlayer.com/blog/cmporter/Location-based-Pricing-and-You http://sldn.softlayer.com/blog/bpotter/Going-Further-SoftLayer-API-Python-Client-Part-3 http://sldn.softlayer.com/article/Object-Filters http://sldn.softlayer.com/article/Python http://sldn.softlayer.com/article/Object-Masks License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer import json # Values &amp;quot;AMS01&amp;quot;, &amp;quot;AMS03&amp;quot;, &amp;quot;CHE01&amp;quot;, &amp;quot;DAL05&amp;quot;, &amp;quot;DAL06&amp;quot; &amp;quot;FRA02&amp;quot;, &amp;quot;HKG02&amp;quot;, &amp;quot;LON02&amp;quot;, etc. location = &amp;quot;AMS01&amp;quot; # Values &amp;quot;20&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;80&amp;quot;, &amp;quot;100&amp;quot;, etc. storageSize = &amp;quot;40&amp;quot; # Values between &amp;quot;100&amp;quot; and &amp;quot;6000&amp;quot; by intervals of 100.</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://softlayer.github.io/python/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderSSLCert/</guid>
      <description>Generating a CSR You will need a csr to make this request, it should be on your local file system.
The contents of the CSR MATTER, they need to match the information for what you are ordering. + orderApproverEmailAddress must match the Email Address of the CSR + The CSR Common name must be set and must be a part of the orderApproverEmailAddress
$ openssl genrsa -out domain.key 2048 $ openssl req -new -sha256 -key domain.</description>
    </item>
    
    <item>
      <title>getCustomGraphData</title>
      <link>https://softlayer.github.io/python/tracking_objects/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/tracking_objects/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self, tracking_id): tracking_service = self.client[&#39;SoftLayer_Metric_Tracking_Object&#39;] bw_result = tracking_service.getBandwidthData(&#39;2015-10-01&#39;, &#39;2015-11-31&#39;, &#39;public&#39;, 600, id=tracking_id) object_type = [{&#39;keyName&#39;:&#39;PUBLICIN&#39;,&#39;summaryType&#39;:&#39;counter&#39;,&#39;name&#39;:&#39;vif_1_rx&#39;}] summary_result = tracking_service.getSummaryData(&#39;2015-11-01&#39;,&#39;2015-11-02&#39;, object_type, 600, id=tracking_id) args = { &#39;startDateTime&#39; : &#39;2015-11-01&#39;, &#39;endDateTime&#39;:&#39;2015-11-02&#39;, &#39;metrics&#39;: [{&#39;keyName&#39;:&#39;PUBLICIN&#39;,&#39;summaryType&#39;:&#39;counter&#39;,&#39;name&#39;:&#39;vif_1_rx&#39;}], &#39;interval&#39;:600, &#39;returnImage&#39;: False } custom_result = tracking_service.getCustomGraphData(args,id=tracking_id) pp(custom_result) # For use with a virtual Guest, just change # SoftLayer_Hardware_Server here with SoftLayer_Virtual_Guest def getTrackingId(self, server_id): tracking_id = self.</description>
    </item>
    
    <item>
      <title>Set user permissions</title>
      <link>https://softlayer.github.io/python/set_permission/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/set_permission/</guid>
      <description>import SoftLayer from pprint import pprint as pp class setPermissions(): def __init__(self): self.client = SoftLayer.Client() def main(self, user_id): permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id) print(&amp;quot;=== OLD PERMISSIONS ===&amp;quot;) self.printPermissions(permissions) setperm = {&#39;keyName&#39;: &amp;quot;TICKET_ADD&amp;quot;} self.client[&#39;User_Customer&#39;].addPortalPermission(setperm, id=user_id) permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id) print(&amp;quot;=== NEW PERMISSIONS ===&amp;quot;) self.printPermissions(permissions) def getUsers(self): users = self.client[&#39;Account&#39;].getUsers() print(&amp;quot;ID - USERNAME - E-MAIL&amp;quot;) for user in users: print(&amp;quot;%s - %s - %s &amp;quot; % (user[&#39;id&#39;], user[&#39;username&#39;], user[&#39;email&#39;])) def printPermissions(sefl, permissions): for permission in permissions: print(&amp;quot;%s&amp;quot; % permission[&#39;keyName&#39;]) if __name__ == &amp;quot;__main__&amp;quot;: main = setPermissions() # CHANGE ME my_user = 439723 main.</description>
    </item>
    
    <item>
      <title>List Packages</title>
      <link>https://softlayer.github.io/python/list_packages/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/list_packages/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): &amp;quot;&amp;quot;&amp;quot; Gets ALL packages, and prints their name and price descriptions &amp;quot;&amp;quot;&amp;quot; mask = &amp;quot;mask[hourlyBillingAvailableFlag]&amp;quot; result = self.client[&#39;Product_Package&#39;].getAllObjects(); for product in result: print str(product[&#39;id&#39;]) + &amp;quot; - &amp;quot; + product[&#39;name&#39;] # result has a LOT of stuff in it, only print it out if you are ready # pp.pprint(result) def getPackage(self, package_id=0): &amp;quot;&amp;quot;&amp;quot; Gets a specific package and prints out some useful information &amp;quot;&amp;quot;&amp;quot; mask = &amp;quot;mask[items[prices]]&amp;quot; # Not all packages are available in all locations, you can check that with getLocations() # locations = self.</description>
    </item>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>https://softlayer.github.io/python/create_vsi_options/</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/create_vsi_options/</guid>
      <description>&#39;&#39;&#39; An example of how to create a VSI from the SL python library &#39;&#39;&#39; from __future__ import print_function import SoftLayer from SoftLayer.managers.vs import VSManager def create_vsi(): #Create a client to the SoftLayer_Account API service. #Note: currently set without the user ID and API key since #it will by default use the values set in the CLI #to use other values use SoftLayer.Client(sl_username, sl_api_key) client = SoftLayer.Client() vsi_mgr = VSManager(client) # uncomment to display create options # print(vsi_mgr.</description>
    </item>
    
    <item>
      <title>Find active VMs by creator</title>
      <link>https://softlayer.github.io/python/find_my_vms/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/find_my_vms/</guid>
      <description>&#39;&#39;&#39; Code example of how to list virtual instances from a SoftLayer account You can call the script from the command and provide the user ID you want to check. The script expects that you have the SoftLayer CLI installed and have it configured with the credentials you&#39;d like to use with SoftLayer. You can run the script with the user ID you&#39;d like to check under the account you have configured: find_my_active_vms userid The output of the script is in a csv format with tabs as the column separator.</description>
    </item>
    
    <item>
      <title>Server Bandwidth</title>
      <link>https://softlayer.github.io/python/get_bandwidth_data/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/get_bandwidth_data/</guid>
      <description>import SoftLayer import pprint class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): pp = pprint.PrettyPrinter(indent=2) theMask = &amp;quot;mask[inboundPrivateBandwidthUsage,inboundPublicBandwidthUsage,outboundPrivateBandwidthUsage,outboundPublicBandwidthUsage]&amp;quot; result = self.client[&#39;SoftLayer_Account&#39;].getHardware() print &amp;quot;server_name,public_in,public_out,private_in,private_out&amp;quot; for server in result: #getHardware() only returns SoftLayer_Hardware, which doesn&#39;t have the private bw usage metrics, for some reason. # So we just use SoftLayer_Hardware_Server here, which has more detailed information serverInfo = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=server[&#39;id&#39;],mask=theMask) # use .get() to avoid exceptions pubin = serverInfo.get(&#39;inboundPublicBandwidthUsage&#39;, &#39;--&#39;) pubout = serverInfo.</description>
    </item>
    
    <item>
      <title>Password Auth</title>
      <link>https://softlayer.github.io/python/token_auth/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/token_auth/</guid>
      <description>import SoftLayer client = SoftLayer.Client() client.authenticate_with_password(&amp;quot;username&amp;quot;, &amp;quot;password&amp;quot;) print client.call(&#39;Account&#39;, &#39;getCurrentUser&#39;, mask=&#39;id,apiAuthenticationKeys&#39;)  </description>
    </item>
    
    <item>
      <title>Change Passwords</title>
      <link>https://softlayer.github.io/python/change_multi_pass/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/change_multi_pass/</guid>
      <description>import SoftLayer import pprint class example(): def __init__(self): self.client = SoftLayer.Client() self.prefix = &amp;quot;PREFIX&amp;quot; self.password= &amp;quot;qweASDzxc!23&amp;quot; def main(self): pp = pprint.PrettyPrinter(indent=4) users = self.get_target_users(prefix=self.prefix) for user in users: print &amp;quot;Changing password for: &amp;quot; + str(user[&#39;id&#39;]) + &amp;quot; &amp;quot; + user[&#39;username&#39;] result = self.client[&#39;User_Customer&#39;].updatePassword(self.password, id=user[&#39;id&#39;]) # pp.pprint(result) def get_target_users(self, prefix): _filter = { &#39;users&#39;: { &#39;username&#39;: { &#39;operation&#39;: &#39;*= %s&#39; % (prefix) } } } _mask = &amp;quot;mask[id,username]&amp;quot; _users = self.client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask) return _users if __name__ == &amp;quot;__main__&amp;quot;: main = example() main.</description>
    </item>
    
    <item>
      <title>Set a server&#39;s metadata</title>
      <link>https://softlayer.github.io/python/set_user_metadata/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/set_user_metadata/</guid>
      <description>import SoftLayer from pprint import pprint as pp # CHANGE ME server = 678243 client = SoftLayer.Client() mask = &amp;quot;mask[attributes]&amp;quot; # Sets the metadata for this server to tttttt result1 = client[&#39;SoftLayer_Hardware_Server&#39;].setUserMetadata({&#39;value&#39;: &#39;tttttt&#39;},id=server) pp(result1) result2 = client[&#39;SoftLayer_Hardware_Server&#39;].getObject(mask=mask,id=server) pp(result2)  </description>
    </item>
    
    <item>
      <title>List Instances</title>
      <link>https://softlayer.github.io/python/list_instances/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/list_instances/</guid>
      <description>import SoftLayer import pprint class example(): def __init__(self): self.client = SoftLayer.Client() self.mgr = SoftLayer.VSManager(self.client) def main(self): &amp;quot;&amp;quot;&amp;quot; &amp;quot;&amp;quot;&amp;quot; pp = pprint.PrettyPrinter(indent=4) result = self.mgr.list_instances() pp.pprint(result) if __name__ == &amp;quot;__main__&amp;quot;: main = example() main.main()  </description>
    </item>
    
    <item>
      <title>Create a virtual server from an existing image template</title>
      <link>https://softlayer.github.io/python/create_server_from_template/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/create_server_from_template/</guid>
      <description>getPrivateBlockDeviceTemplateGroups will return a list of all the templates that you have created on your account. Use this method to find the id of the template you want to create a server from.
import SoftLayer from pprint import pprint as pp templateId = 12345 client = SoftLayer.Client() mask = &amp;quot;mask[id,name,note]&amp;quot; imageTemplates = client[&#39;SoftLayer_Account&#39;].getPrivateBlockDeviceTemplateGroups(mask=mask) print(&amp;quot;ID - Name - Note&amp;quot;) for template in imageTemplates: try: print(&amp;quot;%s - %s - %s&amp;quot; % (template[&#39;id&#39;], template[&#39;name&#39;], template[&#39;note&#39;])) except KeyError: print(&amp;quot;%s - %s - %s&amp;quot; % (template[&#39;id&#39;], template[&#39;name&#39;], &#39;None&#39;)) order = { &#39;complexType&#39;: &#39;SoftLayer_Container_Product_Order_Virtual_Guest&#39;, &#39;quantity&#39;: 1, &#39;virtualGuests&#39;: [ {&#39;hostname&#39;: &#39;test-template&#39;, &#39;domain&#39;: &#39;example.</description>
    </item>
    
    <item>
      <title>Create child SoftLayer Account</title>
      <link>https://softlayer.github.io/python/create_account/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/create_account/</guid>
      <description>import SoftLayer from pprint import pprint as pp import json import SoftLayer.API # DIST MASTER ACCOUNT API INFORMATION (NOT SUB-BRAND) username = &amp;quot;CHANGE_ME&amp;quot; #change me apiKey = &amp;quot;CHANGE_ME&amp;quot; #change me # Brand ID of the Sub-brand to create the account under, NOT the top level distributor brand. # Very important to set this correctly, as it determines the location of the account # Will currently be a five digit number (the ID of of the parent brand, not the parent account) brandId = 0 #change me companyname = &amp;quot;&amp;quot; #change me firstname = &amp;quot;&amp;quot; #change me lastname = &amp;quot;&amp;quot; #change me address = &amp;quot;&amp;quot; #change me city = &amp;quot;&amp;quot; #change me state = &amp;quot;&amp;quot; #change me country = &amp;quot;&amp;quot; #change me -- two letter ISO code zipcode = &amp;quot;&amp;quot; #change me phone = &amp;quot;&amp;quot; #change me email = &amp;quot;&amp;quot; #change me cust_account = { &amp;quot;brandId&amp;quot;: brandId, &amp;quot;companyName&amp;quot;: companyname, &amp;quot;firstName&amp;quot;: firstname, &amp;quot;lastName&amp;quot;: lastname, &amp;quot;address1&amp;quot;: address, &amp;quot;postalCode&amp;quot;: zipcode, &amp;quot;city&amp;quot;: city, &amp;quot;state&amp;quot;: state, &amp;quot;country&amp;quot;: country, &amp;quot;officePhone&amp;quot;: phone, &amp;quot;email&amp;quot;: email, &amp;quot;lateFeeProtectionFlag&amp;quot;: True, &amp;quot;claimedTaxExemptTxFlag&amp;quot;: False, &amp;quot;allowedPptpVpnQuantity&amp;quot;: 1, &amp;quot;isReseller&amp;quot;: 0, &amp;quot;accountStatusId&amp;quot;: 1001 # 1001 = Active Account } print(&amp;quot;\n&amp;quot;) pp(cust_account) print(&amp;quot;\n&amp;quot;) null = raw_input(&amp;quot;Press Enter to create this brand in production.</description>
    </item>
    
    <item>
      <title>Get IPMI info for BMS</title>
      <link>https://softlayer.github.io/python/get_ipmi/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/get_ipmi/</guid>
      <description>import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() mask = &amp;quot;&amp;quot;&amp;quot;mask[networkManagementIpAddress,remoteManagementAccounts[username,password],id,fullyQualifiedDomainName]&amp;quot;&amp;quot;&amp;quot; result = client[&#39;SoftLayer_Account&#39;].getHardware(mask=mask) pp(result)  </description>
    </item>
    
    <item>
      <title>Required price IDs for package</title>
      <link>https://softlayer.github.io/python/get_required_price_id/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/get_required_price_id/</guid>
      <description>import SoftLayer package = 46 client = SoftLayer.Client() categoryObjectMask = &amp;quot;mask[isRequired, itemCategory[id, name]]&amp;quot; configurations = client[&#39;Product_Package&#39;].getConfiguration( id=package, mask=categoryObjectMask) pricesObjectMask = &amp;quot;mask[id;item.description;categories.id]&amp;quot; prices = client[&#39;Product_Package&#39;].getItemPrices( id=package, mask=pricesObjectMask) headerFormat = &#39;%s - %s:&#39; priceFormat = &#39; %s -- %s&#39; for configuration in configurations: if (not configuration[&#39;isRequired&#39;]): continue print headerFormat % (configuration[&#39;itemCategory&#39;][&#39;name&#39;], configuration[&#39;itemCategory&#39;][&#39;id&#39;]) for price in prices: if (&#39;categories&#39; not in price): continue if any((category.get(&#39;id&#39;) == configuration[&#39;itemCategory&#39;][&#39;id&#39;] for category in price[&#39;categories&#39;])): print priceFormat % (price[&#39;id&#39;], price[&#39;item&#39;][&#39;description&#39;])  </description>
    </item>
    
    <item>
      <title>Place quote order</title>
      <link>https://softlayer.github.io/python/order_quote/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/order_quote/</guid>
      <description>import SoftLayer from pprint import pprint as pp quote_id = 12345 client = SoftLayer.Client() def getOrderContainer(quote_id): container = client[&#39;Billing_Order_Quote&#39;].getRecalculatedOrderContainer(id=quote_id) return container[&#39;orderContainers&#39;][0] def getQuotes(): quotes = client[&#39;SoftLayer_Account&#39;].getActiveQuotes() pp(quotes) getQuotes() guests = {&#39;hostname&#39;: &#39;quotetest&#39;, &#39;domain&#39;: &#39;example.com&#39;} container = getOrderContainer(quote_id) container[&#39;quantity&#39;] = 1 container[&#39;virtualGuests&#39;] = [] # You will need to add a hostname and domain entry for each server on the order # if quantity was 5, you would need to add 5 guests here container[&#39;virtualGuests&#39;].</description>
    </item>
    
  </channel>
</rss>
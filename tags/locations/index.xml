<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Locations on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/locations/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 23 Jun 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Router Model Map</title>
      <link>https://softlayer.github.io/python/networkmapper/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/networkmapper/</guid>
      <description>&lt;p&gt;Prints out model numbers of networking equipment that is on route to your servers. Could be useful if merged with &lt;a href=&#34;https://softlayer.github.io/python/networktopology/&#34;&gt;https://softlayer.github.io/python/networktopology/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Finds the model number of all networking equipment that is on the way to servers on the account.
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

class networkMap():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Goes through each server, and prints out what networking hardware is upstream
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[id, fullyQualifiedDomainName]&amp;quot; 
        servers = self.client[&#39;SoftLayer_Account&#39;].getHardware(mask=mask)
        for server in servers:
            print(&amp;quot;%s&amp;quot; % (server[&#39;fullyQualifiedDomainName&#39;]))
            server_mask = &amp;quot;mask[backendNetworkComponents[networkHardware[hardwareChassis]]]&amp;quot; 
            this_server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=server[&#39;id&#39;],mask=server_mask)
            for component in this_server[&#39;backendNetworkComponents&#39;]:
                print(&amp;quot;\t%s%s (%smbps) &amp;quot; % (component[&#39;name&#39;], component[&#39;port&#39;], component[&#39;speed&#39;]))
                for uplink in component[&#39;networkHardware&#39;]:
                    print(&amp;quot;\t\t%s - %s - %s&amp;quot; % (uplink[&#39;fullyQualifiedDomainName&#39;], uplink[&#39;hardwareChassis&#39;][&#39;name&#39;], uplink[&#39;hardwareChassis&#39;][&#39;hardwareFunction&#39;][&#39;description&#39;]))


    def fromTheTop(self):
        &amp;quot;&amp;quot;&amp;quot;
        Goes through each DC, and prints out the hierarchy of networking gear
        &amp;quot;&amp;quot;&amp;quot;
        dc_mask=&amp;quot;mask[backendHardwareRouters]&amp;quot;
        dcs = self.client[&#39;SoftLayer_Location_Datacenter&#39;].getDatacenters()

        for dc in dcs:
            print(&amp;quot;%s&amp;quot; % (dc[&#39;name&#39;]))
            router_mask = &amp;quot;mask[hardwareChassis,downlinkHardware[hardwareChassis,downlinkHardware[hardwareChassis,downstreamServers[id,fullyQualifiedDomainName],id,fullyQualifiedDomainName]]]&amp;quot;
            backend = self.client[&#39;SoftLayer_Location_Datacenter&#39;].getBackendHardwareRouters(id=dc[&#39;id&#39;],mask=router_mask)
            for router in backend:
                print(&amp;quot;\t%s - %s - %s &amp;quot; % (router[&#39;hardwareFunction&#39;][&#39;description&#39;], router[&#39;fullyQualifiedDomainName&#39;], router[&#39;hardwareChassis&#39;][&#39;name&#39;]))
                # Can be used to print out info on the linecards of the BCR/FCR
                # for component in router[&#39;components&#39;]:
                    # print(&amp;quot;\t\t%s&amp;quot; % (component[&#39;hardwareComponentModel&#39;][&#39;longDescription&#39;]))
                try:
                    for down in router[&#39;downlinkHardware&#39;]:
                        print(&amp;quot;\t\t%s - %s &amp;quot; % (down[&#39;fullyQualifiedDomainName&#39;],down[&#39;hardwareChassis&#39;][&#39;name&#39;]))
                        for down_1 in down[&#39;downlinkHardware&#39;]:
                            print(&amp;quot;\t\t\t%s - %s &amp;quot; % (down_1[&#39;fullyQualifiedDomainName&#39;],down_1[&#39;hardwareChassis&#39;][&#39;name&#39;]))
                            for server in down_1[&#39;downstreamServers&#39;]:
                                print(&amp;quot;\t\t\t\t%s&amp;quot; % server[&#39;fullyQualifiedDomainName&#39;])
                except KeyError:
                    print(&amp;quot;Skipping....&amp;quot;)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = networkMap()
    # main.main()
    main.fromTheTop()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Packages</title>
      <link>https://softlayer.github.io/ruby/list_packages/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/list_packages/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Helper function to fetch through all results from SoftLayer api
# using small page sizes and sleeping before every new page fetch.
def fetch_all(service, method)
  records = []; offset = 0; limit = 10
  loop do
    results = service.result_limit(offset, limit).send(method)
    records += results
    break if results.size &amp;lt; limit
    offset += limit
    sleep 3
  end
  records
end

# Credentials to the SoftLayer API are grabbed from the config file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new
package_service = client[&#39;Product_Package&#39;]

# Show all packages
mask = &#39;mask[id,name,description,itemPrices]&#39;
all_packages = fetch_all(package_service.object_mask(mask), :getAllObjects)

all_packages.each do |package|
  puts &amp;quot;#{package[&#39;id&#39;]} - #{package[&#39;name&#39;]}&amp;quot;
  package[&#39;itemPrices&#39;].each do |price|
    puts &amp;quot;#{price[&#39;id&#39;]} - #{price[&#39;item&#39;][&#39;description&#39;]}&amp;quot;
  end
end

PACKAGE_ID = 126
mask = &#39;mask[id,name,description,items[id,description,keyName,prices[id,locationGroupId]]]&#39;
product_package = package_service.object_mask(mask).object_with_id(PACKAGE_ID).getObject

# Get locations in which package is available
puts &#39;PACKAGE LOCATIONS&#39;
pp package_service.object_with_id(PACKAGE_ID).getLocations

# Show a specific product&#39;s items with prices
product_package[&#39;items&#39;].each do |item|
  puts &amp;quot;#{item[&#39;id&#39;]} - #{item[&#39;description&#39;]} - #{item[&#39;keyName&#39;]}&amp;quot;
  item[&#39;prices&#39;].each do |price|
    puts &amp;quot;\t#{price[&#39;id&#39;]} - locationGroupId: #{price[&#39;locationGroupId&#39;]}&amp;quot;
  end
end

# Will only get the server items for this package
# puts &#39;SERVER ITEMS&#39;
# pp package_service.object_with_id(PACKAGE_ID).getActiveServerItems

# Will only get the RAM items for the package
# puts &#39;RAM ITEMS&#39;
# pp package_service.object_with_id(PACKAGE_ID).getActiveRamItems

# Get all locations
mask = &#39;mask[id,locations[id,name]]&#39;
puts &#39;ALL LOCATIONS&#39;
pp client[&#39;Location_Group_Pricing&#39;].object_mask(mask).getAllObjects
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Packages</title>
      <link>https://softlayer.github.io/python/list_packages/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/list_packages/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()
      
    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Gets ALL packages, and prints their name and price descriptions
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[hourlyBillingAvailableFlag]&amp;quot;
        result = self.client[&#39;Product_Package&#39;].getAllObjects();
        for product in result:
            print str(product[&#39;id&#39;]) + &amp;quot; - &amp;quot; + product[&#39;name&#39;]
        # result has a LOT of stuff in it, only print it out if you are ready
        # pp.pprint(result)

    def getPackage(self, package_id=0):
        &amp;quot;&amp;quot;&amp;quot;
        Gets a specific package and prints out some useful information
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[items[prices]]&amp;quot;

        # Not all packages are available in all locations, you can check that with getLocations()
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        # pp(locations)

        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)

        for item in result[&#39;items&#39;]:
            print str(item[&#39;id&#39;]) + &amp;quot; - &amp;quot; + item[&#39;description&#39;] + &amp;quot; --- &amp;quot; + item[&#39;keyName&#39;]
            for prices in item[&#39;prices&#39;]:
                print &amp;quot;\t&amp;quot; + str(prices[&#39;id&#39;]) + &amp;quot; - locationGroupId: &amp;quot; + str(prices[&#39;locationGroupId&#39;]) 

        # Will only get the server items for this package
        # serverItems = self.client[&#39;Product_Package&#39;].getActiveServerItems(id=package_id)
        # print &amp;quot;SERVER ITEMS&amp;quot;
        # pp(serverItems)

        # Will only get the RAM items for the package
        # ramItems = self.client[&#39;Product_Package&#39;].getActiveRamItems(id=package_id)
        # print &amp;quot;RAM ITEMS&amp;quot;
        # pp(ramItems)

     
    
    def getAllLocations(self):
        mask = &amp;quot;mask[id,locations[id,name]]&amp;quot;
        result = self.client[&#39;SoftLayer_Location_Group_Pricing&#39;].getAllObjects(mask=mask);
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
    main.getPackage(126)
    main.getAllLocations()  

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
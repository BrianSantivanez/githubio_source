<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objectfilter on SoftLayer API</title>
    <link>https://softlayer.github.io/tags/objectfilter/</link>
    <description>Recent content in Objectfilter on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/tags/objectfilter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spare Pool Servers</title>
      <link>https://softlayer.github.io/rest/spare_pool/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/rest/spare_pool/</guid>
      <description>Operation: GET
Method: SoftLayer_Hardware_Server::sparepool()
Example CURL:
curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparepool/add curl -su userid:api_key &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparePool/activate&amp;quot;  Will return True if the action was successful, or throw an exception otherwise
Exceptions:
This server (hostname.domain.name) is not in a status that allows it to be added to spare pool. This server (hostname.domain.name) is not in a status that allows it to be removed from spare pool.  The server is likely already in a spare pool.</description>
    </item>
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderBareMetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.
 Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    
    <item>
      <title>Show user accounts with and without two-factor enabled</title>
      <link>https://softlayer.github.io/python/externalBindingUsers/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/externalBindingUsers/</guid>
      <description>To get a list of users with Two-Factor authentication enabled.
&amp;quot;&amp;quot;&amp;quot; @author Ryan TIffany &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp client = SoftLayer.Client() mask = mask&amp;quot;[id,username,firstName,lastName,externalBindingCount,externalBindings]&amp;quot; theFilter = { &#39;users&#39;: { &#39;externalBindings&#39;:{ &#39;active&#39;:{ &#39;operation&#39;:&#39;1&#39; }}} } getUsers = client[&#39;SoftLayer_Account&#39;].getUsers(filter=theFilter, mask=mask) pp(getUsers)  To get a list of users without Two-Factor authentication enabled.
&amp;quot;&amp;quot;&amp;quot; @author Ryan TIffany &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp client = SoftLayer.</description>
    </item>
    
    <item>
      <title>Provision Times</title>
      <link>https://softlayer.github.io/python/provisionTimes/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/provisionTimes/</guid>
      <description>Goes through orders and prints out each transaction that provisioned a server or virtual server. Calculates provision time from the time the order was placed, till the time the transaction went to COMPLETE.
Order: 15866609 - 2017-06-09T10:42:04-06:00 FQDN, Status, transaction id, elapsed time sgtest.cdetest.info, COMPLETE, 57090965, 383.0 Order: 15861187 - 2017-06-09T09:07:49-06:00 FQDN, Status, transaction id, elapsed time jumpbox.cdetest.info, COMPLETE, 57080823, 774.0 Order: 15860993 - 2017-06-09T08:53:22-06:00 FQDN, Status, transaction id, elapsed time Order: 15853891 - 2017-06-09T04:47:32-06:00 FQDN, Status, transaction id, elapsed time d1.</description>
    </item>
    
    <item>
      <title>Get bills by user</title>
      <link>https://softlayer.github.io/python/billsByUser/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/billsByUser/</guid>
      <description>This is a rough script, it doesn&amp;rsquo;t include some of the tax fees and some of the other one off fee fields that you will find in http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item
Example Output for billsByUser()
chris-cde - 840.0 123.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $345.0 234.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $495.0 chris.testing.com : 2 x 2.0 GHz Cores $0.0 4 Portable Private IP Addresses - $0.</description>
    </item>
    
    <item>
      <title>Get Notifications</title>
      <link>https://softlayer.github.io/ruby/getNotifications/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/getNotifications/</guid>
      <description>Retrieves all notifications that were created on January 1, 2016.
require &#39;softlayer_api&#39; require &#39;pp&#39; client = SoftLayer::Client.new(:timeout =&amp;gt; 120) theDate = &#39;01/01/2017 01:00:00&#39; theFilter = { &#39;startDate&#39;=&amp;gt; { &#39;operation&#39;=&amp;gt; &#39;greaterThanDate&#39;, &#39;options&#39;=&amp;gt; [ {&#39;name&#39;=&amp;gt; &#39;date&#39;, &#39;value&#39; =&amp;gt; [theDate]} ] } } getresults = client[&#39;SoftLayer_Notification_Occurrence_Event&#39;].getAllObjects(filter=theFilter) pp getresults  </description>
    </item>
    
    <item>
      <title>Endurance Storage Replication</title>
      <link>https://softlayer.github.io/python/EnduranceReplication/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/EnduranceReplication/</guid>
      <description>Some good starting reading.
 https://knowledgelayer.softlayer.com/procedure/endurance-replication https://knowledgelayer.softlayer.com/procedure/endurance-snapshots http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots  For more information on the magic of storage ordering see the following
 https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py  This example should touch on all the basics of dealing with endurance storage replication volumes. This example uses the SoftLayer-python File manager a little bit for ordering
TO authorize hosts that are NOT virtual guests, see the allowAccessFrom* methods in
 http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/  Graceful vs Immediate failover</description>
    </item>
    
    <item>
      <title>Subnets and Bandwidth Pools</title>
      <link>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def getPublicSubnets(self): &amp;quot;&amp;quot;&amp;quot; subnet types SECONDARY_ON_VLAN = Portable IPs PRIMARY SUBNET_ON_VLAN = static subnets PRIMARY_6 STATIC_IP_ROUTED GLOBAL_IP ADDITIONAL_PRIMARY &amp;quot;&amp;quot;&amp;quot; object_filter = { &#39;publicSubnets&#39; : { &#39;subnetType&#39; : { &#39;operation&#39;: &#39;SECONDARY_ON_VLAN&#39; } } } subnets = self.client[&#39;Account&#39;].getPublicSubnets(filter=object_filter) pp(subnets) def getBandwidthPools(self): &amp;quot;&amp;quot;&amp;quot; bareMetalInstances and privateNetworkOnlyHardware may need to be included in the mask if applicable. &amp;quot;&amp;quot;&amp;quot; mask = &amp;quot;mask[hardware,virtualGuests]&amp;quot; pool = self.</description>
    </item>
    
    <item>
      <title>Get a list of Virtual Guests and Bare Metal servers per Pod in a Datacenter</title>
      <link>https://softlayer.github.io/python/listByPod/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/listByPod/</guid>
      <description>import SoftLayer import pprint from prettytable import PrettyTable client = SoftLayer.Client() # Define datacenter e.g: dal05, dal09, ams01, sao01, etc datacenter = &#39;dal10&#39; # Declare a new API service objects for SoftLayer_Account accountClient = client[&#39;SoftLayer_Account&#39;] # Define objectMask and objectFilters to get additional information objectMask = &#39;mask[primaryNetworkComponent[router[hostname]]]&#39; objectFilterBms = {&amp;quot;hardware&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}} objectFilterVsi = {&amp;quot;virtualGuests&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}} # Define array to add pods pods = [] try: # Getting servers and vsis servers = accountClient.</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://softlayer.github.io/ruby/getLocationPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/getLocationPricing/</guid>
      <description>With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based SoftLayer_Product_Item_Price objects via the API. In the following example we will query for the Dallas 10 data center for SoftLayer Virtual Guests.
require &#39;softlayer_api&#39; require &#39;pp&#39; client = SoftLayer::Client.</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://softlayer.github.io/python/location_based_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/location_based_pricing/</guid>
      <description>With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based SoftLayer_Product_Item_Price objects via the API. In the following example we will query for the Dallas 6 data center, and then filter our item (Local Load Balancer) and prices to include only the location-based pricing for the specific data center we&amp;rsquo;re in —or we can filter for the standard price if a location-based price doesn&amp;rsquo;t exist.</description>
    </item>
    
    <item>
      <title>Get Notifications</title>
      <link>https://softlayer.github.io/python/notifications/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/notifications/</guid>
      <description>Retrieves all notifications that were created on January 1, 2016.
import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): theDate = &#39;01/01/2016 01:00:00&#39; _filter = { &#39;startDate&#39;: { &#39;operation&#39;: &#39;greaterThanDate&#39;, &#39;options&#39;: [ {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]} ] } } result = self.client[&#39;SoftLayer_Notification_Occurrence_Event&#39;].getAllObjects(filter=_filter) pp(result) if __name__ == &amp;quot;__main__&amp;quot;: main = example() main.main()  </description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/ticket_filter/</guid>
      <description>import SoftLayer from pprint import pprint as pp import logging class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): # logger = logging.getLogger() # logger.addHandler(logging.StreamHandler()) # logger.setLevel(3) theDate = &amp;quot;02/25/2016 01:00:00&amp;quot; endDate = &amp;quot;02/29/2016 01:00:00&amp;quot; mask = &amp;quot;mask[updates,group[name]]&amp;quot; theFilter1 = { &#39;tickets&#39;: { &#39;createDate&#39;: { &#39;operation&#39;: &#39;betweenDate&#39;, &#39;options&#39;: [ {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [theDate]}, {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]} ] } } } theFilter2 = { &#39;tickets&#39;: { &#39;createDate&#39;: { &#39;operation&#39;: &#39;greaterThanDate&#39;, &#39;options&#39;: [ {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]} ] }, &#39;group&#39; : { &#39;name&#39;: { &#39;operation&#39;: &#39;Cancellations&#39; } } } } result = self.</description>
    </item>
    
    <item>
      <title>Place block storage (performance ISCSI) order</title>
      <link>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; Order a block storage (performance ISCSI). Important manual pages: http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItems http://sldn.softlayer.com/reference/services/SoftLayer_Location http://sldn.softlayer.com/reference/services/SoftLayer_Location/getDatacenters http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type/getAllObjects http://sldn.softlayer.com/reference/datatypes/SoftLayer_Location http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Storage_Enterprise http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price http://sldn.softlayer.com/blog/cmporter/Location-based-Pricing-and-You http://sldn.softlayer.com/blog/bpotter/Going-Further-SoftLayer-API-Python-Client-Part-3 http://sldn.softlayer.com/article/Object-Filters http://sldn.softlayer.com/article/Python http://sldn.softlayer.com/article/Object-Masks License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer import json # Values &amp;quot;AMS01&amp;quot;, &amp;quot;AMS03&amp;quot;, &amp;quot;CHE01&amp;quot;, &amp;quot;DAL05&amp;quot;, &amp;quot;DAL06&amp;quot; &amp;quot;FRA02&amp;quot;, &amp;quot;HKG02&amp;quot;, &amp;quot;LON02&amp;quot;, etc. location = &amp;quot;AMS01&amp;quot; # Values &amp;quot;20&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;80&amp;quot;, &amp;quot;100&amp;quot;, etc. storageSize = &amp;quot;40&amp;quot; # Values between &amp;quot;100&amp;quot; and &amp;quot;6000&amp;quot; by intervals of 100.</description>
    </item>
    
    <item>
      <title>Determining SoftLayer Device Owners</title>
      <link>https://softlayer.github.io/ruby/determining_device_owners/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/determining_device_owners/</guid>
      <description>require &#39;softlayer_api&#39; require &#39;vine&#39; require &#39;pp&#39; # Credentials to the API are read from a configuration file by default. # See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44 client = SoftLayer::Client.new billing = client[&#39;Account&#39;] object_mask = &#39;mask[fullyQualifiedDomainName,billingItem[categoryCode,description,createDate,orderItem[order[userRecord[username]]]]]&#39; hardware_list = billing.object_mask(object_mask).getHardware virtual_guest_list = billing.object_mask(object_mask).getVirtualGuests def describe(item) domain_name = item.access(&#39;fullyQualifiedDomainName&#39;) || &#39;no fullyQualifiedDomainName&#39; category_code = item.access(&#39;billingItem.categoryCode&#39;) || &#39;no categoryCode&#39; description = item.access(&#39;billingItem.description&#39;) || &#39;no description&#39; create_date = item.access(&#39;billingItem.createDate&#39;) || &#39;no createDate&#39; user_name = item.access(&#39;billingItem.orderItem.order.userRecord.username&#39;) || &#39;no username&#39; return &amp;quot;&#39;#{domain_name}&#39;, category code: &#39;#{category_code}&#39;, &amp;quot;\ &amp;quot;description: &#39;#{description}&#39;, was created by: &#39;#{user_name}&#39; &amp;quot;\ &amp;quot;on &#39;#{create_date}&#39;&amp;quot; end for item in hardware_list do puts &amp;quot;Hardware &amp;quot; + describe(item) end for item in virtual_guest_list do puts &amp;quot;Virtual Guest &amp;quot; + describe(item) end  </description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/php/ticket_filter/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/ticket_filter/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $startDate = new DateTime(&#39;2015-05-28T10:05:25-06:00&#39;); $ticketClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey); $filter = new stdClass(); $filter-&amp;gt;tickets = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;operation = &#39;greaterThanDate&#39;; $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options = array(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0] = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;date&#39;; $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;)); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType-&amp;gt;operation = &#39;EMPLOYEE&#39;; $mask = new \SoftLayer\Common\ObjectMask();; $mask-&amp;gt;tickets-&amp;gt;updates; $ticketClient-&amp;gt;setObjectMask($mask); $ticketClient-&amp;gt;setObjectFilter($filter); $updates = $ticketClient-&amp;gt;getTickets(); print_r($updates); //prints out some SOAP debugging print_r($ticketClient-&amp;gt;__getLastRequest()); ?</description>
    </item>
    
    <item>
      <title>Object-Filters</title>
      <link>https://softlayer.github.io/article/Object-Filters/</link>
      <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/article/Object-Filters/</guid>
      <description>Object filters can be used to limit the results returned by the API. They differ from object masks in that they determine what Data Type objects are returned while Object Masks define what properties to retrieve from the returned objects.
Structure An object filter is created by defining a property hierarchy through the relational and local properties. The property to be filtered will be a structure that represents the object filters conditional.</description>
    </item>
    
    <item>
      <title>Change Passwords</title>
      <link>https://softlayer.github.io/python/change_multi_pass/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/change_multi_pass/</guid>
      <description>import SoftLayer import pprint class example(): def __init__(self): self.client = SoftLayer.Client() self.prefix = &amp;quot;PREFIX&amp;quot; self.password= &amp;quot;qweASDzxc!23&amp;quot; def main(self): pp = pprint.PrettyPrinter(indent=4) users = self.get_target_users(prefix=self.prefix) for user in users: print &amp;quot;Changing password for: &amp;quot; + str(user[&#39;id&#39;]) + &amp;quot; &amp;quot; + user[&#39;username&#39;] result = self.client[&#39;User_Customer&#39;].updatePassword(self.password, id=user[&#39;id&#39;]) # pp.pprint(result) def get_target_users(self, prefix): _filter = { &#39;users&#39;: { &#39;username&#39;: { &#39;operation&#39;: &#39;*= %s&#39; % (prefix) } } } _mask = &amp;quot;mask[id,username]&amp;quot; _users = self.client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask) return _users if __name__ == &amp;quot;__main__&amp;quot;: main = example() main.</description>
    </item>
    
    <item>
      <title>Get top level billing items for all owned accounts</title>
      <link>https://softlayer.github.io/php/get_invoice_top_level_items/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/get_invoice_top_level_items/</guid>
      <description>With a given date range, get all the invoice details for all of the owned brands, and all of their owned accounts. The $filter can be used to get just a single accounts invoices, just take off the -&amp;gt;allOwnedAccounts bits
&amp;lt;?php require_once __DIR__.&#39;/vendor/autoload.php&#39;; /** * This class structure is mostly used so this can be run as a script. * Most of the print statements use fancy bash color codes to make things pretty */ class topBillingItems { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; $this-&amp;gt;startDate = new DateTime(&#39;2015-02-12T00:00:00&#39;, new DateTimeZone(&#39;CST&#39;)); $this-&amp;gt;endDate = new DateTime(&#39;2015-03-12T00:00:00&#39;, new DateTimeZone(&#39;CST&#39;)); } /*!</description>
    </item>
    
    <item>
      <title>Get Invoices</title>
      <link>https://softlayer.github.io/php/get_invoice/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/get_invoice/</guid>
      <description>&amp;lt;?php require_once __DIR__.&#39;/vendor/autoload.php&#39;; $apiUser = &#39;&#39;; $key = &#39;&#39;; //The date does need to be in this specific format $startDate = new DateTime(&#39;2014-11-01T13:05:25&#39;, new DateTimeZone(&#39;CST&#39;)); $endDate = new DateTime(&#39;2014-12-01T09:53:51&#39;, new DateTimeZone(&#39;CST&#39;)); $accountClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUser, $key); $filter = new stdClass(); $filter-&amp;gt;invoices = new stdClass(); // $filter-&amp;gt;invoices-&amp;gt;accountId = new stdClass(); // $filter-&amp;gt;invoices-&amp;gt;accountId-&amp;gt;operation = &#39;= 391780&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;operation = &#39;betweenDate&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options = array(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0] = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;startDate&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;)); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1] = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;name = &#39;endDate&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;value = array($endDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;)); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;invoices; $accountClient-&amp;gt;setObjectFilter($filter); $accountClient-&amp;gt;setObjectMask($objectMask); $invoices = $accountClient-&amp;gt;getObject(); print_r($invoices); ?</description>
    </item>
    
    <item>
      <title>Server Locate</title>
      <link>https://softlayer.github.io/ruby/server_locate/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/server_locate/</guid>
      <description>require &#39;softlayer_api&#39; # gem install softlayer_api require &#39;table_print&#39; # gem install table_print # Credentials to the SoftLayer API are grabbed from the config file by default. # See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44 SoftLayer::Client.default_client = SoftLayer::Client.new servers = SoftLayer::VirtualServer.find_servers(object_mask: &#39;mask[location.pathString]&#39;) location_info = servers.map do |server| datacenter, server_room, rack, slot = server[&#39;location&#39;][&#39;pathString&#39;].split(&#39;.&#39;) { server: server.fullyQualifiedDomainName, data_center: datacenter, server_room: server_room, rack: rack, slot: slot } end tp location_info  </description>
    </item>
    
  </channel>
</rss>
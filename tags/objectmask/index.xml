<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/objectmask/index.xml</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/python/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Bare Metal Server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot;

getDetails = client[&#39;SoftLayer_Hardware&#39;].getObject(mask=mask,id=296740)
pp(getDetails)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/rest/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Hardware/getObject&#34;&gt;&lt;code&gt;SoftLayer_Hardware::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Hardware/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Hardware/$serverId/getObject.json?objectMask=mask[billingItem[item,category,children[item,category]]]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/ruby/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Bare Metal Server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

hardware_id = 26961063
object_mask = &#39;mask[id,fullyQualifiedDomainName,billingItem[id,item[id,description],category[name,id],children[id,item[id,description],category[name,id]]]]&#39;

getDetails = client[&#39;SoftLayer_Hardware&#39;].object_mask(object_mask).object_with_id(hardware_id).getObject
pp getDetails

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/python/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getVerboseVsiDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=26961063)
pp(getDetails)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/rest/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getVerboseVsiDetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getObject&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/$virtualGuestId/getObject.json?objectMask=mask[billingItem[item,category,children[item,category]]]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get a list of Virtual Guests and Bare Metal servers per Pod in a Datacenter</title>
      <link>https://softlayer.github.io/python/listByPod/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/listByPod/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import pprint
from prettytable import PrettyTable

client = SoftLayer.Client()

# Define datacenter e.g: dal05, dal09, ams01, sao01, etc
datacenter = &#39;dal10&#39;

# Declare a new API service objects for SoftLayer_Account
accountClient = client[&#39;SoftLayer_Account&#39;]

# Define objectMask and objectFilters to get additional information
objectMask = &#39;mask[primaryNetworkComponent[router[hostname]]]&#39;
objectFilterBms = {&amp;quot;hardware&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}}
objectFilterVsi = {&amp;quot;virtualGuests&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}}

# Define array to add pods
pods = []

try:
    # Getting servers and vsis
    servers = accountClient.getHardware(mask=objectMask, filter=objectFilterBms)
    vsis = accountClient.getVirtualGuests(mask=objectMask, filter=objectFilterVsi)

    # Getting pods from servers
    for server in servers:
        if server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;] not in pods:
            pods.append(server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;])
    for vsi in vsis:
        if vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;] not in pods:
            pods.append(vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;])
    # Printing servers according pods
    for pod in pods:
        table = []
        tableDetails = PrettyTable([&#39;POD&#39;, &#39;Server Id&#39;, &#39;Hostname&#39;, &#39;Domain&#39;, &#39;Type&#39;])
        print(&amp;quot;POD: %s &amp;quot; % pod)
        for server in servers:
            if pod in server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;]:
                tableDetails.add_row([pod, server[&#39;id&#39;], server[&#39;hostname&#39;], server[&#39;domain&#39;], &#39;Hardware&#39;])
        for vsi in vsis:
            if pod in vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;]:
                tableDetails.add_row([pod, vsi[&#39;id&#39;], vsi[&#39;hostname&#39;], vsi[&#39;domain&#39;], &#39;Virtual Guest&#39;])
        print(tableDetails)

except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Error. &amp;quot; % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POD: fcr01a.dal10
+--------------+-----------+-----------------+------------------------------+---------------+
|     POD      | Server Id |     Hostname    |            Domain            |      Type     |
+--------------+-----------+-----------------+------------------------------+---------------+
| fcr01a.dal10 |  xxxxxxx  | foundationtest0 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest1 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest2 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest3 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |   sethjannygpu  |         example.com          |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |  vayatta-tester |         example.com          |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |  foundationtVW  | foundationtest.vsphere.local | Virtual Guest |
| fcr01a.dal10 |  xxxxxxx  |     jrh-oel     |         example.com          | Virtual Guest |
| fcr01a.dal10 |  xxxxxxx  |   sa.blmx.cli   |         example.com          | Virtual Guest |
+--------------+-----------+-----------------+------------------------------+---------------+
POD: fcr02a.dal10
+--------------+-----------+--------------+--------------------+---------------+
|     POD      | Server Id |   Hostname   |       Domain       |      Type     |
+--------------+-----------+--------------+--------------------+---------------+
| fcr02a.dal10 |  xxxxxxx  |  jrh-quanta  |      example.com   |    Hardware   |
| fcr02a.dal10 |  xxxxxxx  | msebastian1  |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  |  privdal10   |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  |   pubdal10   |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  | userdatatest |      example.com   | Virtual Guest |
+--------------+-----------+--------------+--------------------+---------------+
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://softlayer.github.io/ruby/getLocationPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getLocationPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 10 data center for SoftLayer Virtual Guests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new
object_filter.set_criteria_for_key_path(&#39;items.prices.locationGroupId&#39;,
	&#39;operation&#39; =&amp;gt; &#39;in&#39;,
        &#39;options&#39; =&amp;gt; [{
        &#39;name&#39; =&amp;gt; &#39;data&#39;,
        &#39;value&#39; =&amp;gt; 1441195
        }])


location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>https://softlayer.github.io/php/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/createSnapshot/</guid>
      <description>&lt;p&gt;Trigger a manual snapshot creation of a Block storage volume.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storageid = &#39;123456&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey);
  $response = $client-&amp;gt;createSnapshot();

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Unable to get Storage credentials: &#39; . $e-&amp;gt;getMessage();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The process can take sometime to complete. You can check the snapshots associated with a storage volume by using the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storageid = &#39;123456&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey);
  $response = $client-&amp;gt;getSnapshotsForVolume();

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Unable to get Storage credentials: &#39; . $e-&amp;gt;getMessage();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>https://softlayer.github.io/python/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/createSnapshot/</guid>
      <description>&lt;p&gt;Trigger a manual snapshot creation of a Block storage volume.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import json

iscsiStorageId = 8744521

client = SoftLayer.create_client_from_env()
networkStorageIscsiService = client[&#39;SoftLayer_Network_Storage_Iscsi&#39;]

try:
    iscsiStorage = networkStorageIscsiService.createSnapshot(id=iscsiStorageId)
    print(json.dumps(iscsiStorage, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to retrieve the Network Storage Iscsi. faultCode=%s, faultString=%s&amp;quot;
        % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The process can take sometime to complete. You can check the snapshots associated with a storage volume by using the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import json

iscsiStorageId = 8744521

client = SoftLayer.create_client_from_env()
networkStorageIscsiService = client[&#39;SoftLayer_Network_Storage_Iscsi&#39;]

try:
    iscsiStorage = networkStorageIscsiService.getSnapshotsForVolume(id=iscsiStorageId)
    print(json.dumps(iscsiStorage, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to retrieve the Network Storage Iscsi. faultCode=%s, faultString=%s&amp;quot;
        % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>https://softlayer.github.io/rest/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/createSnapshot/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: [&lt;code&gt;SoftLayer_Network_Storage_Iscsi::.createSnapshot()&lt;/code&gt;]&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi/createSnapshot)&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi/createSnapshot)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Network_Storage_Iscsi/createSnapshot&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -s --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Network_Storage_Iscsi/8744521/createSnapshot&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;accountId&amp;quot;: xxxxx,
    &amp;quot;capacityGb&amp;quot;: 20,
    &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-11T13:45:39-06:00&amp;quot;,
    &amp;quot;guestId&amp;quot;: null,
    &amp;quot;hardwareId&amp;quot;: null,
    &amp;quot;hostId&amp;quot;: null,
    &amp;quot;id&amp;quot;: 13430037,
    &amp;quot;nasType&amp;quot;: &amp;quot;SNAPSHOT&amp;quot;,
    &amp;quot;properties&amp;quot;: [
        {
            &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-11T13:45:39-06:00&amp;quot;,
            &amp;quot;modifyDate&amp;quot;: null,
            &amp;quot;type&amp;quot;: {
                &amp;quot;description&amp;quot;: &amp;quot;Determines whether the volume is currently mountable&amp;quot;,
                &amp;quot;keyname&amp;quot;: &amp;quot;MOUNTABLE&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Mountable&amp;quot;
            },
            &amp;quot;value&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;volumeId&amp;quot;: 13430037
        },
        {
            &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-11T13:45:39-06:00&amp;quot;,
            &amp;quot;modifyDate&amp;quot;: null,
            &amp;quot;type&amp;quot;: {
                &amp;quot;description&amp;quot;: &amp;quot;Volume name&amp;quot;,
                &amp;quot;keyname&amp;quot;: &amp;quot;VOLUME_NAME&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Volume Name&amp;quot;
            },
            &amp;quot;value&amp;quot;: &amp;quot;manual.2016-08-11_1445&amp;quot;,
            &amp;quot;volumeId&amp;quot;: 13430037
        },
        {
            &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-11T13:45:39-06:00&amp;quot;,
            &amp;quot;modifyDate&amp;quot;: null,
            &amp;quot;type&amp;quot;: {
                &amp;quot;description&amp;quot;: &amp;quot;The amount of space used by snapshots.&amp;quot;,
                &amp;quot;keyname&amp;quot;: &amp;quot;SNAPSHOT_SPACE_USED&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Snapshot Used&amp;quot;
            },
            &amp;quot;value&amp;quot;: &amp;quot;88000&amp;quot;,
            &amp;quot;volumeId&amp;quot;: 13430037
        },
        {
            &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-11T13:45:39-06:00&amp;quot;,
            &amp;quot;modifyDate&amp;quot;: null,
            &amp;quot;value&amp;quot;: &amp;quot;2016-08-11T14:45:39-05:00&amp;quot;,
            &amp;quot;volumeId&amp;quot;: 13430037
        }
    ],
    &amp;quot;serviceProviderId&amp;quot;: 1,
    &amp;quot;serviceResourceBackendIpAddress&amp;quot;: &amp;quot;nfshou0201b-fz.service.softlayer.com&amp;quot;,
    &amp;quot;serviceResourceName&amp;quot;: &amp;quot;PerfStor Aggr aggr_staashou0201_pc01&amp;quot;,
    &amp;quot;storageTypeId&amp;quot;: &amp;quot;16&amp;quot;,
    &amp;quot;upgradableFlag&amp;quot;: true,
    &amp;quot;username&amp;quot;: &amp;quot;SL01SEVCxxxxx_2&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get the current snapshots by issuing the following command:&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -s --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Network_Storage_Iscsi/1234567/getSnapshotsForVolume&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    {
        &amp;quot;accountId&amp;quot;: xxxxx,
        &amp;quot;capacityGb&amp;quot;: 20,
        &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-11T13:09:41-06:00&amp;quot;,
        &amp;quot;guestId&amp;quot;: null,
        &amp;quot;hardwareId&amp;quot;: null,
        &amp;quot;hostId&amp;quot;: null,
        &amp;quot;id&amp;quot;: 13429199,
        &amp;quot;nasType&amp;quot;: &amp;quot;SNAPSHOT&amp;quot;,
        &amp;quot;propertyCount&amp;quot;: 0,
        &amp;quot;serviceProviderId&amp;quot;: 1,
        &amp;quot;serviceResourceBackendIpAddress&amp;quot;: &amp;quot;nfshou0201b-fz.service.softlayer.com&amp;quot;,
        &amp;quot;serviceResourceName&amp;quot;: &amp;quot;PerfStor Aggr aggr_staashou0201_pc01&amp;quot;,
        &amp;quot;storageTypeId&amp;quot;: &amp;quot;16&amp;quot;,
        &amp;quot;upgradableFlag&amp;quot;: true,
        &amp;quot;username&amp;quot;: &amp;quot;SL01SEVCxxxxx_2&amp;quot;
    },
    {
        &amp;quot;accountId&amp;quot;: xxxxx,
        &amp;quot;capacityGb&amp;quot;: 20,
        &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-11T11:09:00-06:00&amp;quot;,
        &amp;quot;guestId&amp;quot;: null,
        &amp;quot;hardwareId&amp;quot;: null,
        &amp;quot;hostId&amp;quot;: null,
        &amp;quot;id&amp;quot;: 13427035,
        &amp;quot;nasType&amp;quot;: &amp;quot;SNAPSHOT&amp;quot;,
        &amp;quot;propertyCount&amp;quot;: 0,
        &amp;quot;serviceProviderId&amp;quot;: 1,
        &amp;quot;serviceResourceBackendIpAddress&amp;quot;: &amp;quot;nfshou0201b-fz.service.softlayer.com&amp;quot;,
        &amp;quot;serviceResourceName&amp;quot;: &amp;quot;PerfStor Aggr aggr_staashou0201_pc01&amp;quot;,
        &amp;quot;storageTypeId&amp;quot;: &amp;quot;16&amp;quot;,
        &amp;quot;upgradableFlag&amp;quot;: true,
        &amp;quot;username&amp;quot;: &amp;quot;SL01SEVCxxxxx_2&amp;quot;
    },
    {
        &amp;quot;accountId&amp;quot;: xxxxx,
        &amp;quot;capacityGb&amp;quot;: 20,
        &amp;quot;createDate&amp;quot;: &amp;quot;2016-08-10T11:09:10-06:00&amp;quot;,
        &amp;quot;guestId&amp;quot;: null,
        &amp;quot;hardwareId&amp;quot;: null,
        &amp;quot;hostId&amp;quot;: null,
        &amp;quot;id&amp;quot;: 13402009,
        &amp;quot;nasType&amp;quot;: &amp;quot;SNAPSHOT&amp;quot;,
        &amp;quot;propertyCount&amp;quot;: 0,
        &amp;quot;serviceProviderId&amp;quot;: 1,
        &amp;quot;serviceResourceBackendIpAddress&amp;quot;: &amp;quot;nfshou0201b-fz.service.softlayer.com&amp;quot;,
        &amp;quot;serviceResourceName&amp;quot;: &amp;quot;PerfStor Aggr aggr_staashou0201_pc01&amp;quot;,
        &amp;quot;storageTypeId&amp;quot;: &amp;quot;16&amp;quot;,
        &amp;quot;upgradableFlag&amp;quot;: true,
        &amp;quot;username&amp;quot;: &amp;quot;SL01SEVCxxxxx_2&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>https://softlayer.github.io/ruby/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/createSnapshot/</guid>
      <description>&lt;p&gt;Trigger a manual snapshot creation of a Block storage volume.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
network_storage_id = 1234567
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

createsnap = client[:Network_Storage_Iscsi].object_with_id(network_storage_id).createSnapshot
pp createsnap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The process can take sometime to complete. You can check the snapshots associated with a storage volume by using the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
network_storage_id = 1234567
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

snapshots = client[:Network_Storage_Iscsi].object_with_id(network_storage_id).getSnapshotsForVolume
pp snapshots
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get storage credentials for Block Storage</title>
      <link>https://softlayer.github.io/php/storage_credentials/</link>
      <pubDate>Wed, 10 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/storage_credentials/</guid>
      <description>&lt;p&gt;The following script allows you retrieve the username and password for Performance/Endurance Block storage. If you have not autorized hosts against the storage then you will get some basic information about the Block storage as a result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */ 

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$storageid = &#39;123456&#39;;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey);
  $objectMask = new \SoftLayer\Common\ObjectMask();
  $objectMask-&amp;gt;allowedHardware-&amp;gt;allowedHost-&amp;gt;credential;
  $objectMask-&amp;gt;allowedVirtualGuests-&amp;gt;allowedHost-&amp;gt;credential;
  $client-&amp;gt;setObjectMask($objectMask);

  $response = $client-&amp;gt;getObject();

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Unable to get Storage credentials: &#39; . $e-&amp;gt;getMessage();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get storage credentials for Block Storage</title>
      <link>https://softlayer.github.io/ruby/storage_creds/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/storage_creds/</guid>
      <description>&lt;p&gt;The following script allows you retrieve the username and password for Performance/Endurance Block storage if you have authorized hosts against the storage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
network_storage_id = 1234567
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
account_service = client[&#39;SoftLayer_Network_Storage_Iscsi&#39;]
object_mask = &#39;mask[allowedHardware[allowedHost[credential]],allowedVirtualGuests[allowedHost[credential]]]&#39;
item = account_service.object_mask(object_mask).object_with_id(network_storage_id).getObject

pp item
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://softlayer.github.io/python/location_based_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/location_based_pricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 6 data center, and then filter our item (Local Load Balancer) and prices to include only the location-based pricing for the specific data center we&amp;rsquo;re in —or we can filter for the standard price if a location-based price doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

package_id = 194
datacenter = &#39;dal06&#39;

client = SoftLayer.Client()

location_object_filter = {
    &#39;name&#39;: {&#39;operation&#39;: datacenter}
}

location_object_mask = &amp;quot;priceGroups&amp;quot;

location = client[&amp;quot;SoftLayer_Location_Datacenter&amp;quot;].getDatacenters(filter=location_object_filter, mask=location_object_mask)

if len(location) == 0:
    # error handling
    exit()

# lookup location group ids
location_group_ids = []
for location_group in location[0][&amp;quot;priceGroups&amp;quot;]:
    location_group_ids.append(location_group[&amp;quot;id&amp;quot;])

object_filter_standard = {
    &#39;items&#39;: {
        &amp;quot;prices&amp;quot;: {
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
}

standard_items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=package_id, filter=object_filter_standard)

object_filter_location = {
    &#39;items&#39;: {
        &amp;quot;prices&amp;quot;: {
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;in&amp;quot;,
                &amp;quot;options&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;data&amp;quot;,
                        &amp;quot;value&amp;quot;: location_group_ids
                    }
                ]
            }
        }
    }
}

location_items = client[&amp;quot;SoftLayer_Product_Package&amp;quot;].getItems(id=package_id, filter=object_filter_location)

# let&#39;s key by item id
items = {}

for standard_item in standard_items:
    for location_item in location_items:
        if location_item[&amp;quot;id&amp;quot;] == standard_item[&amp;quot;id&amp;quot;]:
            items[location_item[&amp;quot;id&amp;quot;]] = location_item
            break

    if standard_item[&amp;quot;id&amp;quot;] not in items:
        items[standard_item[&amp;quot;id&amp;quot;]] = standard_item


print(json.dumps(items, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/ticket_filter/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp
import logging

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        theDate = &amp;quot;02/25/2016 01:00:00&amp;quot;
        endDate = &amp;quot;02/29/2016 01:00:00&amp;quot;

        mask = &amp;quot;mask[updates,group[name]]&amp;quot;


        theFilter1 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;betweenDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [theDate]},
                        {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]}
                    ]
                }
            }
        }

        theFilter2 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;greaterThanDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]}
                    ]
                },
                &#39;group&#39; : {
                    &#39;name&#39;: {
                        &#39;operation&#39;: &#39;Cancellations&#39;
                    }
                    
                }
            }
        }

        result = self.client[&#39;SoftLayer_Account&#39;].getTickets(filter=theFilter2, mask=mask)
        for ticket in result:
            print(&amp;quot;===============&amp;quot;)
            print(&amp;quot;%s - %s (%s)&amp;quot; % (ticket[&#39;createDate&#39;], ticket[&#39;title&#39;], ticket[&#39;group&#39;][&#39;name&#39;]))
            for update in ticket[&#39;updates&#39;]:
                print(&amp;quot;===============%s=============== &amp;quot; % (update[&#39;createDate&#39;]))
                print(&amp;quot;%s&amp;quot; % update[&#39;entry&#39;])
                print(&amp;quot;===============&amp;quot;)

        # pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
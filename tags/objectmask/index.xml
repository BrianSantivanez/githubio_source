<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/objectmask/index.xml</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/python/getKvmDetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getKvmDetails/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Ryan Tiffany
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&amp;quot;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=31678643)
pp(getDetails)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/rest/getKvmDetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getKvmDetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getObject&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/[device_id]/getObject?objectMask=mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;accountId&amp;quot;: xxxxx,
    &amp;quot;consoleIpAddressRecord&amp;quot;: {
        &amp;quot;ipAddress&amp;quot;: {
            &amp;quot;ipAddress&amp;quot;: &amp;quot;10.3.2.143&amp;quot;
        },
        &amp;quot;port&amp;quot;: 5902
    },
    &amp;quot;createDate&amp;quot;: &amp;quot;2017-05-02T11:00:54-06:00&amp;quot;,
    &amp;quot;dedicatedAccountHostOnlyFlag&amp;quot;: false,
    &amp;quot;domain&amp;quot;: &amp;quot;cdetest.info&amp;quot;,
    &amp;quot;fullyQualifiedDomainName&amp;quot;: &amp;quot;kube.cdetest.info&amp;quot;,
    &amp;quot;globalIdentifier&amp;quot;: &amp;quot;1c02e7d5-7a4e-4324-9ff2-xxxxxxxx&amp;quot;,
    &amp;quot;hostname&amp;quot;: &amp;quot;kube&amp;quot;,
    &amp;quot;id&amp;quot;: 31678643,
    &amp;quot;lastPowerStateId&amp;quot;: null,
    &amp;quot;lastVerifiedDate&amp;quot;: null,
    &amp;quot;managedResourceFlag&amp;quot;: false,
    &amp;quot;maxCpu&amp;quot;: 2,
    &amp;quot;maxCpuUnits&amp;quot;: &amp;quot;CORE&amp;quot;,
    &amp;quot;maxMemory&amp;quot;: 4096,
    &amp;quot;metricPollDate&amp;quot;: null,
    &amp;quot;modifyDate&amp;quot;: &amp;quot;2017-05-02T11:10:50-06:00&amp;quot;,
    &amp;quot;operatingSystem&amp;quot;: {
        &amp;quot;hardwareId&amp;quot;: null,
        &amp;quot;id&amp;quot;: 15948205,
        &amp;quot;manufacturerLicenseInstance&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;passwords&amp;quot;: [
            {
                &amp;quot;createDate&amp;quot;: &amp;quot;2017-05-02T11:04:32-06:00&amp;quot;,
                &amp;quot;id&amp;quot;: 17502747,
                &amp;quot;modifyDate&amp;quot;: &amp;quot;2017-05-02T11:04:32-06:00&amp;quot;,
                &amp;quot;password&amp;quot;: &amp;quot;redacted&amp;quot;,
                &amp;quot;port&amp;quot;: null,
                &amp;quot;software&amp;quot;: null,
                &amp;quot;softwareId&amp;quot;: 15948205,
                &amp;quot;username&amp;quot;: &amp;quot;root&amp;quot;
            }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/ruby/getKvmDetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getKvmDetails/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
virtual_server_id = 31678643

mask = &#39;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&#39;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].object_mask(mask).object_with_id(virtual_server_id).getObject
pp getDetails
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Show storage on all Virtual Guests</title>
      <link>https://softlayer.github.io/ruby/listVsiBlockDeviceSizes/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/listVsiBlockDeviceSizes/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Create a SoftLayer API client object
client = SoftLayer::Client.new()

account_service = client[&#39;SoftLayer_Account&#39;]

# We will retrieve the additional information for each VSI:
mask = &#39;mask[id,hostname,blockDevices[id,mountType,diskImage[capacity]]]&#39;
begin
  # getVirtualGuests() will get all the VSIs that an account has.
  result = account_service.object_mask(mask).getVirtualGuests
  pp result
rescue StandardError =&amp;gt; exception
  puts &amp;quot;Unable to  get the VSIs: #{exception}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Use IBMid to get SL api key</title>
      <link>https://softlayer.github.io/rest/IBMidtoSLKey/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/IBMidtoSLKey/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#!/bin/bash
# Parameters: &amp;lt;IBMid username&amp;gt; &amp;lt;IBMid password&amp;gt; &amp;lt;SL Account number (optional)&amp;gt;
# Requires: curl, jq and xmllint installed
creds=$(curl -s -u &#39;bx:bx&#39; -k -X POST --header &#39;Content-Type: application/x-www-form-urlencoded&#39; --header &#39;Accept: application/json&#39; -d &amp;quot;grant_type=password&amp;amp;response_type=cloud_iam,ims_portal&amp;amp;username=${1}&amp;amp;password=${2}&amp;amp;ims_account=${3}&amp;quot; https://iam.ng.bluemix.net/oidc/token)

ims_token=$(echo $creds | jq -r &#39;.ims_token&#39;)
ims_user_id=$(echo $creds | jq -r &#39;.ims_user_id&#39;)
echo $creds &amp;gt; creds.json

# Get api key over xmlrpc
curl -s -X POST -d &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;
&amp;lt;methodCall&amp;gt;
  &amp;lt;methodName&amp;gt;getObject&amp;lt;/methodName&amp;gt;
  &amp;lt;params&amp;gt;
    &amp;lt;param&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;struct&amp;gt;
          &amp;lt;member&amp;gt;
            &amp;lt;name&amp;gt;headers&amp;lt;/name&amp;gt;
            &amp;lt;value&amp;gt;
              &amp;lt;struct&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;authenticate&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;userId&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;int&amp;gt;$ims_user_id&amp;lt;/int&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;complexType&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;PortalLoginToken&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;authToken&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;$ims_token&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;SoftLayer_User_CustomerInitParameters&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;id&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;int&amp;gt;$ims_user_id&amp;lt;/int&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;SoftLayer_ObjectMask&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;mask&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;mask[username;apiAuthenticationKeys.authenticationKey]&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
              &amp;lt;/struct&amp;gt;
            &amp;lt;/value&amp;gt;
          &amp;lt;/member&amp;gt;
        &amp;lt;/struct&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/param&amp;gt;
  &amp;lt;/params&amp;gt;
&amp;lt;/methodCall&amp;gt;&amp;quot; https://api.softlayer.com/xmlrpc/v3/SoftLayer_User_Customer &amp;gt; response.xml
export SL_USERNAME=$(cat response.xml | xmllint --xpath &#39;(//params/param/value/struct/member/value/string/text())[1]&#39; -)
export SL_API_KEY=$(cat response.xml | xmllint --xpath &#39;(//params/param/value/struct/member/value/array/data/value/struct/member/value/string/text())[1]&#39; -)

echo &amp;quot;SL_USERNAME: $SL_USERNAME&amp;quot;
echo &amp;quot;SL_API_KEY: $SL_API_KEY&amp;quot;

rm -f creds.json response.xml # comment out to debug
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Endurance Storage Replication</title>
      <link>https://softlayer.github.io/python/EnduranceReplication/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/EnduranceReplication/</guid>
      <description>&lt;p&gt;Some good starting reading.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://knowledgelayer.softlayer.com/procedure/endurance-replication&#34;&gt;https://knowledgelayer.softlayer.com/procedure/endurance-replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knowledgelayer.softlayer.com/procedure/endurance-snapshots&#34;&gt;https://knowledgelayer.softlayer.com/procedure/endurance-snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on the magic of storage ordering see the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py&#34;&gt;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py&#34;&gt;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This example should touch on all the basics of dealing with endurance storage replication volumes. This example uses the SoftLayer-python File manager a little bit for ordering&lt;/p&gt;

&lt;p&gt;TO authorize hosts that are NOT virtual guests, see the allowAccessFrom* methods in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graceful vs Immediate failover&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/immediateFailoverToReplicant&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/immediateFailoverToReplicant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/failoverToReplicant&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/failoverToReplicant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failback is always immediate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
@package examples 
@author Christopher Gallo
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import logging
from pprint import pprint as pp

class example():

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;
        If you need debugging, uncomment these. be prepared for a lot of XML
        &amp;quot;&amp;quot;&amp;quot;
        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        self.client = SoftLayer.Client()
        self.storage = self.client[&#39;SoftLayer_Network_Storage&#39;]
        self.mgr = SoftLayer.FileStorageManager(self.client)
        # Broken up like this to look &#39;good&#39; on softlayer.github.io
        self.objectMask = &amp;quot;mask[&amp;quot;
            &amp;quot;id, username, capacityGb, bytesUsed, serviceResource[datacenter[name]], &amp;quot;
            &amp;quot;serviceResourceBackendIpAddress, activeTransactionCount, &amp;quot;
            &amp;quot;fileNetworkMountAddress, snapshots[id,createDate], hourlySchedule, &amp;quot; 
            &amp;quot;allowedReplicationVirtualGuests[hostname], allowedVirtualGuests[hostname], &amp;quot;
            &amp;quot;replicationStatus, replicationPartners]&amp;quot;

    def orderStorage(self):
        &amp;quot;&amp;quot;&amp;quot;
        This will order endurance storage in HOU02 with 20G in size, and the 0.25IOPS/GB tier
        0.25, 2, 4 and 10 iops/g are tiers available. 
        &amp;quot;&amp;quot;&amp;quot;
        result = self.mgr.order_file_volume(
            storage_type=&amp;quot;storage_service_enterprise&amp;quot;,
            location = &amp;quot;hou02&amp;quot;,
            size = 20,
            tier_level = 0.25
            )
        pp(result)

    def orderSnapshot(self, volume_id):
        result = self.mgr.order_snapshot_space(
            volume_id=volume_id,
            capacity=20,
            tier = 0.25,
            upgrade=False)
        pp(result)

    def orderReplicant(self, volume_id, schedule):
        &amp;quot;&amp;quot;&amp;quot;
        Same as other ordering methods, schedule is 
        &amp;quot;HOURLY&amp;quot;, &amp;quot;DAILY&amp;quot; or &amp;quot;WEEKLY&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;
        result = self.mgr.order_replicant_volume(
            volume_id=volume_id,
            snapshot_schedule=schedule,
            location = &amp;quot;dal06&amp;quot;,
            tier = 0.25
        )
        pp(result)



    def listStoragePrices(self):
        &amp;quot;&amp;quot;&amp;quot;
        222 - Performance - PERFORMANCE_STORAGE_SERVICE
        240 - Endurance - CODENAME_PRIME_STORAGE
        If you feel like building the pricing object yourself, start here.
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[items[prices[pricingLocationGroup,categories],attributes]]&amp;quot;
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=240)
        for item in result[&#39;items&#39;]:
            print(&amp;quot;%s - %s - %s&amp;quot; % 
                (str(item[&#39;id&#39;]), item[&#39;description&#39;], item[&#39;keyName&#39;]) 
            # pp(item)
            for prices in item[&#39;prices&#39;]:
                if prices[&#39;locationGroupId&#39;] is  &#39;&#39;:
                    print &amp;quot;\t&amp;quot; + str(prices[&#39;id&#39;])
                # pp(prices)

    def listStorage(self):
    &amp;quot;&amp;quot;&amp;quot;
    Super complicated objectFilter. Mostly here as an example of how to do an IN filter.
    Returns all storage that is in DAL06, HOU02, is NOT NAS, and is Endurance_File_Storage
    &amp;quot;&amp;quot;&amp;quot;
        objectFilter = {
            &#39;nasNetworkStorage&#39;: {
                &#39;serviceResource&#39;: {
                    &#39;type&#39;: {
                        &#39;type&#39;: {&#39;operation&#39;: &#39;!~ NAS&#39;}
                    },
                    &#39;datacenter&#39;: {
                        &#39;name&#39;: {
                            &#39;operation&#39;: &#39;in&#39;,
                            &#39;options&#39;: [{
                                &#39;name&#39;: &#39;data&#39;,
                                &#39;value&#39;: [&#39;dal06&#39;,&#39;hou02&#39;]
                            }]
                        }
                    }
                },
                &#39;storageType&#39;: {
                    &#39;keyName&#39;: {&#39;operation&#39;: &#39;ENDURANCE_FILE_STORAGE&#39;}
                }
            }
        }
        result = self.client[&#39;Account&#39;].getNasNetworkStorage(
            mask=self.objectMask,filter=objectFilter)
        pp(result)

    def authHost(self, volume_id, host_id):
    &amp;quot;&amp;quot;&amp;quot;
    each host that needs to mount the volume needs to be authorized.
    host and volume need to be in the same DC
    &amp;quot;&amp;quot;&amp;quot;
        guest = {
            &#39;id&#39;: host_id
        }
        self.storage.allowAccessFromVirtualGuest(guest, id=volume_id)

    def authReplicant(self, volume_id, host_id):
    &amp;quot;&amp;quot;&amp;quot;
    each host that needs to mount the REPLICANT needs to be authorized.
    host and volume need to be in the same DC
    &amp;quot;&amp;quot;&amp;quot;
        guest = {
            &#39;id&#39;: host_id
        }
        self.storage.allowAccessToReplicantFromVirtualGuest(guest, id=volume_id)

    def createSnapSchedule(self, volume_id):
        # HOURLY, 24 copies, first minute of the hour. 
        self.storage.enableSnapshots(&#39;HOURLY&#39;, 24, 1, 0, 0, id=volume_id)

    def manualSnap(self, volume_id):
        self.storage.createSnapshot(&#39;Manual SNAP&#39;, id=volume_id)

    def getReplicantId(self, volume_id):
        &amp;quot;&amp;quot;&amp;quot;
        there might be more than 1 replicant id in this list if there are more 
        than 1 replicant targets. Or none of course.
        &amp;quot;&amp;quot;&amp;quot;
        result = self.storage.getReplicationPartners(id=volume_id)
        return result[0][&#39;id&#39;]
        

    def houIsDown(self, volume_id, now=False):

        replicate_to = main.getReplicantId(volume_id)
        if now:
            self.storage.immediateFailoverToReplicant(replicate_to, id=volume_id)
        else
            self.storage.failoverToReplicant(replicate_to, id=volume_id)

    def houIsBack(self, volume_id):
        self.storage.failbackFromReplicant(id=volume_id,now=False)

    def volumeStatus(self, volume_id):
        result = self.storage.getObject(mask=self.objectMask, id=volume_id)
        pp(result)


if __name__ == &amp;quot;__main__&amp;quot;:
&amp;quot;&amp;quot;&amp;quot;
Covers each of the steps required to create a storage volume, and then fail it over.
The ordering methods will need to be slightly modified for block storage. 
everything else should be good as is.

&amp;quot;&amp;quot;&amp;quot;

    host_a = 25206857
    host_b = 28630647
    main = example()
    main.listStorage()
    ### First we need to order a storage volume, and get its ID.
    # main.orderStorage()
    volume_id = 20017773

    ### Then we need to order snapshot space
    # main.orderSnapshot(volume_id)

    ### Then create a snapshot schedule.
    # main.createSnapSchedule(volume_id)

    ### Then Allow our host to access the volume
    # main.authHost(volume_id, [host_a])

    ### Create a manual snapshot for fun 
    # main.manualSnap(volume_id)

    ### Order replication space.
    # main.orderReplicant(volume_id, &#39;HOURLY&#39;)

    ### Allow our vm to access replicant volume
    # main.authReplicant(volume_id,host_b)

    ### Failover to replicant
    # main.houIsDown(volume_id)

    ### Failback to main
    # main.houIsBack(volume_id)

    ### Get some status
    # main.volumeStatus(volume_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subnets and Bandwidth Pools</title>
      <link>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def getPublicSubnets(self):
        &amp;quot;&amp;quot;&amp;quot;
        subnet types
        SECONDARY_ON_VLAN = Portable IPs
        PRIMARY
        SUBNET_ON_VLAN = static subnets
        PRIMARY_6
        STATIC_IP_ROUTED
        GLOBAL_IP
        ADDITIONAL_PRIMARY
        &amp;quot;&amp;quot;&amp;quot;
        object_filter = {
            &#39;publicSubnets&#39; : {
                &#39;subnetType&#39; : {
                    &#39;operation&#39;: &#39;SECONDARY_ON_VLAN&#39;
                }
            }
        }

        subnets = self.client[&#39;Account&#39;].getPublicSubnets(filter=object_filter)
        pp(subnets)

    def getBandwidthPools(self):
        &amp;quot;&amp;quot;&amp;quot;
        bareMetalInstances and privateNetworkOnlyHardware
        may need to be included in the mask if applicable. 
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[hardware,virtualGuests]&amp;quot;
        pool = self.client[&#39;Account&#39;].getVirtualDedicatedRacks(mask=mask)
        pp(pool)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.getBandwidthPools()
    main.getPublicSubnets()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/python/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Bare Metal Server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot;

getDetails = client[&#39;SoftLayer_Hardware&#39;].getObject(mask=mask,id=296740)
pp(getDetails)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/rest/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Hardware/getObject&#34;&gt;&lt;code&gt;SoftLayer_Hardware::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Hardware/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Hardware/$serverId/getObject.json?objectMask=mask[billingItem[item,category,children[item,category]]]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/ruby/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Bare Metal Server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

hardware_id = 26961063
object_mask = &#39;mask[id,fullyQualifiedDomainName,billingItem[id,item[id,description],category[name,id],children[id,item[id,description],category[name,id]]]]&#39;

getDetails = client[&#39;SoftLayer_Hardware&#39;].object_mask(object_mask).object_with_id(hardware_id).getObject
pp getDetails

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/python/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getVerboseVsiDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=26961063)
pp(getDetails)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/rest/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getVerboseVsiDetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getObject&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/$virtualGuestId/getObject.json?objectMask=mask[billingItem[item,category,children[item,category]]]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/ruby/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getVerboseVsiDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

virtual_server_id = 26961063
object_mask = &#39;mask[id,fullyQualifiedDomainName,billingItem[id,item[id,description],category[name,id],children[id,item[id,description],category[name,id]]]]&#39;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].object_mask(object_mask).object_with_id(virtual_server_id).getObject
pp getDetails
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get a list of Virtual Guests and Bare Metal servers per Pod in a Datacenter</title>
      <link>https://softlayer.github.io/python/listByPod/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/listByPod/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import pprint
from prettytable import PrettyTable

client = SoftLayer.Client()

# Define datacenter e.g: dal05, dal09, ams01, sao01, etc
datacenter = &#39;dal10&#39;

# Declare a new API service objects for SoftLayer_Account
accountClient = client[&#39;SoftLayer_Account&#39;]

# Define objectMask and objectFilters to get additional information
objectMask = &#39;mask[primaryNetworkComponent[router[hostname]]]&#39;
objectFilterBms = {&amp;quot;hardware&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}}
objectFilterVsi = {&amp;quot;virtualGuests&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}}

# Define array to add pods
pods = []

try:
    # Getting servers and vsis
    servers = accountClient.getHardware(mask=objectMask, filter=objectFilterBms)
    vsis = accountClient.getVirtualGuests(mask=objectMask, filter=objectFilterVsi)

    # Getting pods from servers
    for server in servers:
        if server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;] not in pods:
            pods.append(server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;])
    for vsi in vsis:
        if vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;] not in pods:
            pods.append(vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;])
    # Printing servers according pods
    for pod in pods:
        table = []
        tableDetails = PrettyTable([&#39;POD&#39;, &#39;Server Id&#39;, &#39;Hostname&#39;, &#39;Domain&#39;, &#39;Type&#39;])
        print(&amp;quot;POD: %s &amp;quot; % pod)
        for server in servers:
            if pod in server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;]:
                tableDetails.add_row([pod, server[&#39;id&#39;], server[&#39;hostname&#39;], server[&#39;domain&#39;], &#39;Hardware&#39;])
        for vsi in vsis:
            if pod in vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;]:
                tableDetails.add_row([pod, vsi[&#39;id&#39;], vsi[&#39;hostname&#39;], vsi[&#39;domain&#39;], &#39;Virtual Guest&#39;])
        print(tableDetails)

except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Error. &amp;quot; % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POD: fcr01a.dal10
+--------------+-----------+-----------------+------------------------------+---------------+
|     POD      | Server Id |     Hostname    |            Domain            |      Type     |
+--------------+-----------+-----------------+------------------------------+---------------+
| fcr01a.dal10 |  xxxxxxx  | foundationtest0 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest1 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest2 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest3 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |   sethjannygpu  |         example.com          |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |  vayatta-tester |         example.com          |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |  foundationtVW  | foundationtest.vsphere.local | Virtual Guest |
| fcr01a.dal10 |  xxxxxxx  |     jrh-oel     |         example.com          | Virtual Guest |
| fcr01a.dal10 |  xxxxxxx  |   sa.blmx.cli   |         example.com          | Virtual Guest |
+--------------+-----------+-----------------+------------------------------+---------------+
POD: fcr02a.dal10
+--------------+-----------+--------------+--------------------+---------------+
|     POD      | Server Id |   Hostname   |       Domain       |      Type     |
+--------------+-----------+--------------+--------------------+---------------+
| fcr02a.dal10 |  xxxxxxx  |  jrh-quanta  |      example.com   |    Hardware   |
| fcr02a.dal10 |  xxxxxxx  | msebastian1  |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  |  privdal10   |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  |   pubdal10   |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  | userdatatest |      example.com   | Virtual Guest |
+--------------+-----------+--------------+--------------------+---------------+
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://softlayer.github.io/ruby/getLocationPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getLocationPricing/</guid>
      <description>&lt;p&gt;With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Item_Price&#34;&gt;SoftLayer_Product_Item_Price&lt;/a&gt; objects via the API. In the following example we will query for the Dallas 10 data center for SoftLayer Virtual Guests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_filter = SoftLayer::ObjectFilter.new
object_filter.set_criteria_for_key_path(&#39;items.prices.locationGroupId&#39;,
	&#39;operation&#39; =&amp;gt; &#39;in&#39;,
        &#39;options&#39; =&amp;gt; [{
        &#39;name&#39; =&amp;gt; &#39;data&#39;,
        &#39;value&#39; =&amp;gt; 1441195
        }])


location = client[&#39;SoftLayer_Product_Package&#39;]
result = location.object_with_id(46).object_filter(object_filter).getItems

pp result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
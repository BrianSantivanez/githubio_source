<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Usercustomer on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/usercustomer/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 09 Jun 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Get bills by user</title>
      <link>https://softlayer.github.io/python/billsByUser/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/billsByUser/</guid>
      <description>&lt;p&gt;This is a rough script, it doesn&amp;rsquo;t include some of the tax fees and some of the other one off fee fields that you will find in &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item&#34;&gt;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Goes through the next invoice. Collections billing items by the user that orderd them.
Prints out each user and how much they caused in billing, along with what they ordered.
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

class bills():

    def __init__(self):

        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.VSManager(self.client)

    def main(self):

        &amp;quot;&amp;quot;&amp;quot;
        Not all billing items have a user record, these are collected under the master account
        http://sldn.softlayer.com/reference/services/SoftLayer_Account/getNextInvoiceTopLevelBillingItems returns
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item -&amp;gt; taps orderItem for
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Order_Item -&amp;gt; taps order for 
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Order -&amp;gt; taps userRecord for
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_User_Customer
        &amp;quot;&amp;quot;&amp;quot;
        mask=&amp;quot;mask[orderItem[order[id,userRecord[displayName,username]]]]&amp;quot;
        billingItems = self.client[&#39;SoftLayer_Account&#39;].getNextInvoiceTopLevelBillingItems(mask=mask)

        users = {&#39;masterUser&#39;: []}
        for item in billingItems:
            if &#39;orderItem&#39; in item:
                username = item[&#39;orderItem&#39;][&#39;order&#39;][&#39;userRecord&#39;][&#39;username&#39;]
                del item[&#39;orderItem&#39;]
                if username not in users:
                    users[username] = []
                users[username].append(item)
            else:
                users[&#39;masterUser&#39;].append(item)


        # prints everything out, and finds the sum of items.
        for user in users:
            servers = []
            everything_else = []
            total_cost = 0

            for item in users[user]:

                # this doens&#39;t include Tax fees, or setup fees because I&#39;m lazy
                cost = float(item[&#39;recurringFee&#39;]) + float(item[&#39;oneTimeFee&#39;])
                if &#39;hostName&#39; in item:
                    fqdn = &amp;quot;%s.%s : %s $%s&amp;quot; % (item[&#39;hostName&#39;], item[&#39;domainName&#39;], item[&#39;description&#39;], cost)
                    servers.append(fqdn)
                else:
                    item = &amp;quot;%s - $%s&amp;quot; % (item[&#39;description&#39;], cost)
                    everything_else.append(item)
                total_cost = total_cost + cost
            print(&amp;quot;%s - %s&amp;quot; % (user , total_cost))
            for server in servers:
                print(&amp;quot;\t%s&amp;quot; % server)
            for thing in everything_else:
                print(&amp;quot;\t%s&amp;quot; % thing)




if __name__ == &amp;quot;__main__&amp;quot;:
    main = bills()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Manage (Create, Add Permissions, Delete) User</title>
      <link>https://softlayer.github.io/go/user_customer_manage/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/user_customer_manage/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

var sess *session.Session

func main() {
    sess = session.New()

    newUser := datatypes.User_Customer{
        Username:     sl.String(&amp;quot;johnsmith&amp;quot;),
        FirstName:    sl.String(&amp;quot;John&amp;quot;),
        LastName:     sl.String(&amp;quot;Smith&amp;quot;),
        Email:        sl.String(&amp;quot;johnsmith@example.com&amp;quot;),
        CompanyName:  sl.String(&amp;quot;Example Co.&amp;quot;),
        Address1:     sl.String(&amp;quot;123 Oak St.&amp;quot;),
        City:         sl.String(&amp;quot;Champaign&amp;quot;),
        State:        sl.String(&amp;quot;IL&amp;quot;),
        Country:      sl.String(&amp;quot;US&amp;quot;),
        TimezoneId:   getTimezoneID(&amp;quot;EST&amp;quot;),
        UserStatusId: getUserStatusID(&amp;quot;ACTIVE&amp;quot;),
    }

    password := &amp;quot;password&amp;quot;

    userID, err := createUser(&amp;amp;newUser, password)
    if err != nil {
        log.Fatal(&amp;quot;Could not create user:&amp;quot;, err)
    }

    fmt.Printf(&amp;quot;New user ID: %d\n&amp;quot;, userID)

    // For permissions, it&#39;s sufficient to send just the keynames to SoftLayer
    permissions := []datatypes.User_Customer_CustomerPermission_Permission{
        {KeyName: sl.String(&amp;quot;TICKET_ADD&amp;quot;)},
        {KeyName: sl.String(&amp;quot;TICKET_VIEW&amp;quot;)},
        {KeyName: sl.String(&amp;quot;SERVER_ADD&amp;quot;)},
        {KeyName: sl.String(&amp;quot;VIRTUAL_GUEST_VIEW&amp;quot;)},
    }

    err = addUserPermissions(userID, permissions)
    if err != nil {
        log.Fatal(&amp;quot;Could not add user permissions:&amp;quot;, err)
    }

    fmt.Println(&amp;quot;Portal permissions added&amp;quot;)

    err = deleteUser(userID)
    if err != nil {
        log.Fatal(&amp;quot;Could not delete user:&amp;quot;, err)
    }

    fmt.Printf(&amp;quot;User %d deleted&amp;quot;, userID)

}

func createUser(user *datatypes.User_Customer, password string) (int, error) {
    // Create the user, specifying the portal password (3rd argument - VPN
    // password - is optional, and not specified here)
    obj, err := services.GetUserCustomerService(sess).
        CreateObject(
            user,
            &amp;amp;password,
            nil)

    if err != nil {
        return -1, err
    }

    return *obj.Id, nil
}

func addUserPermissions(userID int, permissions []datatypes.User_Customer_CustomerPermission_Permission) error {
    _, err := services.GetUserCustomerService(sess).
        Id(userID).
        AddBulkPortalPermission(permissions)

    return err
}

// Delete user is accomplished by setting the user&#39;s status to CANCEL_PENDING
func deleteUser(userID int) error {
    _, err := services.GetUserCustomerService(sess).
        Id(userID).
        EditObject(&amp;amp;datatypes.User_Customer{
            UserStatusId: getUserStatusID(&amp;quot;CANCEL_PENDING&amp;quot;),
        })

    return err
}

// helper function to get a user status ID from a keyname (e.g., ACTIVE)
func getUserStatusID(key string) *int {
    statuses, err := services.GetUserCustomerStatusService(sess).GetAllObjects()
    if err != nil {
        log.Fatal(err)
    }

    for _, status := range statuses {
        if *status.KeyName == key {
            return status.Id
        }
    }

    log.Fatal(&amp;quot;Unable to locate user status matching [%s]&amp;quot;, key)

    return nil
}

// helper function to get a timezone ID from a keyname (e.g., EST)
func getTimezoneID(key string) *int {
    timezones, err := services.GetLocaleTimezoneService(sess).GetAllObjects()
    if err != nil {
        log.Fatal(err)
    }

    for _, tz := range timezones {
        if *tz.ShortName == key {
            return tz.Id
        }
    }

    log.Fatal(&amp;quot;Unable to locate timezone matching [%s]&amp;quot;, key)

    return nil
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Soap on SoftLayer API</title>
    <link>https://softlayer.github.io/tags/soap/</link>
    <description>Recent content in Soap on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/tags/soap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/php/ticket_filter/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/ticket_filter/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $startDate = new DateTime(&#39;2015-05-28T10:05:25-06:00&#39;); $ticketClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey); $filter = new stdClass(); $filter-&amp;gt;tickets = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;operation = &#39;greaterThanDate&#39;; $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options = array(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0] = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;date&#39;; $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;)); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType-&amp;gt;operation = &#39;EMPLOYEE&#39;; $mask = new \SoftLayer\Common\ObjectMask();; $mask-&amp;gt;tickets-&amp;gt;updates; $ticketClient-&amp;gt;setObjectMask($mask); $ticketClient-&amp;gt;setObjectFilter($filter); $updates = $ticketClient-&amp;gt;getTickets(); print_r($updates); //prints out some SOAP debugging print_r($ticketClient-&amp;gt;__getLastRequest()); ?</description>
    </item>
    
    <item>
      <title>SOAP in Perl</title>
      <link>https://softlayer.github.io/article/Implementing-SOAP-Perl/</link>
      <pubDate>Mon, 11 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/article/Implementing-SOAP-Perl/</guid>
      <description>Since writing this guide we&#39;ve created a Perl specific implementation and manual page. Check them out!
Our Perl SOAP API examples perform simple retrieval operations and output results to your Perl console. We use the SOAP::Lite Perl module to handle generating our SOAP headers, generating our SOAP request, then interpreting the result from the method call. Each of these examples execute a single method call to retrieve its data. We&#39;ll start out with a simple direct call, implement an object mask, then combine the two.</description>
    </item>
    
    <item>
      <title>SOAP</title>
      <link>https://softlayer.github.io/article/SOAP/</link>
      <pubDate>Mon, 20 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/article/SOAP/</guid>
      <description>toc_collapse=0;Table of contents&amp;nbsp;  WSDL URLs and Files Sending API Call Headers Using Object Masks Using Result Limits Error Handling Caveats  WSDL and XSD File Sizes   External Links    SoftLayer provides a SOAP interface in addition to [[XML-RPC]] and [[REST]]. We recommend using the SOAP API, as it is the most comprehensive API that we currently offer.
WSDL URLs and Files The SoftLayer SOAP API has one endpoint per available API service.</description>
    </item>
    
  </channel>
</rss>
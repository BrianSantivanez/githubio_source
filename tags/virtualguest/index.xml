<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Virtualguest on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/virtualguest/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 19 Sep 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Cancel a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_cancel/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_cancel/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

var guestId = 24438563

func main() {
    // Create a session
    sess := session.New()

    // Get the virtual guest service
    service := services.GetVirtualGuestService(sess)

    // Set the object ID and delete the guest
    success, err := service.Id(guestId).DeleteObject()

    if err != nil {
        log.Fatal(err)
    } else if success == false {
        log.Fatal(&amp;quot;Error deleting virtual guest&amp;quot;)
    } else {
        fmt.Println(&amp;quot;Virtual Guest deleted successfully&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Execute Remote Script</title>
      <link>https://softlayer.github.io/go/execute_remote_script/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/execute_remote_script/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

var remoteScriptURL = &amp;quot;http://example.com/scripts/preparevm&amp;quot;

func main() {
    // Create a session
    sess := session.New()

    // Get the VirtualGuest service
    service := services.GetVirtualGuestService(sess)

    // Execute the script on VM with ID 12345678
    err := service.Id(12345678).ExecuteRemoteScript(&amp;amp;remoteScriptURL)

    if err != nil {
        log.Fatal(err)
    } else {
        fmt.Println(&amp;quot;Remote script sent for execution&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Operating System Reference Codes</title>
      <link>https://softlayer.github.io/go/os_reference_codes/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/os_reference_codes/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

func main() {
    // Create a session
    sess := session.New()

    // Invoke the &#39;GetCreateObjectOptions&#39; method from the Virtual_Guest service
    opts, err := services.GetVirtualGuestService(sess).GetCreateObjectOptions()
    if err != nil {
        log.Fatal(err)
    }

    // Available properties for inspection:
    //opts.BlockDevices
    //opts.Datacenters
    //opts.Memory
    //opts.NetworkComponents
    //opts.OperatingSystems
    //opts.Processors

    // Print all available OS reference codes:
    for _, os := range opts.OperatingSystems {
        fmt.Println(*os.Template.OperatingSystemReferenceCode)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Handle API errors</title>
      <link>https://softlayer.github.io/go/errors/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/errors/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

var invalidId = 0

func main() {
    // Create a session
    sess := session.New()

    // Call DeleteObject on an invalid virtual guest
    _, err := services.GetVirtualGuestService(sess).
        Id(invalidId).
        DeleteObject()

    // Check the error.  In this instance, a 404 is handled by the application.  
  // Anything else is a no-go.
    if err != nil {
        // Try to type assert the error and look for http status code 404
        if apiErr, ok := err.(sl.Error); ok &amp;amp;&amp;amp; apiErr.StatusCode == 404 {
            fmt.Println(&amp;quot;Virtual Guest not found (already deleted?)&amp;quot;)
        } else {
            log.Fatal(&amp;quot;Unhandled error:&amp;quot;, err)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Account VMs</title>
      <link>https://softlayer.github.io/go/vm_list/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_list/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

func main() {
  // Create a session, using credentials from the environment or a .softlayer file
    sess := session.New()

  // Get an instance of the Account service
    service := services.GetAccountService(sess)

  // invoke the GetVirtualGuests API method
    vms, err := service.Mask(&amp;quot;id;hostname;domain&amp;quot;).GetVirtualGuests()
    if err != nil {
        fmt.Printf(&amp;quot;Error retrieving Virtual Guests from Account: %s\n&amp;quot;, err)
    } else {
        fmt.Println(&amp;quot;VMs under Account:&amp;quot;)

    for _, vm := range vms {
      fmt.Printf(&amp;quot;\t[%d]%s.%s\n&amp;quot;, *vm.Id, *vm.Hostname, *vm.Domain)
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Provision a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_provision/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_provision/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

// A virtual guest template
//
// (use convenience functions to get pointers from literals, as needed)
var vGuestTemplate = datatypes.Virtual_Guest{
    Hostname:                     sl.String(&amp;quot;sample&amp;quot;),
    Domain:                       sl.String(&amp;quot;example.com&amp;quot;),
    MaxMemory:                    sl.Int(4096),
    StartCpus:                    sl.Int(1),
    Datacenter:                   &amp;amp;datatypes.Location{Name: sl.String(&amp;quot;wdc01&amp;quot;)},
    OperatingSystemReferenceCode: sl.String(&amp;quot;UBUNTU_LATEST&amp;quot;),
    LocalDiskFlag:                sl.Bool(true),
}

func main() {
    // Create a session
    sess := session.New()

    service := services.GetVirtualGuestService(sess)

    // Create the virtual guest from the template
    //
    // We also specify an (optional) object mask, to read back some values
    vGuest, err := service.Mask(&amp;quot;id,hostname,domain&amp;quot;).CreateObject(&amp;amp;vGuestTemplate)
    if err != nil {
        log.Fatal(err)
    } else {
        fmt.Printf(
            &amp;quot;\nNew Virtual Guest with ID %d being provisioned\n&amp;quot;, *vGuest.Id)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_upgrade/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_upgrade/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/helpers/product&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/helpers/virtual&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

const guestID = 123456

func main() {
    sess := session.New()

    // Create a minimal Virtual_Guest object to pass to the upgrade helper
    guestToUpgrade := datatypes.Virtual_Guest{
        Id: sl.Int(guestID),
    }

    // Upgrade to 4 Core, 8 GB
    upgradeOptions := map[string]float64{
        product.CPUCategoryCode:    float64(4),
        product.MemoryCategoryCode: float64(8),
    }

    receipt, err := virtual.UpgradeVirtualGuest(sess, &amp;amp;guestToUpgrade, upgradeOptions)
    if err != nil {
        log.Fatal(&amp;quot;Couldn&#39;t upgrade virtual guest:&amp;quot;, err)
    }

    fmt.Printf(&amp;quot;Virtual Guest upgrade submitted.  Order ID: %s\n&amp;quot;, *receipt.OrderId)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
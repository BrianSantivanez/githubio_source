<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Monitoring on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/monitoring/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 12 Oct 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Monitoring Examples</title>
      <link>https://softlayer.github.io/python/monitoring/</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/monitoring/</guid>
      <description>&lt;p&gt;ResponseStatus codes and what they mean.
&lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Monitor_Version1_Query_Result&#34;&gt;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Monitor_Version1_Query_Result&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0: CRITICAL&lt;/li&gt;
&lt;li&gt;1: Warning&lt;/li&gt;
&lt;li&gt;2: OK&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4 - 5: Unknown Status, Contact Support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information:
&lt;a href=&#34;https://stackoverflow.com/questions/37662607/python-api-monitoring-manager&#34;&gt;https://stackoverflow.com/questions/37662607/python-api-monitoring-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example gets the status of your Basic and Advanced monitoring.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        return True

    def getBasicStatus(self, server_id):
        mask = &amp;quot;mask[fullyQualifiedDomainName, networkMonitors[lastResult]]&amp;quot;
        server = self.client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(id=server_id, mask=mask )
        pp(server)

    def getAdvancedStatus(self, server_id):
        mask = &amp;quot;mask[fullyQualifiedDomainName, monitoringAgents[configurationValues[definition]]]&amp;quot;
        server = self.client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(id=server_id, mask=mask )
        pp(server)

if __name__ == &amp;quot;__main__&amp;quot;:
    server = 24880113
    main = example()
    main.getBasicStatus(server)
    main.getAdvancedStatus(server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example configures the CPU monitor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
Configure the section &#39;CPU&#39; from the &#39;Cpu, Disk, and Memory Monitoring Agent&#39; agent.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Monitoring_Agent/applyConfigurationValues
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Monitoring_Agent_Configuration_Value

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# The IP address of the server or VSI to configure.
ipAddres = &amp;quot;159.8.52.188&amp;quot;

configuration = {
    &#39;Graph System CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph Total CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph User CPU Usage&#39;: &amp;quot;True&amp;quot;,
    &#39;Graph I/O Wait CPU Usage&#39;: &amp;quot;True&amp;quot;,
    &#39;Processor Queue Length Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Error Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Error Alarm Threshold&#39;: &amp;quot;99&amp;quot;,
    &#39;CPU Usage Warning Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Warning Alarm Threshold&#39;: &amp;quot;82&amp;quot;,
    &#39;Processor Queue Length Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;Max Queue Length&#39;: &amp;quot;4&amp;quot;
}

# The agent&#39;s name we wish to configure.
agentName = &#39;Cpu, Disk, and Memory Monitoring Agent&#39;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
monitoringService = client[&#39;SoftLayer_Monitoring_Agent&#39;]

# Getting the monitoring agents installed in the server or VSI.
try:
    objectMask = &#39;mask[monitoringAgents[configurationValues[definition]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# Getting the agent to configure.
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;name&#39;] == agentName]
if len(agents) == 0:
    print(&amp;quot;Unable to find the agent: &amp;quot; + agentName)
    exit(1)
agent = agents[0]

# Creating an SoftLayer_Monitoring_Agent_Configuration_Value skeleton
# which contains the configuration for the agent.
configurationValues = []
for item in configuration.keys():
    itemFound = False
    for value in agent[&#39;configurationValues&#39;]:
        if value[&#39;definition&#39;][&#39;name&#39;].strip().upper() == item.strip().upper():
            itemFound = True
            configurationValue = value
            configurationValue[&#39;value&#39;] = configuration[item].strip().upper()
            configurationValues.append(configurationValue)
            break
    if not itemFound:
        print(&amp;quot;The configuration: &amp;quot; + item + &amp;quot; is not available for the agent.&amp;quot;)


# Calling the SoftLayer_Monitoring_Agent::applyConfigurationValues method
# to apply the changes in the agent.
# Note: In case there is no changes in the agent configuration the method
# will return error.
try:
    result = monitoringService.applyConfigurationValues(configurationValues, id=agent[&#39;id&#39;])
    print(json.dumps(result, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to apply the configuration in the monitoring agent.&amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example GETs the monitoring configuration&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Get the configuration of the monitoring agent in a server or VSI.

Important manual pages:
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Monitoring_Agent/
http://sldn.softlayer.com/article/Object-Masks

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

ipAddres = &amp;quot;169.54.54.164&amp;quot;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]

try:
    objectMask = &#39;mask[monitoringAgents[configurationTemplate[configurationSections[subSections]],&#39; \
                 &#39;configurationValues[id, value, profileId, agentId, configurationDefinitionId,&#39; \
                 &#39;profile, definition[attributes, section, valueType]]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# We will get the configuration of the active agents
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;statusName&#39;] == &amp;quot;Active&amp;quot;]
server[&#39;monitoringAgents&#39;] = agents

configs = []
for agent in server[&#39;monitoringAgents&#39;]:
    config = {}
    config[&#39;agent&#39;] = agent[&#39;name&#39;]
    config[&#39;id&#39;] = agent[&#39;id&#39;]
    sections = []
    for section in agent[&#39;configurationTemplate&#39;][&#39;configurationSections&#39;]:
        sect = {}
        subsects = []
        hasProfile = False
        profileIds = []
        confs = []
        for subsection in section[&#39;subSections&#39;]:
            values = [value for value in agent[&#39;configurationValues&#39;] if
                      value[&#39;definition&#39;][&#39;sectionId&#39;] == subsection[&#39;id&#39;]]
            for value in values:
                conf = {}
                if value[&#39;profileId&#39;] == &amp;quot;&amp;quot;:
                    conf[value[&#39;definition&#39;][&#39;name&#39;]] = value[&#39;value&#39;]
                    confs.append(conf)
                else:
                    hasProfile = True
                    profileIds.append(value[&#39;profileId&#39;])      
        sect[&#39;name&#39;] = section[&#39;name&#39;]
        if not hasProfile:
            sect[&#39;configuration&#39;] = confs
            sections.append(sect)
        else:
            profileIds = list(set(profileIds))
            profiles = []
            for profileId in profileIds:
                profile = {}
                valueConfs = []
                valueProfiles = [value for value in agent[&#39;configurationValues&#39;] if
                                 value[&#39;profileId&#39;] == profileId]
                profile[&#39;name&#39;] = valueProfiles[0][&#39;profile&#39;][&#39;name&#39;]
                for valueProfile in valueProfiles:
                    value = {}
                    value[valueProfile[&#39;definition&#39;][&#39;name&#39;]] = valueProfile[&#39;value&#39;]
                    valueConfs.append(value)
                profile[&#39;configuration&#39;] = valueConfs
                profiles.append(profile)
            sect[&#39;profiles&#39;] = profiles
            sections.append(sect)
    config[&#39;sections&#39;] = sections
    configs.append(config)
print(json.dumps(configs, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example views the results of the monitoring&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
View the reports for the  &amp;quot;CPU&amp;quot; section from the
&#39;Cpu, Disk, and Memory Monitoring Agent&#39; monitor agent.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Monitoring_Agent/getGraphData
http://sldn.softlayer.com/reference/services/Monitoring_Agent_Configuration_Value/getMetricDataType

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# The IP address of the server or VSI to configure.
ipAddres = &amp;quot;159.8.52.188&amp;quot;

startDate = &#39;2016-01-02&#39;
endDate = &#39;2016-01-08&#39;

# Set &amp;quot;True&amp;quot; the reports you wish to see.
reports = {
    &#39;Graph System CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph Total CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph User CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph I/O Wait CPU Usage&#39;: &amp;quot;True&amp;quot;,
}

# The agent&#39;s name we wish to see the reports.
agentName = &#39;Cpu, Disk, and Memory Monitoring Agent&#39;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
monitoringService = client[&#39;SoftLayer_Monitoring_Agent&#39;]
agentConfigurationService = client[&#39;Monitoring_Agent_Configuration_Value&#39;]

# Getting the monitoring agents installed in the server or VSI.
try:
    # Setting an object mask to retrieve information about the monitoring agents.
    objectMask = &#39;mask[monitoringAgents[configurationValues[definition]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# Getting the agent to see the reports.
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;name&#39;] == agentName]
if len(agents) == 0:
    print(&amp;quot;Unable to find the agent: &amp;quot; + agentName)
    exit(1)
agent = agents[0]

# Creating the list of SoftLayer_Container_Metric_Data_Type objects
metricDataTypes = []
for item in reports.keys():
    if reports[item].strip().upper() == &amp;quot;TRUE&amp;quot;:
        itemFound = False
        for value in agent[&#39;configurationValues&#39;]:
            if value[&#39;definition&#39;][&#39;name&#39;].strip().upper() == item.strip().upper():
                itemFound = True
                if value[&#39;value&#39;].strip().upper() == &amp;quot;TRUE&amp;quot;:
                    try:
                        metrics = agentConfigurationService.getMetricDataType(id=value[&#39;id&#39;])
                        metricDataTypes.append(metrics)
                    except SoftLayer.SoftLayerAPIError as e:
                        print(&amp;quot;Unable to get the metrics. &amp;quot; % (e.faultCode, e.faultString))
                else:
                    print(&amp;quot;The report: &amp;quot; + item + &amp;quot; is disable for the agent. Please review the agent configuration.&amp;quot;)
                    exit(1)
                break
        if not itemFound:
            print(&amp;quot;The configuration: &amp;quot; + item + &amp;quot; is not available for the agent.&amp;quot;)

# Getting the reports.
try:
    data = monitoringService.getGraphData(metricDataTypes, startDate, endDate, id=agent[&#39;id&#39;])
    print(json.dumps(data, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the report. &amp;quot;  % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve metric data for a single server.</title>
      <link>https://softlayer.github.io/php/get_monitoring_metrics/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/get_monitoring_metrics/</guid>
      <description>&lt;p&gt;We will call the SoftLayer API to retrieve the monitoring agents,
 configuration template, and configuration values for a server instance.
 Then we will demonstrate how to find definitions that you have enabled for
 metric tracking, how to check that they are enabled, and how to then use them
 to get metrics for arbitrary dates.&lt;/p&gt;

&lt;p&gt;Note that the agent, section, sub-section, and definition names have already been
 pre-selected and in order for this example to work your server must have these
 configuration options enabled and be able to retrieve metrics for them through
the portal. If you wish to use additional or substitute names for any of those
shown below you can do so by looking at the current options available in the
 SoftLayer portal or by further debugging the output of this script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$serverId = 17422485;

$startDate = &#39;04/13/2016&#39;;

/**
 * The date at which you wish to end the metric sample.
 *
 * @var string
 */
$endDate = &#39;08/10/2016&#39;;

/**
 * For this example we&#39;ll be working with SoftLayer_Virtual_Guest, you can also work
 * with SoftLayer_Hardware_Server depending on the type of server you&#39;re interacting with.
 *
 * Create a connection to the SoftLayer_Virtual_Guest API service and call the
 * getMonitoringAgents() method to get the server&#39;s associated tracking object record.
 */
$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $serverId, $apiUsername, $apiKey);

try {
    // getMonitoringAgents() returns an array of SoftLayer_Monitoring_Agent objects.
    // From here you can loop through these agents to perform different functions such as get graphs,
    // activate, deactivate, or run other functions on it.
    $monitoringAgents = $client-&amp;gt;getMonitoringAgents();
} catch (Exception $e) {
    die(&#39;Unable to retrieve server record: &#39; . $e-&amp;gt;getMessage());
}

/**
 * Find the id of the specific agent we are wanting, in this example the &amp;quot;Cpu, Disk, and Memory&amp;quot; monitoring agent.
 */
$cdmAgent = null;
foreach ($monitoringAgents as $agent) {
    if ($agent-&amp;gt;name == &#39;Cpu, Disk, and Memory Monitoring Agent&#39;) {
        $cdmAgent = $agent;
        break;
    }
}

/**
 * Next we can create an array of all configuration variables that we are able to track.
 * Re-declare our client variable to talk to the
 * SoftLayer_Monitoring_Agent API service.
 */
$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent&#39;, $cdmAgent-&amp;gt;id, $apiUsername, $apiKey);

// Object mask to get all definitions that we need.
$objectMask = &#39;mask.definition.monitoringDataFlag&#39;;
$client-&amp;gt;setObjectMask($objectMask);

try {
    // getConfigurationValues() returns an array of
    // SoftLayer_Monitoring_Agent_Configuration_Value objects.
    $cdmConfigurationValues = $client-&amp;gt;getConfigurationValues();
} catch (Exception $e) {
    die(&#39;Unable to retrieve monitoring agent configuration template: &#39; . $e-&amp;gt;getMessage());
}

/**
 * SoftLayer_Monitoring_Agent_Configuration_Value is used to retrieve metric data types.
 * Check if the agent configuration value for each definition
 * has been enabled. Otherwise, we will not have any metric data.
 */
// Define the containers to hold the metric data types we will retrieve
$metricDataTypes = array();

foreach ($cdmConfigurationValues as $configurationValue) {

    // Ensure that this value is set to true
    if ((bool) $configurationValue-&amp;gt;value == false) {
        continue;
    }

    // Ensure that the monitoring data flag is true
    if ($configurationValue-&amp;gt;definition-&amp;gt;monitoringDataFlag !== true) {
        continue;
    }

    // Get the metricDataType for this configuration value
    $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent_Configuration_Value&#39;, $configurationValue-&amp;gt;id, $apiUsername, $apiKey);
    try {
        $metricDataTypes[] = $client-&amp;gt;getMetricDataType();
    } catch (Exception $e) {
        die(&#39;Unable to retrieve metric data type: &#39; . $e-&amp;gt;getMessage());
    }
}

/**
 * Retrieving data for an individual metric.
 *
 * Re-declare our client variable to talk to the
 * SoftLayer_Monitoring_Agent API service.
 *
 * We will be retrieving the &amp;quot;Graph Total CPU Usage&amp;quot; metric data.
 */
$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Monitoring_Agent&#39;, $cdmAgent-&amp;gt;id, $apiUsername, $apiKey);

try {
    // getGraphData() returns a SoftLayer_Metric_Tracking_Object_Data object.
    $data = $client-&amp;gt;getGraphData($metricDataTypes, $startDate, $endDate);
    echo &amp;quot;Data retrieved! &amp;quot; . count($data) . &amp;quot; data points\n\r&amp;quot;;
} catch (Exception $e) {
    die(&#39;Unable to retrieve metric data: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
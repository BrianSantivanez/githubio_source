<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Server on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/server/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 09 Oct 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Spare Pool Servers</title>
      <link>https://softlayer.github.io/rest/spare_pool/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/spare_pool/</guid>
      <description>

&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/sparePool&#34;&gt;&lt;code&gt;SoftLayer_Hardware_Server::sparepool()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparepool/add

curl -su userid:api_key  &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparePool/activate&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will return True if the action was successful, or throw an exception otherwise&lt;/p&gt;

&lt;p&gt;Exceptions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This server (hostname.domain.name) is not in a status that allows it to be added to spare pool.
This server (hostname.domain.name) is not in a status that allows it to be removed from spare pool.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server is likely already in a spare pool.&lt;/p&gt;

&lt;h3 id=&#34;view-spare-pool-servers&#34;&gt;View Spare Pool Servers&lt;/h3&gt;

&lt;p&gt;Filtering by hardwareStatus-&amp;gt;status doesn&amp;rsquo;t work, you will need to filter by the status id only.&lt;/p&gt;

&lt;p&gt;Status id 23 is SPARE_POOL
Status id 5 is ACTIVE&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key &#39;https://api.softlayer.com/rest/v3/SoftLayer_Account/getHardware?objectMask=mask[id,hostname,hardwareStatus[status,id]]&amp;amp;objectFilter={&amp;quot;hardware&amp;quot;:{&amp;quot;hardwareStatus&amp;quot;:{&amp;quot;id&amp;quot;:{&amp;quot;operation&amp;quot;:23}}}}&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tag Vlans</title>
      <link>https://softlayer.github.io/python/vlantagging/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/vlantagging/</guid>
      <description>&lt;p&gt;A rough examples of how to add vlans to servers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo


@sldn{SoftLayer_Network_Component}
@sldn{SoftLayer_Network_Component,getNetworkVlanTrunks}

@manager{hardware}
Goes through a list of servers, add the specified vlan to each one
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer

class testVlanTag():
    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;SoftLayer Client&amp;quot;&amp;quot;&amp;quot;
        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.HardwareManager(self.client)    

    def addVlanTrunks(self, id, vlans):
        &amp;quot;&amp;quot;&amp;quot;
            Adds a vlan to a network component
            @param id ID of SoftLayer_Network_Component you want to add vlan to
            @param vlans dictionary of vlan nubmers you want to add
            @sldn{SoftLayer_Network_Component,addNetworkVlanTrunks}
            @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks}
        &amp;quot;&amp;quot;&amp;quot;
        for vlanNumber in vlans:
            print &amp;quot;Adding vlan %s to %s&amp;quot; % (vlanNumber,id)
            result = self.client[&#39;Network_Component&#39;].addNetworkVlanTrunks([{&#39;vlanNumber&#39;:vlanNumber}],id=id)
            vlan = self.client[&#39;Network_Component&#39;].getNetworkVlanTrunks(id=id)


    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
            Runs through a list of server ids and tags them with the proper vlan
            Does both public and private interfaces
        &amp;quot;&amp;quot;&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of ids&amp;quot;&amp;quot;&amp;quot;
        serverIds = [14274503]
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of public vlan nubmers to tag on each server&amp;quot;&amp;quot;&amp;quot;
        publicVlanNumbers = [1125,1110]
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of private vlan nubmers to tag on each server&amp;quot;&amp;quot;&amp;quot;
        privateVlanNumbers = [1110]

        for sid in serverIds:
            hardware = self.mgr.get_hardware(sid)
            privateIP = hardware[&#39;primaryBackendIpAddress&#39;]
            print &amp;quot;Private IP is: %s&amp;quot; % (privateIP) 
            publicIP = hardware[&#39;primaryIpAddress&#39;]
            print &amp;quot;Public IP is: %s&amp;quot; % (publicIP)

            for component in hardware[&#39;networkComponents&#39;]:
                try:
                    if (component[&#39;primaryIpAddress&#39;] == publicIP):
                        continue
                        # self.addVlanTrunks(component[&#39;id&#39;],publicVlanNumbers)
                    elif (component[&#39;primaryIpAddress&#39;] == privateIP):
                        self.addVlanTrunks(component[&#39;id&#39;],privateVlanNumbers)
                    # result = self.client[&#39;Network_Component&#39;].clearNetworkVlanTrunks(id=component[&#39;id&#39;])
                    mask = &#39;networkVlan, networkVlanTrunks, uplinkComponent[networkVlanTrunks]&#39;
                    nic = self.client[&#39;Network_Component&#39;].getObject(id=component[&#39;id&#39;], mask=mask)
                except KeyError:
                    continue

            print &amp;quot;Done with %s &amp;quot; % (hardware[&#39;hostname&#39;])
            print &amp;quot;=====================================&amp;quot;  

if __name__ == &amp;quot;__main__&amp;quot;:
    main = testVlanTag()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/ruby/reloadwithsshhardware/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/reloadwithsshhardware/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

imageId = 1234567
sshKey1 = 876543
sshKey2 = 456789
serverId = 1154265
        config = {
            &#39;imageTemplateId&#39;=&amp;gt; imageId, 
            &#39;sshKeyIds&#39; =&amp;gt; [sshKey1, sshKey2]
        }

setclient = client[&#39;Hardware_Server&#39;]
reload = setclient.object_with_id(serverId).reloadOperatingSystem(&#39;FORCE&#39;, config)
pp reload	        
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/reload_hardware/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Will reload the operating system with a new imageTemplate, 
        along with a set of sshKeys. This will erease all data.
        &amp;quot;&amp;quot;&amp;quot;
        # Change these IDs
        imageId = 1234567
        sshKey1 = 123
        sshKey2 = 456
        serverId = 102938
        config = {
            &#39;imageTemplateId&#39;: imageId, 
            &#39;sshKeyIds&#39;: [sshKey1, sshKey2]
        }

        output = self.client[&#39;Hardware_Server&#39;].reloadOperatingSystem(&#39;FORCE&#39;, config, id=serverId)

        pp(config)
        print &amp;quot;RESULT\n&amp;quot;
        pp(output)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Server with security software</title>
      <link>https://softlayer.github.io/php/orderbaremetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/orderbaremetal/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();

        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices = 1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if ($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function getActiveRamItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveRamItems();
        print_r($items);
    }

    function getActiveServerItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveServerItems();
        print_r($items);
    }



    function placeOrder() {

        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();
        $container = new stdClass();

        $priceArray = array(
            49485, //INTEL_XEON_2650_2_00
            36253, //OS_WINDOWS_2012_R2_FULL_DC_64_BIT_2         
            49405, //RAM_16_GB
            876, //DISK_CONTROLLER_NONRAID
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            274, //1_GBPS_PUBLIC_PRIVATE_NETWORK_UPLINKS
            50261, //BANDWIDTH_20000_GB
            21, //1_IP_ADDRESS
            906, //REBOOT_KVM_OVER_IP
            420, //UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT
            56, //MONITORING_HOST_PING_AND_TCP_SERVICE
            57, //NOTIFICATION_EMAIL_AND_TICKET
            58, // response, AUTOMATED_NOTIFICATION
            418, //NESSUS_VULNERABILITY_ASSESSMENT_REPORTING
            413, //MCAFEE_HOST_INTRUSION_PROTECTION_WREPORTING
            594, //MCAFEE_VIRUSSCAN_ANTIVIRUS_WINDOWS                    
        );
        $container-&amp;gt;prices = array();
        foreach ($priceArray as $item) {
            $priceId = new stdClass();
            $priceId-&amp;gt;id = $item;
            $container-&amp;gt;prices[] = $priceId;
        }

        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Hardware_Server&amp;quot;;
        $container-&amp;gt;packageId = 273;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;location = 448994;  //DAL05
        $container-&amp;gt;serverCount = 1;

        $hardware = new stdClass();
        $hardware-&amp;gt;domain = &amp;quot;test.com&amp;quot;;
        $hardware-&amp;gt;hostname = &amp;quot;thisIsTest&amp;quot;;
        $container-&amp;gt;hardware = $hardware;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        print_r($order);
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }
}


$example = new Example();
// $example-&amp;gt;getAllPackages();

// Your package needs to have both activeRamItems and activeServerItems to be orderable.
// $example-&amp;gt;getActiveRamItems(273);
// $example-&amp;gt;getActiveServerItems(273);

//All price ids are from this function
// $example-&amp;gt;getPackageById(273,0,1);

$example-&amp;gt;placeOrder();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Server Bandwidth</title>
      <link>https://softlayer.github.io/python/get_bandwidth_data/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/get_bandwidth_data/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import pprint

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        pp = pprint.PrettyPrinter(indent=2)
        theMask = &amp;quot;mask[inboundPrivateBandwidthUsage,inboundPublicBandwidthUsage,outboundPrivateBandwidthUsage,outboundPublicBandwidthUsage]&amp;quot;
        result = self.client[&#39;SoftLayer_Account&#39;].getHardware()
        print &amp;quot;server_name,public_in,public_out,private_in,private_out&amp;quot;
        
        for server in result:
            #getHardware() only returns SoftLayer_Hardware, which doesn&#39;t have the private bw usage metrics, for some reason.
            # So we just use SoftLayer_Hardware_Server here, which has more detailed information
            serverInfo = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=server[&#39;id&#39;],mask=theMask)

            # use .get() to avoid exceptions
            pubin = serverInfo.get(&#39;inboundPublicBandwidthUsage&#39;, &#39;--&#39;)
            pubout = serverInfo.get(&#39;outboundPublicBandwidthUsage&#39;, &#39;--&#39;)
            privin =serverInfo.get(&#39;inboundPrivateBandwidthUsage&#39;, &#39;--&#39;)
            privout = serverInfo.get(&#39;outboundPrivateBandwidthUsage&#39;, &#39;--&#39;)

            print(serverInfo[&#39;fullyQualifiedDomainName&#39;] + &amp;quot;,&amp;quot;),
            print(pubin + &amp;quot;,&amp;quot;),
            print(pubout + &amp;quot;,&amp;quot;),
            print(privin + &amp;quot;,&amp;quot;),
            print(privout)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set a server&#39;s metadata</title>
      <link>https://softlayer.github.io/python/set_user_metadata/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/set_user_metadata/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

# CHANGE ME
server = 678243 

client = SoftLayer.Client()

mask = &amp;quot;mask[attributes]&amp;quot;

# Sets the metadata for this server to tttttt
result1 = client[&#39;SoftLayer_Hardware_Server&#39;].setUserMetadata({&#39;value&#39;: &#39;tttttt&#39;},id=server)
pp(result1)

result2 = client[&#39;SoftLayer_Hardware_Server&#39;].getObject(mask=mask,id=server)

pp(result2)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server on SoftLayer API</title>
    <link>https://softlayer.github.io/tags/server/</link>
    <description>Recent content in Server on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/tags/server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spare Pool Servers</title>
      <link>https://softlayer.github.io/rest/spare_pool/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/rest/spare_pool/</guid>
      <description>Operation: GET
Method: SoftLayer_Hardware_Server::sparepool()
Example CURL:
curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparepool/add curl -su userid:api_key &amp;#34;https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparePool/activate&amp;#34; Will return True if the action was successful, or throw an exception otherwise
Exceptions:
This server (hostname.domain.name) is not in a status that allows it to be added to spare pool. This server (hostname.domain.name) is not in a status that allows it to be removed from spare pool. The server is likely already in a spare pool.</description>
    </item>
    
    <item>
      <title>Tag Vlans</title>
      <link>https://softlayer.github.io/python/vlanTagging/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/vlanTagging/</guid>
      <description>A rough examples of how to add vlans to servers
&amp;#34;&amp;#34;&amp;#34; @author Christopher Gallo @sldn{SoftLayer_Network_Component} @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks} @manager{hardware} Goes through a list of servers, add the specified vlan to each one &amp;#34;&amp;#34;&amp;#34; import SoftLayer class testVlanTag(): def __init__(self): &amp;#34;&amp;#34;&amp;#34;SoftLayer Client&amp;#34;&amp;#34;&amp;#34; self.client = SoftLayer.Client() self.mgr = SoftLayer.HardwareManager(self.client) def addVlanTrunks(self, id, vlans): &amp;#34;&amp;#34;&amp;#34; Adds a vlan to a network component @param id ID of SoftLayer_Network_Component you want to add vlan to @param vlans dictionary of vlan nubmers you want to add @sldn{SoftLayer_Network_Component,addNetworkVlanTrunks} @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks} &amp;#34;&amp;#34;&amp;#34; for vlanNumber in vlans: print &amp;#34;Adding vlan %sto %s&amp;#34; % (vlanNumber,id) result = self.</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/ruby/reloadWithSshhardware/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/reloadWithSshhardware/</guid>
      <description>require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; client = SoftLayer::Client.new(:timeout =&amp;gt; 120) imageId = 1234567 sshKey1 = 876543 sshKey2 = 456789 serverId = 1154265 config = { &amp;#39;imageTemplateId&amp;#39;=&amp;gt; imageId, &amp;#39;sshKeyIds&amp;#39; =&amp;gt; [sshKey1, sshKey2] } setclient = client[&amp;#39;Hardware_Server&amp;#39;] reload = setclient.object_with_id(serverId).reloadOperatingSystem(&amp;#39;FORCE&amp;#39;, config) pp reload	</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/reload_hardware/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): &amp;#34;&amp;#34;&amp;#34; Will reload the operating system with a new imageTemplate, along with a set of sshKeys. This will erease all data. &amp;#34;&amp;#34;&amp;#34; # Change these IDs imageId = 1234567 sshKey1 = 123 sshKey2 = 456 serverId = 102938 config = { &amp;#39;imageTemplateId&amp;#39;: imageId, &amp;#39;sshKeyIds&amp;#39;: [sshKey1, sshKey2] } output = self.client[&amp;#39;Hardware_Server&amp;#39;].reloadOperatingSystem(&amp;#39;FORCE&amp;#39;, config, id=serverId) pp(config) print &amp;#34;RESULT\n&amp;#34; pp(output) if __name__ == &amp;#34;__main__&amp;#34;: main = example() main.</description>
    </item>
    
    <item>
      <title>Order Server with security software</title>
      <link>https://softlayer.github.io/php/orderBareMetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/orderBareMetal/</guid>
      <description>&amp;lt;?php require_once &amp;#39;./vendor/autoload.php&amp;#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &amp;#39;&amp;#39;; $this-&amp;gt;apiKey = &amp;#39;&amp;#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;#34;ID -&amp;gt; Name \n&amp;#34;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;#34; -&amp;gt; &amp;#34; . $package-&amp;gt;name . &amp;#34;\n&amp;#34;; } } function getPackageById($id=0, $onlyShow=0, $showPrices = 1) { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;#34;ID, KeyName, Description \n&amp;#34;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
    
    <item>
      <title>Server Bandwidth</title>
      <link>https://softlayer.github.io/python/get_bandwidth_data/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/get_bandwidth_data/</guid>
      <description>import SoftLayer import pprint class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): pp = pprint.PrettyPrinter(indent=2) theMask = &amp;#34;mask[inboundPrivateBandwidthUsage,inboundPublicBandwidthUsage,outboundPrivateBandwidthUsage,outboundPublicBandwidthUsage]&amp;#34; result = self.client[&amp;#39;SoftLayer_Account&amp;#39;].getHardware() print &amp;#34;server_name,public_in,public_out,private_in,private_out&amp;#34; for server in result: #getHardware() only returns SoftLayer_Hardware, which doesn&amp;#39;t have the private bw usage metrics, for some reason. # So we just use SoftLayer_Hardware_Server here, which has more detailed information serverInfo = self.client[&amp;#39;SoftLayer_Hardware_Server&amp;#39;].getObject(id=server[&amp;#39;id&amp;#39;],mask=theMask) # use .get() to avoid exceptions pubin = serverInfo.get(&amp;#39;inboundPublicBandwidthUsage&amp;#39;, &amp;#39;--&amp;#39;) pubout = serverInfo.</description>
    </item>
    
    <item>
      <title>Set a server&#39;s metadata</title>
      <link>https://softlayer.github.io/python/set_user_metadata/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/set_user_metadata/</guid>
      <description>import SoftLayer from pprint import pprint as pp # CHANGE ME server = 678243 client = SoftLayer.Client() mask = &amp;#34;mask[attributes]&amp;#34; # Sets the metadata for this server to tttttt result1 = client[&amp;#39;SoftLayer_Hardware_Server&amp;#39;].setUserMetadata({&amp;#39;value&amp;#39;: &amp;#39;tttttt&amp;#39;},id=server) pp(result1) result2 = client[&amp;#39;SoftLayer_Hardware_Server&amp;#39;].getObject(mask=mask,id=server) pp(result2)</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filter on SoftLayer API</title>
    <link>https://softlayer.github.io/tags/filter/</link>
    <description>Recent content in Filter on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/tags/filter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderBareMetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.
 Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    
    <item>
      <title>Look up an SSH key</title>
      <link>https://softlayer.github.io/go/sshkey_lookup/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/sshkey_lookup/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;github.com/softlayer/softlayer-go/filter&amp;quot; &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot; &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot; ) // The key to look up const label = &amp;quot;Test Public Key&amp;quot; func main() { sess := session.New() service := services.GetAccountService(sess) keys, err := service. Filter(filter.Build( filter.Path(&amp;quot;sshKeys.label&amp;quot;).Eq(label))). Mask(&amp;quot;id,label,key,fingerprint,notes&amp;quot;). GetSshKeys() if err != nil { log.Fatal(&amp;quot;Error retrieving SSH key: &amp;quot;, err) } if len(keys) == 0 { log.Fatal(&amp;quot;No ssh key found labeled &amp;quot;, label) } if len(keys) &amp;gt; 1 { log.Fatal(&amp;quot;More than one ssh key found labeled &amp;quot;, label) } key := keys[0] fmt.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Hardware on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/hardware/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 13 Sep 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderbaremetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/orderbaremetal/</guid>
      <description>&lt;p&gt;Example of how to build an order for a bare metal server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers&lt;/li&gt;
&lt;li&gt;Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.&lt;/li&gt;
&lt;li&gt;listAvailableVlans() if you want to place the server on a specific VLAN.&lt;/li&gt;
&lt;li&gt;listPartitionTemplates() will show what partition schemes you can apply to a disk.&lt;/li&gt;
&lt;li&gt;listRaidArrayTypes() shows what id numbers are for each RAID type.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Places an order for a Bare Metal Server
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp



class ordering():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, package_id, location_id, pub_vlan_id=&#39;&#39;, priv_vlan_id=&#39;&#39;):
        &amp;quot;&amp;quot;&amp;quot;
        Places an order for a Bare Metal Instance
        &amp;quot;&amp;quot;&amp;quot;

        &amp;quot;&amp;quot;&amp;quot;These items are required for all servers and have a 0$ cost, some can be upgraded&amp;quot;&amp;quot;&amp;quot;
        required_items = [
            &#39;AUTOMATED_NOTIFICATION&#39;,
            &#39;MONITORING_HOST_PING&#39;,
            &#39;NOTIFICATION_EMAIL_AND_TICKET&#39;,
            &#39;REBOOT_KVM_OVER_IP&#39;,
            &#39;NESSUS_VULNERABILITY_ASSESSMENT_REPORTING&#39;,
            &#39;UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT&#39;,
            &#39;REDUNDANT_POWER_SUPPLY&#39;,
        ]
        &amp;quot;&amp;quot;&amp;quot;We need bandwidth, at least 1 ip, and the port speed &amp;quot;&amp;quot;&amp;quot;
        network_items = [
            &#39;BANDWIDTH_500_GB&#39;,
            &#39;1_IP_ADDRESS&#39;,
            &#39;1_GBPS_DUAL_PUBLIC_PRIVATE_NETWORK_UPLINKS_UNBONDED&#39;,
        ]
        &amp;quot;&amp;quot;&amp;quot;A disk controller, a duplicate entry for each disk you want, in order, ram, OS and processor chip &amp;quot;&amp;quot;&amp;quot;
        physical_items = [
            &#39;DISK_CONTROLLER_RAID&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;RAM_128_GB_DDR3_1333_REG_2&#39;,
            &#39;OS_VSPHERE_ENTERPRISE_PLUS_6_0&#39;,
            &#39;INTEL_XEON_2620_2_00&#39;
        ]

        all_items = required_items + network_items + physical_items
        prices = self.gatherPriceIds(package_id, all_items)
        productOrder = {&#39;orderContainers&#39;: [
                {&#39;hardware&#39;: 
                    [
                        {
                            &#39;domain&#39;: u&#39;cgallo.com&#39;,
                            &#39;hostname&#39;: u&#39;vmware-testing01&#39;,
                            &#39;primaryBackendNetworkComponent&#39;: {&#39;networkVlanId&#39;: priv_vlan_id},
                            &#39;primaryNetworkComponent&#39;: {&#39;networkVlanId&#39;: pub_vlan_id}
                        }
                    ],
                    &#39;location&#39;: location_id,
                    &#39;packageId&#39;: package_id,
                    &#39;prices&#39;: prices,
                    &#39;quantity&#39;: 1,
                    &#39;storageGroups&#39; : [
                        {
                            &#39;arrayTypeId&#39;: 2,
                            &#39;hardDrives&#39;: [0,1],
                            &#39;partitionTemplateId&#39;: 1
                        },
                        {
                            &#39;arrayTypeId&#39;: 9,
                            &#39;hardDrives&#39;: [2]
                        },
                        {
                            &#39;arrayTypeId&#39;: 9,
                            &#39;hardDrives&#39;: [3]
                        }
                    ],
                }
            ]
        }
        pp(productOrder)
        order = self.client[&#39;Product_Order&#39;].verifyOrder(productOrder)
        # order = self.client[&#39;Product_Order&#39;].placeOrder(productOrder)
        pp(order)


    def listServerPackages(self):
        mask = &amp;quot;mask[type]&amp;quot;
        _filter = {
            &#39;type&#39;: {
                &#39;keyName&#39;: {&#39;operation&#39;: &#39;BARE_METAL_CPU&#39;},
            },
        }
        result = self.client[&#39;Product_Package&#39;].getAllObjects(mask=mask, filter=_filter)

        for product in result:
            print(&amp;quot;%s - %s - %s - %s&amp;quot; % 
                (product[&#39;id&#39;],
                 product[&#39;name&#39;],
                 product[&#39;keyName&#39;],
                 product[&#39;type&#39;][&#39;keyName&#39;])
            )
            

    def listPartitionTemplates(self):
        mask = &amp;quot;mask[partitionTemplates[data]]&amp;quot;
        result = self.client[&#39;SoftLayer_Hardware_Component_Partition_OperatingSystem&#39;].getAllObjects(mask=mask)
        print(&amp;quot;OS Type, Notes&amp;quot;)
        for os_type in result:
            print(&amp;quot;%s - %s&amp;quot; % (os_type[&#39;description&#39;],os_type[&#39;notes&#39;]))
            print(&amp;quot;\tTemplate id, Description&amp;quot;)
            for template in os_type[&#39;partitionTemplates&#39;]:
                print(&amp;quot;\t%s - %s &amp;quot; % (template[&#39;id&#39;],template[&#39;description&#39;]))
                for partition in template[&#39;data&#39;]:
                    print(&amp;quot;\t\t%s - %s %s&amp;quot; % 
                        (partition[&#39;partitionName&#39;], 
                         partition[&#39;partitionSize&#39;], 
                         &#39;Grow&#39; if partition[&#39;isGrow&#39;] else &#39;&#39;)
                    )

    def listRaidArrayTypes(self):
        result = self.client[&#39;SoftLayer_Configuration_Storage_Group_Array_Type&#39;].getAllObjects()
        for raid in result:
            print(&amp;quot;%s - %s - %s Min:%s Max:%s&amp;quot; % 
                (raid[&#39;id&#39;], 
                 raid[&#39;keyName&#39;], 
                 raid[&#39;description&#39;], 
                 raid[&#39;minimumDrives&#39;], 
                 raid[&#39;maximumDrives&#39;])
            ) 

    def listAvailableVlans(self, dc_id):
        mask = &amp;quot;mask[network,type,primaryRouter[datacenter]]&amp;quot;
        _filter = {
            &#39;networkVlans&#39; : {
                &#39;primaryRouter&#39;: {
                    &#39;datacenter&#39; : { &#39;id&#39;: {&#39;operation&#39;: dc_id} }
                }
            }
        }
        result = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask,filter=_filter)
        for vlan in result:
            print(&amp;quot;%s - VLAN: %s - Type: %s - %s &amp;quot; % 
                (vlan[&#39;id&#39;], 
                 vlan[&#39;vlanNumber&#39;],
                 vlan[&#39;type&#39;][&#39;keyName&#39;], 
                 vlan[&#39;primaryRouter&#39;][&#39;hostname&#39;])
            )

    def getServerPrices(self, package_id):
        mask = &amp;quot;mask[regions,items[prices],activeServerItems[prices]]&amp;quot;
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)
        print(&amp;quot;Location ID, Location Name&amp;quot;)
        for location in result[&#39;regions&#39;]:
            print(&amp;quot;%s - %s &amp;quot; % (location[&#39;location&#39;][&#39;location&#39;][&#39;id&#39;],location[&#39;description&#39;]))
        print(&amp;quot;Price ID, description, Monthly Fee, KeyName&amp;quot;)
        for item in result[&#39;items&#39;]:
            for prices in item[&#39;prices&#39;]:
                # only print the Default location price. 
                # The ordering system will replace the default price id for you if ordering in a non-usa region.
                if prices[&#39;locationGroupId&#39;] is &#39;&#39;:
                    # Some software has core restrictions that effect prices
                    if &#39;capacityRestrictionType&#39; in prices:
                        cores = &amp;quot;%s - %s&amp;quot; % (
                             prices[&#39;capacityRestrictionMinimum&#39;], 
                             prices[&#39;capacityRestrictionMaximum&#39;])
                        print(&amp;quot;%s, %s - %s cores, $%s, %s &amp;quot; % 
                            (prices[&#39;id&#39;],
                             item[&#39;description&#39;],
                             cores,prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                             item[&#39;keyName&#39;])
                        )
                    else:
                        print(&amp;quot;%s, %s, $%s, %s &amp;quot; % 
                            (prices[&#39;id&#39;],
                              item[&#39;description&#39;],
                              prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                              item[&#39;keyName&#39;])
                        )
        print(&amp;quot;======= SERVER ITEMS =======&amp;quot;)
        # serverItems = self.client[&#39;Product_Package&#39;].getActiveServerItems(id=package_id)
        print(&amp;quot;Price ID, description, Monthly Fee, KeyName&amp;quot;)
        for item in result[&#39;activeServerItems&#39;]:
            for prices in item[&#39;prices&#39;]:
                # only print the Default location price. 
                # The ordering system will replace the default price id for you if ordering in a non-usa region.
                if prices[&#39;locationGroupId&#39;] is &#39;&#39;:
                    print(&amp;quot;%s, %s, $%s, %s &amp;quot; % 
                        (prices[&#39;id&#39;],
                         item[&#39;description&#39;],
                         prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                         item[&#39;keyName&#39;])
                    )


    def gatherPriceIds(self,package_id,keyNames):
        # This wont work for prices that have core requirements
        mask = &amp;quot;mask[items[prices],activeServerItems[prices]]&amp;quot;
        items = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)

        prices = []
        sorted_items = {}

        for item in items[&#39;items&#39;]:
            for price in item[&#39;prices&#39;]:
                if price[&#39;locationGroupId&#39;] is &#39;&#39;: 
                    sorted_items[item[&#39;keyName&#39;]] = price[&#39;id&#39;]
        for item in items[&#39;activeServerItems&#39;]:
            for price in item[&#39;prices&#39;]:
                if price[&#39;locationGroupId&#39;] is &#39;&#39;: 
                    sorted_items[item[&#39;keyName&#39;]] = price[&#39;id&#39;]

        for keyName in keyNames:
            prices.append({&#39;id&#39;: int(sorted_items.get(keyName))})
        return prices

if __name__ == &amp;quot;__main__&amp;quot;:

    main = ordering()

    &amp;quot;&amp;quot;&amp;quot;
    Step 1, find the processor type you want
    269 - Quad E7-4800  Series (6 Drives) - 2U_QUAD_E74800_6_DRIVES : BARE_METAL_CPU
    &amp;quot;&amp;quot;&amp;quot;
    main.listServerPackages()
    package_id = 263

    &amp;quot;&amp;quot;&amp;quot;
    Step 2, collect all the pieces you want to order
    getServerPrices will list out all the keyNames and cost of components
    that can be ordered on a certain package. Will also list the DCs that this
    server is available in.
    &amp;quot;&amp;quot;&amp;quot;
    main.getServerPrices(package_id)
    location_id = 142776

    &amp;quot;&amp;quot;&amp;quot;
    Step 3, customize and place the order
    &amp;quot;&amp;quot;&amp;quot;
    main.listAvailableVlans(location_id)
    pub_vlan_id  = 2137279
    priv_vlan_id = 2137281
    main.listPartitionTemplates()
    main.listRaidArrayTypes()
    main.main(package_id,location_id,pub_vlan_id,priv_vlan_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ordering Raid</title>
      <link>https://softlayer.github.io/ruby/orderingraid/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/orderingraid/</guid>
      <description>

&lt;p&gt;As a SoftLayer user, you have probably seen the beautiful RAID Configurator that greets you when you order a server on the SoftLayer website.&lt;/p&gt;

&lt;p&gt;It allows you to do anything you like, from a straight RAID configuration involving all drives in a single disk array, to a much more intricate configuration with nearly any mix of disks and RAID types.&lt;/p&gt;

&lt;p&gt;However beautiful and practical the interface, sometimes you want to script this process, and the SoftLayer mantra of &amp;ldquo;Anything you can do in the Web interface, you can do on the API&amp;rdquo; also rings true in this case.&lt;/p&gt;

&lt;h2 id=&#34;single-raid-group&#34;&gt;Single RAID group&lt;/h2&gt;

&lt;p&gt;If all your drives are the same and you simply want a single RAID group, be it RAID 0,1,5 or 10, you can achieve this by ordering the corresponding disk controller.&lt;/p&gt;

&lt;p&gt;When building your order template you will see that RAID-enabled servers are listed with multiple disk controllers. Here&amp;rsquo;s an example of the relevant price IDs from package 53 (Intel Xeon 3200 Series):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Category &amp;quot;Disk Controller&amp;quot;:
     876 -- Non-RAID
     877 -- RAID 0
     878 -- RAID 1
     879 -- RAID 5
     880 -- RAID 10
     22482 -- RAID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So ordering an Intel 3260 server with RAID 10 through the API could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rubygems&#39;
require &#39;softlayer_api&#39;
 
$SL_API_USERNAME = &amp;quot; PLEASE SET ME &amp;quot;
$SL_API_KEY = &amp;quot; PLEASE SET ME TOO &amp;quot;
 
client = SoftLayer::Service.new(&amp;quot;SoftLayer_Product_Order&amp;quot;);
 
order = {
 :complexType =&amp;gt; &#39;SoftLayer_Container_Product_Order_Hardware_Server&#39;,
 :quantity =&amp;gt; 1,
 :hardware =&amp;gt; [{:hostname =&amp;gt; &#39;raidtest&#39;, :domain =&amp;gt; &#39;example.com&#39;}],
 :location =&amp;gt; 168642, # San Jose 1
 :packageId =&amp;gt; 53, # Intel Xeon 3200 Series
 :prices =&amp;gt; [
  {:id =&amp;gt; 2050}, # Single Processor Quad Core Xeon 3460 - 2.80GHz (Lynnfield) - 1 x 8MB cache w/HT
  {:id =&amp;gt; 17438}, # -- Ubuntu Linux 12.04.0 LTS Precise Pangolin - Minimal Install (64 bit)
  {:id =&amp;gt; 21004}, # 4 GB DDR3 Registered 1333
  {:id =&amp;gt; 880}, # Disk controller -- RAID 10 
  {:id =&amp;gt; 1257}, # First hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 728}, # 0 GB Bandwidth
  {:id =&amp;gt; 898}, # 100 Mbps Private Network
  {:id =&amp;gt; 906}, # Reboot / KVM over IP  
  {:id =&amp;gt; 420}, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
  {:id =&amp;gt; 55}, # Host Ping
  {:id =&amp;gt; 418}, # Nessus Vulnerability Assessment &amp;amp; Reporting
  {:id =&amp;gt; 57}, # Notification -- Email and Ticket
  {:id =&amp;gt; 58} # Response -- Automated Notification
 ]
}
 
result = client.verifyOrder(order)
## Uncomment when you are ready to order
# client.placeOrder(order)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multiple-raid-groups&#34;&gt;Multiple RAID groups&lt;/h2&gt;

&lt;p&gt;When ordering multiple RAID groups you need to order the Disk Controller type called RAID, and specify your RAID groups in an attribute in the order template called storageGroups.
storageGroups is of the type &lt;a href=&#34;https://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Storage_Group&#34;&gt;SoftLayer_Container_Product_Order_Storage_Group&lt;/a&gt; and the most important attributes can be explained as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;arrayTypeId: Integer - Required
Can be retrieved from &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Configuration_Storage_Group_Array_Type&#34;&gt;SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
hardDrives: Array of integers - Required
Array of drives to take part in the given raid array. 0 = first drive, 1 = second drive, etc&lt;/p&gt;

&lt;p&gt;hotSpareDrives: array of integers - Optional
On raid types where hot spare is allowed, you can specify which drives to use as hot spare.
Raid types that allow hot spare can be retrieved from &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Configuration_Storage_Group_Array_Type&#34;&gt;SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;partitionTemplateId: integer - Optional
To be used on the array where the operating system is to be installed.
Partition Template IDs for the relevant operating system can be retrieved from
&lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Component_Partition_OperatingSystem/getPartitionTemplates&#34;&gt;SoftLayer_Hardware_Component_Partition_OperatingSystem::getPartitionTemplates&lt;/a&gt;
use &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Component_Partition_OperatingSystem&#34;&gt;SoftLayer_Hardware_Component_Partition_OperatingSystem::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to get a list of operating system groups that has partition templates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s say, for example, you want to have a server with a single SSD drive for the operating system, also hosting a large 12GB swap partition, and a separate RAID array with 3 striped 147GB SAS Drives.&lt;/p&gt;

&lt;p&gt;The first thing we&amp;rsquo;ll need to do is specify the controller and drives we want in our order template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{:id =&amp;gt; 22482}, # Disk controller -- RAID
{:id =&amp;gt; 13756}, # First hard drive -- 50GB SSD
{:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
{:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
{:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To configure the RAID groups we need to populate storageGroups
The disks will be addressed in the order of their placement and template, starting at disk 0.
So for the first disk that we want to be on its own we will use arrayTypeId 9, which is JBOD, and specify partitionTemplateId 226 which specifies a 12GB Swap partition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{
        :arrayTypeId =&amp;gt; 9, # JBOD -- Other types available from SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects
        :hardDrives =&amp;gt; [0], # First Hard Drive (50GB SSD)
        :partitionTemplateId =&amp;gt; 226 # Custom partition template - 12GB Swap
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the second group we specify arrayTypeId 1, which is RAID 0 - Striped&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{
        :arrayTypeId =&amp;gt; 1, # RAID 0 -- Other types available from SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects
        :hardDrives =&amp;gt; [1,2,3] # Second, third and fourth hard drives (147GB SAS)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All together, the order will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rubygems&#39;
require &#39;softlayer_api&#39;
 
$SL_API_USERNAME = &amp;quot; PLEASE SET ME &amp;quot;
$SL_API_KEY = &amp;quot; PLEASE SET ME TOO &amp;quot;
 
client = SoftLayer::Service.new(&amp;quot;SoftLayer_Product_Order&amp;quot;);
 
order = {
 :complexType =&amp;gt; &#39;SoftLayer_Container_Product_Order_Hardware_Server&#39;,
 :quantity =&amp;gt; 1,
 :hardware =&amp;gt; [{:hostname =&amp;gt; &#39;raidtest&#39;, :domain =&amp;gt; &#39;example.com&#39;}],
 :location =&amp;gt; 168642, # San Jose 1
 :packageId =&amp;gt; 53, # Intel Xeon 3200 Series
 :prices =&amp;gt; [
  {:id =&amp;gt; 2050}, # Single Processor Quad Core Xeon 3460 - 2.80GHz (Lynnfield) - 1 x 8MB cache w/HT
  {:id =&amp;gt; 17438}, # -- Ubuntu Linux 12.04.0 LTS Precise Pangolin - Minimal Install (64 bit)
  {:id =&amp;gt; 21004}, # 4 GB DDR3 Registered 1333
  {:id =&amp;gt; 22482}, # Disk controller -- RAID
  {:id =&amp;gt; 13756}, # First hard drive -- 50GB SSD
  {:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 728}, # 0 GB Bandwidth
  {:id =&amp;gt; 898}, # 100 Mbps Private Network
  {:id =&amp;gt; 906}, # Reboot / KVM over IP  
  {:id =&amp;gt; 420}, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
  {:id =&amp;gt; 55}, # Host Ping
  {:id =&amp;gt; 418}, # Nessus Vulnerability Assessment &amp;amp; Reporting
  {:id =&amp;gt; 57}, # Notification -- Email and Ticket
  {:id =&amp;gt; 58} # Response -- Automated Notification
 ],
 
 :storageGroups =&amp;gt; [
     { # RAID Array 1
        :arrayTypeId =&amp;gt; 9, # JBOD
        :hardDrives =&amp;gt; [0], # First Hard Drive (50GB SSD)
        :partitionTemplateId =&amp;gt; 226 # Custom partition template - 12GB Swap
     },
     { # RAID Array 2
        :arrayTypeId =&amp;gt; 1, # RAID 0
        :hardDrives =&amp;gt; [1,2,3] # Second, third and fourth hard drives (147GB SAS)
     }
  ]
}

 
result = client.verifyOrder(order)
## Uncomment when you&#39;re ready to order
# client.placeOrder(order)
Links and other useful information
order_multiple_raid_groups.rb
order_single_raid_group.rb
get_package_options.rb (command line tool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//hansKristian&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Router Model Map</title>
      <link>https://softlayer.github.io/python/networkmapper/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/networkmapper/</guid>
      <description>&lt;p&gt;Prints out model numbers of networking equipment that is on route to your servers. Could be useful if merged with &lt;a href=&#34;https://softlayer.github.io/python/networktopology/&#34;&gt;https://softlayer.github.io/python/networktopology/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Finds the model number of all networking equipment that is on the way to servers on the account.
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

class networkMap():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Goes through each server, and prints out what networking hardware is upstream
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[id, fullyQualifiedDomainName]&amp;quot; 
        servers = self.client[&#39;SoftLayer_Account&#39;].getHardware(mask=mask)
        for server in servers:
            print(&amp;quot;%s&amp;quot; % (server[&#39;fullyQualifiedDomainName&#39;]))
            server_mask = &amp;quot;mask[backendNetworkComponents[networkHardware[hardwareChassis]]]&amp;quot; 
            this_server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=server[&#39;id&#39;],mask=server_mask)
            for component in this_server[&#39;backendNetworkComponents&#39;]:
                print(&amp;quot;\t%s%s (%smbps) &amp;quot; % (component[&#39;name&#39;], component[&#39;port&#39;], component[&#39;speed&#39;]))
                for uplink in component[&#39;networkHardware&#39;]:
                    print(&amp;quot;\t\t%s - %s - %s&amp;quot; % (uplink[&#39;fullyQualifiedDomainName&#39;], uplink[&#39;hardwareChassis&#39;][&#39;name&#39;], uplink[&#39;hardwareChassis&#39;][&#39;hardwareFunction&#39;][&#39;description&#39;]))


    def fromTheTop(self):
        &amp;quot;&amp;quot;&amp;quot;
        Goes through each DC, and prints out the hierarchy of networking gear
        &amp;quot;&amp;quot;&amp;quot;
        dc_mask=&amp;quot;mask[backendHardwareRouters]&amp;quot;
        dcs = self.client[&#39;SoftLayer_Location_Datacenter&#39;].getDatacenters()

        for dc in dcs:
            print(&amp;quot;%s&amp;quot; % (dc[&#39;name&#39;]))
            router_mask = &amp;quot;mask[hardwareChassis,downlinkHardware[hardwareChassis,downlinkHardware[hardwareChassis,downstreamServers[id,fullyQualifiedDomainName],id,fullyQualifiedDomainName]]]&amp;quot;
            backend = self.client[&#39;SoftLayer_Location_Datacenter&#39;].getBackendHardwareRouters(id=dc[&#39;id&#39;],mask=router_mask)
            for router in backend:
                print(&amp;quot;\t%s - %s - %s &amp;quot; % (router[&#39;hardwareFunction&#39;][&#39;description&#39;], router[&#39;fullyQualifiedDomainName&#39;], router[&#39;hardwareChassis&#39;][&#39;name&#39;]))
                # Can be used to print out info on the linecards of the BCR/FCR
                # for component in router[&#39;components&#39;]:
                    # print(&amp;quot;\t\t%s&amp;quot; % (component[&#39;hardwareComponentModel&#39;][&#39;longDescription&#39;]))
                try:
                    for down in router[&#39;downlinkHardware&#39;]:
                        print(&amp;quot;\t\t%s - %s &amp;quot; % (down[&#39;fullyQualifiedDomainName&#39;],down[&#39;hardwareChassis&#39;][&#39;name&#39;]))
                        for down_1 in down[&#39;downlinkHardware&#39;]:
                            print(&amp;quot;\t\t\t%s - %s &amp;quot; % (down_1[&#39;fullyQualifiedDomainName&#39;],down_1[&#39;hardwareChassis&#39;][&#39;name&#39;]))
                            for server in down_1[&#39;downstreamServers&#39;]:
                                print(&amp;quot;\t\t\t\t%s&amp;quot; % server[&#39;fullyQualifiedDomainName&#39;])
                except KeyError:
                    print(&amp;quot;Skipping....&amp;quot;)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = networkMap()
    # main.main()
    main.fromTheTop()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GetHardware with network components</title>
      <link>https://softlayer.github.io/rest/get_hardware_components/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/get_hardware_components/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/getHardware&#34;&gt;&lt;code&gt;SoftLayer_Account::getHardware()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Account/getHardware&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parameters &lt;code&gt;objectMask=mask[id,fullyQualifiedDomainName,networkComponents[name,networkHardware[hostname],uplinkComponent[name,status]]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -u username:api_key -G --data &amp;quot;objectMask=mask[id,fullyQualifiedDomainName,networkComponents[name,networkHardware[hostname],uplinkComponent[name,status]]]&amp;quot;  &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Account/getHardware&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;fullyQualifiedDomainName&amp;quot;: &amp;quot;bsdal5167180245106688.bsd.citrix.dc&amp;quot;,
        &amp;quot;id&amp;quot;: 115628,
        &amp;quot;networkComponents&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;mgmt&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bms173.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03b.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03a.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08a.sr03.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;Ethernet1&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03b.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03a.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet1/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcs173a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fas08a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03a.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03b.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet1/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03b.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03a.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet2/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;DISABLED&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcs173b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fas08b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03a.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03b.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet2/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;DISABLED&amp;quot;
                }
            }
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
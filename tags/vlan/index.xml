<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vlan on SoftLayer API</title>
    <link>https://softlayer.github.io/tags/vlan/</link>
    <description>Recent content in Vlan on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/tags/vlan/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderBareMetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.
 Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    
    <item>
      <title>Tag Vlans</title>
      <link>https://softlayer.github.io/python/vlanTagging/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/vlanTagging/</guid>
      <description>A rough examples of how to add vlans to servers
&amp;quot;&amp;quot;&amp;quot; @author Christopher Gallo @sldn{SoftLayer_Network_Component} @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks} @manager{hardware} Goes through a list of servers, add the specified vlan to each one &amp;quot;&amp;quot;&amp;quot; import SoftLayer class testVlanTag(): def __init__(self): &amp;quot;&amp;quot;&amp;quot;SoftLayer Client&amp;quot;&amp;quot;&amp;quot; self.client = SoftLayer.Client() self.mgr = SoftLayer.HardwareManager(self.client) def addVlanTrunks(self, id, vlans): &amp;quot;&amp;quot;&amp;quot; Adds a vlan to a network component @param id ID of SoftLayer_Network_Component you want to add vlan to @param vlans dictionary of vlan nubmers you want to add @sldn{SoftLayer_Network_Component,addNetworkVlanTrunks} @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks} &amp;quot;&amp;quot;&amp;quot; for vlanNumber in vlans: print &amp;quot;Adding vlan %s to %s&amp;quot; % (vlanNumber,id) result = self.</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>https://softlayer.github.io/python/networkTopology/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/networkTopology/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; @author Christopher Gallo &amp;quot;&amp;quot;&amp;quot; import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): mask = &amp;quot;&amp;quot;&amp;quot; mask[ attachedNetworkGateway[publicVlan,privateVlan], hardware[fullyQualifiedDomainName,frontendNetworkComponents[uplinkComponent], backendNetworkComponents[uplinkComponent]], network, networkSpace, primaryRouter[hostname], primarySubnet, subnets[networkIdentifier], virtualGuests[fullyQualifiedDomainName] ] &amp;quot;&amp;quot;&amp;quot; orderedVlans = {} result = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask) &amp;quot;&amp;quot;&amp;quot; This bit builds a nicely structured object of the network topology &amp;quot;&amp;quot;&amp;quot; for vlan in result: vlanNumber = vlan[&#39;vlanNumber&#39;] router,dc = vlan[&#39;primaryRouter&#39;][&#39;hostname&#39;].split(&amp;quot;.&amp;quot;) if dc not in orderedVlans: orderedVlans[dc] = {} if router not in orderedVlans[dc]: orderedVlans[dc][router] = {} toAppend = { &#39;hardware&#39;: vlan[&#39;hardware&#39;], &#39;virtualGuests&#39;: vlan[&#39;virtualGuests&#39;], &#39;subnets&#39;: vlan[&#39;subnets&#39;] } if &#39;attachedNetworkGateway&#39; in vlan: if vlan[&#39;networkSpace&#39;] == &#39;PUBLIC&#39;: gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;publicVlan&#39;][&#39;vlanNumber&#39;] elif vlan[&#39;networkSpace&#39;] == &#39;PRIVATE&#39;: gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;privateVlan&#39;][&#39;vlanNumber&#39;] if gatewayVlan not in orderedVlans[dc][router]: orderedVlans[dc][router][gatewayVlan] = {} orderedVlans[dc][router][gatewayVlan][vlanNumber] = toAppend orderedVlans[dc][router][gatewayVlan][&#39;gateway&#39;] = True else: orderedVlans[dc][router][vlanNumber] = toAppend &amp;quot;&amp;quot;&amp;quot; This bit prints out everything nicely-ish.</description>
    </item>
    
  </channel>
</rss>
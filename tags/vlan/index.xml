<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Vlan on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/vlan/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 09 Jun 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Tag Vlans</title>
      <link>https://softlayer.github.io/python/vlantagging/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/vlantagging/</guid>
      <description>&lt;p&gt;A rough examples of how to add vlans to servers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo


@sldn{SoftLayer_Network_Component}
@sldn{SoftLayer_Network_Component,getNetworkVlanTrunks}

@manager{hardware}
Goes through a list of servers, add the specified vlan to each one
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer

class testVlanTag():
    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;SoftLayer Client&amp;quot;&amp;quot;&amp;quot;
        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.HardwareManager(self.client)    

    def addVlanTrunks(self, id, vlans):
        &amp;quot;&amp;quot;&amp;quot;
            Adds a vlan to a network component
            @param id ID of SoftLayer_Network_Component you want to add vlan to
            @param vlans dictionary of vlan nubmers you want to add
            @sldn{SoftLayer_Network_Component,addNetworkVlanTrunks}
            @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks}
        &amp;quot;&amp;quot;&amp;quot;
        for vlanNumber in vlans:
            print &amp;quot;Adding vlan %s to %s&amp;quot; % (vlanNumber,id)
            result = self.client[&#39;Network_Component&#39;].addNetworkVlanTrunks([{&#39;vlanNumber&#39;:vlanNumber}],id=id)
            vlan = self.client[&#39;Network_Component&#39;].getNetworkVlanTrunks(id=id)


    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
            Runs through a list of server ids and tags them with the proper vlan
            Does both public and private interfaces
        &amp;quot;&amp;quot;&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of ids&amp;quot;&amp;quot;&amp;quot;
        serverIds = [14274503]
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of public vlan nubmers to tag on each server&amp;quot;&amp;quot;&amp;quot;
        publicVlanNumbers = [1125,1110]
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of private vlan nubmers to tag on each server&amp;quot;&amp;quot;&amp;quot;
        privateVlanNumbers = [1110]

        for sid in serverIds:
            hardware = self.mgr.get_hardware(sid)
            privateIP = hardware[&#39;primaryBackendIpAddress&#39;]
            print &amp;quot;Private IP is: %s&amp;quot; % (privateIP) 
            publicIP = hardware[&#39;primaryIpAddress&#39;]
            print &amp;quot;Public IP is: %s&amp;quot; % (publicIP)

            for component in hardware[&#39;networkComponents&#39;]:
                try:
                    if (component[&#39;primaryIpAddress&#39;] == publicIP):
                        continue
                        # self.addVlanTrunks(component[&#39;id&#39;],publicVlanNumbers)
                    elif (component[&#39;primaryIpAddress&#39;] == privateIP):
                        self.addVlanTrunks(component[&#39;id&#39;],privateVlanNumbers)
                    # result = self.client[&#39;Network_Component&#39;].clearNetworkVlanTrunks(id=component[&#39;id&#39;])
                    mask = &#39;networkVlan, networkVlanTrunks, uplinkComponent[networkVlanTrunks]&#39;
                    nic = self.client[&#39;Network_Component&#39;].getObject(id=component[&#39;id&#39;], mask=mask)
                except KeyError:
                    continue

            print &amp;quot;Done with %s &amp;quot; % (hardware[&#39;hostname&#39;])
            print &amp;quot;=====================================&amp;quot;  

if __name__ == &amp;quot;__main__&amp;quot;:
    main = testVlanTag()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>https://softlayer.github.io/python/networktopology/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/networktopology/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()


    def main(self):

        mask = &amp;quot;&amp;quot;&amp;quot;
            mask[attachedNetworkGateway[publicVlan,privateVlan],hardware[fullyQualifiedDomainName],
            network,networkSpace,primaryRouter[hostname],primarySubnet,subnets[networkIdentifier],virtualGuests[fullyQualifiedDomainName]
            ]
        &amp;quot;&amp;quot;&amp;quot;
        orderedVlans = {}
        result = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask)

        &amp;quot;&amp;quot;&amp;quot;
        This bit builds a nicely structured object of the network topology
        &amp;quot;&amp;quot;&amp;quot;
        for vlan in result:
            vlanNumber = vlan[&#39;vlanNumber&#39;]
            router,dc  = vlan[&#39;primaryRouter&#39;][&#39;hostname&#39;].split(&amp;quot;.&amp;quot;)
            if dc not in orderedVlans:
                orderedVlans[dc] = {}
            if router not in orderedVlans[dc]:
                orderedVlans[dc][router] = {}


            toAppend = {
                &#39;hardware&#39;: vlan[&#39;hardware&#39;],
                &#39;virtualGuests&#39;: vlan[&#39;virtualGuests&#39;],
                &#39;subnets&#39;: vlan[&#39;subnets&#39;]

            }

            if &#39;attachedNetworkGateway&#39; in vlan:
                if vlan[&#39;networkSpace&#39;] == &#39;PUBLIC&#39;:
                    gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;publicVlan&#39;][&#39;vlanNumber&#39;]
                elif vlan[&#39;networkSpace&#39;] == &#39;PRIVATE&#39;:
                    gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;privateVlan&#39;][&#39;vlanNumber&#39;]
                if gatewayVlan not in orderedVlans[dc][router]:
                    orderedVlans[dc][router][gatewayVlan] = {}
                orderedVlans[dc][router][gatewayVlan][vlanNumber] = toAppend
                orderedVlans[dc][router][gatewayVlan][&#39;gateway&#39;] = True
            else:
                orderedVlans[dc][router][vlanNumber] = toAppend

        &amp;quot;&amp;quot;&amp;quot;
        This bit prints out everything nicely-ish.
        &amp;quot;&amp;quot;&amp;quot;
        for dc in orderedVlans:
            print(&amp;quot;DC: %s&amp;quot; % dc)
            for router in orderedVlans[dc]:
                print(&amp;quot;\tRouter: %s&amp;quot; % router)
                for vlan in orderedVlans[dc][router]:
                    if &#39;gateway&#39; in orderedVlans[dc][router][vlan]:
                        print(&amp;quot;\t\tGATEWAY VLAN: %s&amp;quot; % vlan )
                        for vlanInner in orderedVlans[dc][router][vlan]:

                            if isinstance(vlanInner, int):
                                print(&amp;quot;\t\t\tVLAN: %s&amp;quot; % vlanInner )
                                if len(orderedVlans[dc][router][vlan][vlanInner][&#39;hardware&#39;]):
                                    print(&amp;quot;\t\t\t  ==SERVERS==&amp;quot;)
                                    for hardware in orderedVlans[dc][router][vlan][vlanInner][&#39;hardware&#39;]:
                                        print(&amp;quot;\t\t\t\t%s&amp;quot; % hardware[&#39;fullyQualifiedDomainName&#39;])
                                if len(orderedVlans[dc][router][vlan][vlanInner][&#39;virtualGuests&#39;]):
                                    print(&amp;quot;\t\t\t  ==VIRTUAL SERVERS==&amp;quot;)
                                    for virtualGuest in orderedVlans[dc][router][vlan][vlanInner][&#39;virtualGuests&#39;]:
                                        print(&amp;quot;\t\t\t\t%s&amp;quot; % virtualGuest[&#39;fullyQualifiedDomainName&#39;])
                                if len(orderedVlans[dc][router][vlan][vlanInner][&#39;subnets&#39;]):
                                    print(&amp;quot;\t\t\t  ==SUBNETS==&amp;quot;)
                                    for subnet in orderedVlans[dc][router][vlan][vlanInner][&#39;subnets&#39;]:
                                        print(&amp;quot;\t\t\t\t%s&amp;quot; % subnet[&#39;networkIdentifier&#39;])
                    else:
                        print(&amp;quot;\t\tVLAN: %s&amp;quot; % vlan )

                    if len(orderedVlans[dc][router][vlan][&#39;hardware&#39;]):
                        print(&amp;quot;\t\t  ==SERVERS==&amp;quot;)
                        for hardware in orderedVlans[dc][router][vlan][&#39;hardware&#39;]:
                            print(&amp;quot;\t\t\t%s&amp;quot; % hardware[&#39;fullyQualifiedDomainName&#39;])
                    if len(orderedVlans[dc][router][vlan][&#39;virtualGuests&#39;]):
                        print(&amp;quot;\t\t  ==VIRTUAL SERVERS==&amp;quot;)
                        for vm in orderedVlans[dc][router][vlan][&#39;virtualGuests&#39;]:
                            print(&amp;quot;\t\t\t%s&amp;quot; % vm[&#39;fullyQualifiedDomainName&#39;])
                    if len(orderedVlans[dc][router][vlan][&#39;subnets&#39;]):
                        print(&amp;quot;\t\t  ==SUBNETS==&amp;quot;)
                        for subnet in orderedVlans[dc][router][vlan][&#39;subnets&#39;]:
                            print(&amp;quot;\t\t\t%s&amp;quot; % subnet[&#39;networkIdentifier&#39;])


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DC: sjc03
    Router: bcr02a
        VLAN: 904
          ==VIRTUAL SERVERS==
            jrh-jump.poc.engineering
          ==SUBNETS==
            10.168.140.0
    Router: bcr01a
        GATEWAY VLAN: 1436
            VLAN: 1440
              ==SERVERS==
                jd-test-5600-srv.secore.com
                jd-cos-testing-sjc03.secore.com
              ==SUBNETS==
                10.161.111.64
          ==SERVERS==
            jd-5600-test.secore.com
          ==SUBNETS==
            10.161.110.0
    Router: fcr02a
        VLAN: 857
          ==VIRTUAL SERVERS==
            jrh-jump.poc.engineering
          ==SUBNETS==
            169.44.183.224
    Router: fcr01a
        VLAN: 1296
          ==SERVERS==
            jd-test-5600-srv.secore.com
            jd-cos-testing-sjc03.secore.com
          ==SUBNETS==
            169.45.115.16
            2607:f0d0:2601:00cc:0000:0000:0000:0000
        VLAN: 1273
          ==SERVERS==
            jd-5600-test.secore.com
          ==SUBNETS==
            169.44.136.64
            2607:f0d0:2601:0065:0000:0000:0000:0000
            2607:f0d0:2601:00ac:0000:0000:0000:0000
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
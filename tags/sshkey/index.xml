<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Sshkey on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/tags/sshkey/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 19 Sep 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Look up an SSH key</title>
      <link>https://softlayer.github.io/go/sshkey_lookup/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/sshkey_lookup/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/filter&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

// The key to look up
const label = &amp;quot;Test Public Key&amp;quot;

func main() {
    sess := session.New()
    service := services.GetAccountService(sess)

    keys, err := service.
        Filter(filter.Build(
            filter.Path(&amp;quot;sshKeys.label&amp;quot;).Eq(label))).
        Mask(&amp;quot;id,label,key,fingerprint,notes&amp;quot;).
        GetSshKeys()

    if err != nil {
        log.Fatal(&amp;quot;Error retrieving SSH key: &amp;quot;, err)
    }

    if len(keys) == 0 {
        log.Fatal(&amp;quot;No ssh key found labeled &amp;quot;, label)
    }

    if len(keys) &amp;gt; 1 {
        log.Fatal(&amp;quot;More than one ssh key found labeled &amp;quot;, label)
    }

    key := keys[0]

    fmt.Printf(&amp;quot;Public Key [%s] found:\n&amp;quot;, label)

    fmt.Println(&amp;quot;\tID:&amp;quot;, *key.Id)
    fmt.Println(&amp;quot;\tFingerprint:&amp;quot;, *key.Fingerprint)
    fmt.Println(&amp;quot;\tKey:&amp;quot;, *key.Key)

    notes := &amp;quot;&amp;quot;
    if key.Notes != nil {
        notes = *key.Notes
    }

    fmt.Println(&amp;quot;\tNotes:&amp;quot;, notes)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Managing SSH Key Pairs with fog-softlayer</title>
      <link>https://softlayer.github.io/fog/keypairs/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/fog/keypairs/</guid>
      <description>

&lt;h3 id=&#34;create-a-connection-to-softlayer-compute-service:4ae51d631ca1e9c4a46ff3036585b000&#34;&gt;Create a connection to SoftLayer Compute Service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fog/softlayer&#39;
@sl = Fog::Compute[:softlayer]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;key-pair-basics:4ae51d631ca1e9c4a46ff3036585b000&#34;&gt;Key Pair Basics&lt;/h3&gt;

&lt;p&gt;Create&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;kp1 = @sl.key_pairs.create(:label =&amp;gt; &#39;my-new-key&#39;, :key =&amp;gt; &#39;ssh-rsa AAAAxbU2lx...&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
kp2 = @sl.key_pairs.new
kp2.label = &#39;my-new-new-key&#39;
kp2.key = &#39;ssh-rsa AAAAxbU2lx...&#39;
kp2.save
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# By id:
kp = @sl.key_pairs.get(123456)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;

# By label:
kp = @sl.key_pairs.by_label(&#39;my-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Destroy&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;kp = @sl.key_pairs.by_label(&#39;my-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
kp.destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;key-pairs-with-servers:4ae51d631ca1e9c4a46ff3036585b000&#34;&gt;Key Pairs with Servers&lt;/h3&gt;

&lt;p&gt;Create a server with one or more key pairs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;the_first_key = @sl.key_pairs.by_label(&#39;my-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
the_second_key = @sl.key_pairs.by_label(&#39;my-other-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;

opts = {
		:flavor_id =&amp;gt; &#39;m1.small&#39;,
		:os_code =&amp;gt; &#39;UBUNTU_LATEST&#39;,
		:datacenter =&amp;gt; &#39;hkg02&#39;,
		:name =&amp;gt; &#39;cphrmky&#39;,
		:key_pairs =&amp;gt; [ the_first_key, the_second_key ]
}
@sl.servers.create(opts)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at the key pairs on a server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;server = @sl.servers.get(12345)
server.key_pairs
# =&amp;gt; [ &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;,
# &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
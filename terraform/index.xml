<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on SoftLayer API</title>
    <link>https://softlayer.github.io/terraform/</link>
    <description>Recent content in Terraform on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Sep 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create a SoftLayer Virtual Guest</title>
      <link>https://softlayer.github.io/terraform/create_vsi/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/terraform/create_vsi/</guid>
      <description>This example will create a virtual guest running the latest offered version of Ubuntu in the Dallas 09 Datacenter.
Configuration File provider &amp;#34;softlayer&amp;#34; {} # Virtual Server created with existing SSH Key already in SoftLayer resource &amp;#34;softlayer_virtual_guest&amp;#34; &amp;#34;terraform&amp;#34; { name = &amp;#34;terraform&amp;#34; domain = &amp;#34;tinylab.info&amp;#34; ssh_keys = [&amp;#34;563523&amp;#34;] image = &amp;#34;UBUNTU_LATEST_64&amp;#34; region = &amp;#34;dal09&amp;#34; public_network_speed = 100 cpu = 1 ram = 1024 local_disk = &amp;#34;false&amp;#34; hourly_billing = &amp;#34;true&amp;#34; } Terraform Plan The terraform plan command will look at any .</description>
    </item>
    
    <item>
      <title>Getting started with SoftLayer and Terraform</title>
      <link>https://softlayer.github.io/terraform/getting_started/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/terraform/getting_started/</guid>
      <description>Overview Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions. Terraform supports several Cloud Service providers by default but is also extensible with plugins written in Go.
The infrastructure Terraform can manage includes low-level components such as compute instances, storage, and networking, as well as high-level components such as DNS entries, SaaS features, etc.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on SoftLayer API</title>
    <link>https://softlayer.github.io/php/</link>
    <description>Recent content in Php on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Sep 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>https://softlayer.github.io/php/createVsi/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/createVsi/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $template = new stdClass(); $template-&amp;gt;location = 1441195; $template-&amp;gt;datacenter-&amp;gt;name = &#39;dal10&#39;; $template-&amp;gt;domain = &#39;example.com&#39;; $template-&amp;gt;startCpus = 2; $template-&amp;gt;maxMemory = 2048; $template-&amp;gt;operatingSystemReferenceCode = &#39;CENTOS_6_64&#39;; $template-&amp;gt;hostname = &#39;testphp&#39;; $template-&amp;gt;localDiskFlag = True; $template-&amp;gt;hourlyBillingFlag = True; $template-&amp;gt;dedicatedAccountHostOnlyFlag = False; $template-&amp;gt;primaryBackendNetworkComponent = 1286783; $template-&amp;gt;primaryNetworkComponent = 1286781; $template-&amp;gt;privateNetworkOnlyFlag = False; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;,null, $apiUsername, $apiKey); $response = $client-&amp;gt;createObject($template); print_r($response); } catch(Exception $e) { echo &#39;Cannot compute.</description>
    </item>
    
    <item>
      <title>Create a snapshot schedule</title>
      <link>https://softlayer.github.io/php/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/enableSnapshots/</guid>
      <description>This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.
&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $storage_id = 11657445; $scheduleType = &#39;WEEKLY&#39;; $retentionCount = &#39;20&#39;; $minute = &#39;1&#39;; $hour = &#39;13&#39;; $dayOfWeek = &#39;SUNDAY&#39;; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage&#39;, $storage_id, $apiUsername, $apiKey); $response = $client-&amp;gt;enableSnapshots($scheduleType, $retentionCount, $minute, $hour, $dayOfWeek); print_r($response); } catch(Exception $e) { echo &#39;Cannot compute.</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>https://softlayer.github.io/php/attach_detach/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/attach_detach/</guid>
      <description>Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.
Running this on a disk that is already attached will move the disk to the new guest.</description>
    </item>
    
    <item>
      <title>Find standard location pricing for a package</title>
      <link>https://softlayer.github.io/php/getStandardPricing/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/getStandardPricing/</guid>
      <description>With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based SoftLayer_Product_Item_Price objects via the API. The following example shows how to get the Standard priceItemId for a package regardless of the location.
&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $packageId = 194; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $apiUsername, $apiKey); $filter = new stdClass(); $filter-&amp;gt;items = new stdClass(); $filter-&amp;gt;items-&amp;gt;prices = new stdClass(); $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId = new stdClass(); $filter-&amp;gt;items-&amp;gt;prices-&amp;gt;locationGroupId-&amp;gt;operation = &#39;is null&#39;; $client-&amp;gt;setObjectFilter($filter); $standardPricing = $client-&amp;gt;getItems(); print_r($standardPricing); } catch (\Exception $e) { die(&#39;Cannot compute.</description>
    </item>
    
    <item>
      <title>Get IPMI info for Bare Metal Server</title>
      <link>https://softlayer.github.io/php/get_ipmi/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/get_ipmi/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $server_id = 882187; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, $server_id, $apiUsername, $apiKey); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;networkManagementIpAddress; $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;username; $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;password; $objectMask-&amp;gt;id; $objectMask-&amp;gt;fullyQualifiedDomainName; $client-&amp;gt;setObjectMask($objectMask); $response = $client-&amp;gt;getHardware($objectMask); print_r($response); } catch(Exception $e) { echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage(); } ?&amp;gt;  </description>
    </item>
    
    <item>
      <title>Create a new Bandwidth Pool</title>
      <link>https://softlayer.github.io/php/createBwPool/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/createBwPool/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $template = new stdClass(); $template-&amp;gt;accountId = xxxx; $template-&amp;gt;bandwidthAllotmentTypeId = 2; $template-&amp;gt;locationGroupId = 1; $template-&amp;gt;name = &#39;newBWpoolPHP&#39;; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;,null, $apiUsername, $apiKey); $response = $client-&amp;gt;createObject($template); print_r($response); } catch(Exception $e) { echo &#39;Cannot compute. Error is: &#39; .</description>
    </item>
    
    <item>
      <title>Create Storage Snapshot</title>
      <link>https://softlayer.github.io/php/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/createSnapshot/</guid>
      <description>Trigger a manual snapshot creation of a Block storage volume.
&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $storageid = &#39;123456&#39;; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey); $response = $client-&amp;gt;createSnapshot(); print_r($response); } catch(Exception $e) { echo &#39;Unable to get Storage credentials: &#39; .</description>
    </item>
    
    <item>
      <title>Get storage credentials for Block Storage</title>
      <link>https://softlayer.github.io/php/storage_credentials/</link>
      <pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/storage_credentials/</guid>
      <description>The following script allows you retrieve the username and password for Performance/Endurance Block storage. If you have not autorized hosts against the storage then you will get some basic information about the Block storage as a result.
&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $storageid = &#39;123456&#39;; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Storage_Iscsi&#39;, $storageid, $apiUsername, $apiKey); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;allowedHardware-&amp;gt;allowedHost-&amp;gt;credential; $objectMask-&amp;gt;allowedVirtualGuests-&amp;gt;allowedHost-&amp;gt;credential; $client-&amp;gt;setObjectMask($objectMask); $response = $client-&amp;gt;getObject(); print_r($response); } catch(Exception $e) { echo &#39;Unable to get Storage credentials: &#39; .</description>
    </item>
    
    <item>
      <title>Adding/Removing Servers in a Bandwidth Pool</title>
      <link>https://softlayer.github.io/php/add_remove_from_pool/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/add_remove_from_pool/</guid>
      <description>The following script allows you to add and remove servers in an existing bandwidth pool. The script requires empty arrays when not specifying a Bare Metal or Virtual Guest Id.
&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $pool_id = 316749; $template = new stdClass(); $template-&amp;gt;hardwareToAdd = array(); $template-&amp;gt;hardwareToRemove = array(); $vm = new stdClass(); $vm-&amp;gt;id =22983449; $template -&amp;gt; cloudsToAdd[] = $vm; $template -&amp;gt; cloudsToRemove = array(); try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Network_Bandwidth_Version1_Allotment&#39;, $pool_id, $apiUsername, $apiKey); $response = $client-&amp;gt;requestVdrContentUpdates($template); print_r($response); } catch(Exception $e) { echo &#39;Cannot compute.</description>
    </item>
    
    <item>
      <title>Creating a support ticket</title>
      <link>https://softlayer.github.io/php/create_ticket/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/create_ticket/</guid>
      <description>Standard support tickets&amp;rsquo; titles must be selected from a pre-determined list of ticket subjects, defined in the SoftLayer_Ticket_Subject service. The following example will output all of the Ticket Subjects:
&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Ticket_Subject&#39;, null, $apiUsername, $apiKey); $subjects = $client-&amp;gt;getAllObjects(); print_r($subjects); ?</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>https://softlayer.github.io/php/cancelservice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/cancelservice/</guid>
      <description>In order to cancel an item or service you must know the billing item ID. In the following example we are retrieving the billing item ID for our Virtual Guest with ID &amp;lsquo;15690533&amp;rsquo;:
&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; $apiUsername = &#39;&#39;; $apiKey = &#39;&#39;; $itemId = &#39;15690533&#39;; # ID of the service or item you want to get the billing ID of $invokeService = &#39;SoftLayer_Virtual_Guest&#39;; try { $billingItemClient = \SoftLayer\SoapClient::getClient($invokeService, $itemId, $apiUsername, $apiKey); $result = $billingItemClient-&amp;gt;getBillingItem(); print_r($result); } catch(Exception $e) { echo &#39;Unable to get billing ID from the item: &#39; .</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/php/getnextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/getnextinvoice/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; $apiUsername = &#39;&#39;; $apiKey = &#39;&#39;; $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey); try { $nextinvoice = $client-&amp;gt;getNextInvoiceTotalAmount(); print_r($nextinvoice); } catch (\Exception $e) { die(&#39;Unable to get next invoice: &#39; . $e-&amp;gt;getMessage()); } ?&amp;gt;  </description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>https://softlayer.github.io/php/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/monthtodate/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; $apiUsername = &#39;&#39;; $apiKey = &#39;&#39;; $guest = &#39;1234567&#39;; # Put your VSI ID here $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest, $apiUsername, $apiKey); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;createDate; $objectMask-&amp;gt;hoursUsed; $objectMask-&amp;gt;hourlyRecurringFee; $objectMask-&amp;gt;currentHourlyCharge; $client-&amp;gt;setObjectMask($objectMask); $response = $client-&amp;gt;getBillingItem(); print_r($response) ?&amp;gt;  </description>
    </item>
    
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>https://softlayer.github.io/php/orderFirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/orderFirewalls/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;quot;ID -&amp;gt; Name \n&amp;quot;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;; } } function getPackageById($id=0, $onlyShow=0, $showPrices=1) { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;quot;ID, KeyName, Description \n&amp;quot;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
    
    <item>
      <title>Order Server with security software</title>
      <link>https://softlayer.github.io/php/orderBareMetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/orderBareMetal/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;quot;ID -&amp;gt; Name \n&amp;quot;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;; } } function getPackageById($id=0, $onlyShow=0, $showPrices = 1) { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;quot;ID, KeyName, Description \n&amp;quot;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://softlayer.github.io/php/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/orderSSLCert/</guid>
      <description>Generating a CSR You will need a csr to make this request, it should be on your local file system.
openssl genrsa -out domain.key 2048 openssl req -new -sha256 -key domain.key -out domain.csr  &amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; } /* * Package 0 is the &amp;quot;Everything else&amp;quot; pacakge, which contains SSL certain. But if you didn&#39;t remember that * this function will get you that information */ function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;quot;ID -&amp;gt; Name \n&amp;quot;; foreach($packages as $package) { print $package-&amp;gt;id .</description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/php/ticket_filter/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/ticket_filter/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $startDate = new DateTime(&#39;2015-05-28T10:05:25-06:00&#39;); $ticketClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey); $filter = new stdClass(); $filter-&amp;gt;tickets = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;operation = &#39;greaterThanDate&#39;; $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options = array(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0] = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;date&#39;; $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;)); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType = new stdClass(); $filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType-&amp;gt;operation = &#39;EMPLOYEE&#39;; $mask = new \SoftLayer\Common\ObjectMask();; $mask-&amp;gt;tickets-&amp;gt;updates; $ticketClient-&amp;gt;setObjectMask($mask); $ticketClient-&amp;gt;setObjectFilter($filter); $updates = $ticketClient-&amp;gt;getTickets(); print_r($updates); //prints out some SOAP debugging print_r($ticketClient-&amp;gt;__getLastRequest()); ?</description>
    </item>
    
    <item>
      <title>Order a vyatta server with placeOrder</title>
      <link>https://softlayer.github.io/php/order_vyatta/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/order_vyatta/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $apiUser, $key); $template = new stdClass(); $template_extra = new stdClass(); $template-&amp;gt;packageId = 174; $template-&amp;gt;location = 224092; $template-&amp;gt;quantity = 1; $template_extra-&amp;gt;os = 21; //vyatta $template_extra-&amp;gt;hostname = &#39;foo-vga-small&#39;; $template_extra-&amp;gt;domain = &#39;softlayer-singapore-test.com&#39;; //These might be invalid now, please double check on ordering $template_extra-&amp;gt;price_id = array(13739, // Single Quad Xeon 1270 3.4G 8M 21010, // 4G 878, // Raid //31693, // Raid 1 1267, // 500G 274, // 1GbE 342, // 20T // 21, // 1IP 56, // Ping/TCP Mon 57, // Notification ); $my_template = new stdClass(); for ($cnt = 0; $cnt &amp;lt; $template-&amp;gt;quantity; $cnt++) { $domain = new stdClass(); $domain-&amp;gt;hostname = &amp;quot;$template_extra-&amp;gt;hostname-$cnt&amp;quot;; $domain-&amp;gt;domain = $template_extra-&amp;gt;domain; $template-&amp;gt;hardware[] = $domain; } if (empty($template-&amp;gt;imageTemplateGlobalIdentifier)) { $template_extra-&amp;gt;price_id[] = $template_extra-&amp;gt;os; } foreach ($template_extra-&amp;gt;price_id as $id) { $price = new stdClass(); $price-&amp;gt;id = $id; $template-&amp;gt;prices[] = $price; } $my_template-&amp;gt;orderContainers = array(); $my_template-&amp;gt;orderContainers[0]-&amp;gt;prices = $template-&amp;gt;prices; $my_template-&amp;gt;orderContainers[0]-&amp;gt;hardware = $template-&amp;gt;hardware; $my_template-&amp;gt;orderContainers[0]-&amp;gt;quantity = $template-&amp;gt;quantity; $my_template-&amp;gt;orderContainers[0]-&amp;gt;location = $template-&amp;gt;location; $my_template-&amp;gt;orderContainers[0]-&amp;gt;packageId = $template-&amp;gt;packageId; print_r($my_template); $result = $client-&amp;gt;verifyOrder($my_template); print_r($result);  </description>
    </item>
    
    <item>
      <title>Get top level billing items for all owned accounts</title>
      <link>https://softlayer.github.io/php/get_invoice_top_level_items/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/get_invoice_top_level_items/</guid>
      <description>With a given date range, get all the invoice details for all of the owned brands, and all of their owned accounts. The $filter can be used to get just a single accounts invoices, just take off the -&amp;gt;allOwnedAccounts bits
&amp;lt;?php require_once __DIR__.&#39;/vendor/autoload.php&#39;; /** * This class structure is mostly used so this can be run as a script. * Most of the print statements use fancy bash color codes to make things pretty */ class topBillingItems { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; $this-&amp;gt;startDate = new DateTime(&#39;2015-02-12T00:00:00&#39;, new DateTimeZone(&#39;CST&#39;)); $this-&amp;gt;endDate = new DateTime(&#39;2015-03-12T00:00:00&#39;, new DateTimeZone(&#39;CST&#39;)); } /*!</description>
    </item>
    
    <item>
      <title>Get Invoices</title>
      <link>https://softlayer.github.io/php/get_invoice/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/get_invoice/</guid>
      <description>&amp;lt;?php require_once __DIR__.&#39;/vendor/autoload.php&#39;; $apiUser = &#39;&#39;; $key = &#39;&#39;; //The date does need to be in this specific format $startDate = new DateTime(&#39;2014-11-01T13:05:25&#39;, new DateTimeZone(&#39;CST&#39;)); $endDate = new DateTime(&#39;2014-12-01T09:53:51&#39;, new DateTimeZone(&#39;CST&#39;)); $accountClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUser, $key); $filter = new stdClass(); $filter-&amp;gt;invoices = new stdClass(); // $filter-&amp;gt;invoices-&amp;gt;accountId = new stdClass(); // $filter-&amp;gt;invoices-&amp;gt;accountId-&amp;gt;operation = &#39;= 391780&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;operation = &#39;betweenDate&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options = array(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0] = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;startDate&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;)); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1] = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;name = &#39;endDate&#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;value = array($endDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;)); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;invoices; $accountClient-&amp;gt;setObjectFilter($filter); $accountClient-&amp;gt;setObjectMask($objectMask); $invoices = $accountClient-&amp;gt;getObject(); print_r($invoices); ?</description>
    </item>
    
    <item>
      <title>Upgrade virtual guest</title>
      <link>https://softlayer.github.io/php/upgrade_virtual_guest/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/upgrade_virtual_guest/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $apiUsername, $apiKey); //The price of the item you want to upgrade to $price1 = new \stdClass(); $price1-&amp;gt;id = 1641; //The virtual guest you want to upgrade $guest = new \stdClass(); $guest-&amp;gt;id = 22983449; $priceClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, 46, $apiUsername, $apiKey); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;description; $objectMask-&amp;gt;capacity; $objectMask-&amp;gt;prices-&amp;gt;id; $objectMask-&amp;gt;categories-&amp;gt;id; $priceClient-&amp;gt;setObjectMask($objectMask); $items = $priceClient-&amp;gt;getObject(); //Shows you what prices are available to select from print_r($items); $upgrade = new \stdClass(); $upgrade-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;; $upgrade-&amp;gt;prices = array($price1); $upgrade-&amp;gt;properties = new \stdClass(); $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow; $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;name = &amp;quot;MAINTENANCE_WINDOW&amp;quot;; $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;value = &amp;quot;now&amp;quot;; $upgrade-&amp;gt;virtualGuests = array($guest); print_r($upgrade); //change to placeOrder($upgrade) to actually make it happen $response = $client-&amp;gt;placeOrder($upgrade); print_r($response); ?</description>
    </item>
    
    <item>
      <title>Get primary ip address record</title>
      <link>https://softlayer.github.io/php/primary_ip_address_record/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/primary_ip_address_record/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $vsi_id = 22983449; try { $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $vsi_id, $apiUsername, $apiKey); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;primaryNetworkComponent; $objectMask-&amp;gt;primaryNetworkComponent-&amp;gt;primaryIpAddressRecord; $client-&amp;gt;setObjectMask($objectMask); $guest = $client-&amp;gt;getObject(); print_r($guest); } catch(Exception $e) { echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage(); } ?</description>
    </item>
    
    <item>
      <title>Required price IDs for package</title>
      <link>https://softlayer.github.io/php/get_required_price_id/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/get_required_price_id/</guid>
      <description>&amp;lt;?php /* follow the installation instructions to get SoftLayer API PHP Client working: https://github.com/softlayer/softlayer-api-php-client#installation */ require_once __DIR__.&#39;/vendor/autoload.php&#39;; use SoftLayer\Common\ObjectMask; use SoftLayer\SoapClient; /** * Set your SoftLayer API username and key. */ $apiUsername = &#39;&#39;; $apiKey = &#39;&#39;; $packageId = 46; $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $apiUsername, $apiKey); try { $mask = new SoftLayer\Common\ObjectMask(); $mask-&amp;gt;configuration-&amp;gt;itemCategory; $client-&amp;gt;setObjectMask($mask); $configs = $client-&amp;gt;getConfiguration(); $requiredCategories = array(); foreach ($configs as $config) { if ($config-&amp;gt;isRequired == 1) { $requiredCategories[$config-&amp;gt;itemCategory-&amp;gt;id][&#39;name&#39;] = $config-&amp;gt;itemCategory-&amp;gt;name; } } $categories = array(); $mask = new SoftLayer\Common\ObjectMask(); $mask-&amp;gt;itemPrices-&amp;gt;categories; $client-&amp;gt;setObjectMask($mask); $prices = $client-&amp;gt;getItemPrices(); foreach ($requiredCategories as $category =&amp;gt; $categoryName) { $i = 0; foreach ($prices as $price) { foreach ($price-&amp;gt;categories as $priceCategory) { if ($priceCategory-&amp;gt;id == $category) { $requiredCategories[$category][&#39;itemPrices&#39;][$i][&#39;id&#39;] = $price-&amp;gt;id; $requiredCategories[$category][&#39;itemPrices&#39;][$i][&#39;description&#39;] = $price-&amp;gt;item-&amp;gt;description; asort($requiredCategories[$category][&#39;itemPrices&#39;][$i]); asort($requiredCategories); $i++; } } } } print_r($requiredCategories); } catch ( Exception $e) { die( $e-&amp;gt;getMessage()); } ?</description>
    </item>
    
    <item>
      <title>Retrieve metric data for a single server.</title>
      <link>https://softlayer.github.io/php/get_monitoring_metrics/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/get_monitoring_metrics/</guid>
      <description>We will call the SoftLayer API to retrieve the monitoring agents, configuration template, and configuration values for a server instance. Then we will demonstrate how to find definitions that you have enabled for metric tracking, how to check that they are enabled, and how to then use them to get metrics for arbitrary dates.
Note that the agent, section, sub-section, and definition names have already been pre-selected and in order for this example to work your server must have these configuration options enabled and be able to retrieve metrics for them through the portal.</description>
    </item>
    
  </channel>
</rss>
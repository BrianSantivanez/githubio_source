<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 01 Feb 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Release notes: February 1, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160201/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160201/</guid>
      <description>

&lt;h4 id=&#34;portal:d28a490ace8738fb1cca6353e9a62ed3&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was preventing the portal from properly enabling Private VLAN spanning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:d28a490ace8738fb1cca6353e9a62ed3&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Exposed &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer/getAllowedHardwareIds&#34;&gt;getAllowedHardwareIds&lt;/a&gt; and &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer/getAllowedVirtualGuestIds&#34;&gt;getAllowedVirtualGuestIds&lt;/a&gt; to the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer&#34;&gt;SoftLayer_User_Customer&lt;/a&gt; service. This helps with API timeout issues on accounts with a large amount of Bare Metal Servers and or Virtual Guests.&lt;/li&gt;
&lt;li&gt;Resolved an issue where calling &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest_Block_Device_Template_Group/denySharingAccess&#34;&gt;denySharingAccess&lt;/a&gt; would cause an image template to go in to an inconsistent state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:d28a490ace8738fb1cca6353e9a62ed3&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added the ability to specify userdata to &lt;a href=&#34;http://www.softlayer.com/info/hourly-bare-metal-servers&#34;&gt;Hourly Bare Metal Servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For dedicated firewalls, the private network bandwidth has been increased from 1.25 GB to unlimited. For shared firewalls, the private network bandwidth has been increased from 1.25GB to 10GB.&lt;/li&gt;
&lt;li&gt;Enabled the automatic migration of local disk VSIs on disabled hosts on VSI power off or reboot.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>https://softlayer.github.io/php/cancelservice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/cancelservice/</guid>
      <description>&lt;p&gt;In order to cancel an item or service you must know the billing item ID. In the following example we are retrieving the billing item ID for our Virtual Guest with ID &amp;lsquo;15690533&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$itemId = &#39;15690533&#39;; # ID of the service or item you want to get the billing ID of
$invokeService = &#39;SoftLayer_Virtual_Guest&#39;;

try {
     $billingItemClient = \SoftLayer\SoapClient::getClient($invokeService, $itemId, $apiUsername, $apiKey);
     $result = $billingItemClient-&amp;gt;getBillingItem();
     print_r($result);

 } catch(Exception $e) {
     echo &#39;Unable to get billing ID from the item: &#39; . $e-&amp;gt;getMessage();
 }

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the billing item ID we can plug it in to the cancelservice code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$billingitemId = &#39;1234567&#39;; # Billing ID of the service or item you want to cancel obtained from the previous example
$billingItemService = &#39;SoftLayer_Billing_Item&#39;;

try {
     $billingItemClient = \SoftLayer\SoapClient::getClient($billingItemService, $itemId, $apiUsername, $apiKey);
     $result = $billingItemClient-&amp;gt;cancelService();
     print_r($result);

 } catch(Exception $e) {
     echo &#39;Unable to cancel the item: &#39; . $e-&amp;gt;getMessage();
 }

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/php/getnextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/getnextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey);

try {
    $nextinvoice = $client-&amp;gt;getNextInvoiceTotalAmount();
    print_r($nextinvoice);
}  catch (\Exception $e) {
    die(&#39;Unable to get next invoice: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>https://softlayer.github.io/php/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/monthtodate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;
$guest = &#39;1234567&#39;; # Put your VSI ID here

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest, $apiUsername, $apiKey);
$objectMask = new \SoftLayer\Common\ObjectMask();
$objectMask-&amp;gt;createDate;
$objectMask-&amp;gt;hoursUsed;
$objectMask-&amp;gt;hourlyRecurringFee;
$objectMask-&amp;gt;currentHourlyCharge;

$client-&amp;gt;setObjectMask($objectMask);
$response = $client-&amp;gt;getBillingItem();
print_r($response)
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>https://softlayer.github.io/ruby/cancelservice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/cancelservice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2
require &#39;pp&#39; # used to display results

# Create a client
client = SoftLayer::Client.new

# add your servers&#39; id, can be found with the following script: https://softlayer.github.io/ruby/list_instances/
id_of_virtual_server_to_cancel = FILL_IN_YOUR_SERVERS_ID
begin
   # Substitute :Virtual_Guest for :Hardware_Server if you want to cancel a bare metal server
   item = client[:Virtual_Guest].object_mask(&amp;quot;mask[billingItem[id]]&amp;quot;).object_with_id(id_of_virtual_server_to_cancel).getObject
   rescue XMLRPC::FaultException # error will be triggered if item doesn&#39;t exist
   item = false
end
#
# # Then invoke [cancelService](http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelService) or [cancelItem](http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelItem)
if item and item[&#39;billingItem&#39;] and client[:Billing_Item].object_with_id(item[&#39;billingItem&#39;][&#39;id&#39;]).cancelService()
   puts &amp;quot;Cancelled service of #{id_of_virtual_server_to_cancel}&amp;quot;
 else
   puts &amp;quot;#{id_of_virtual_server_to_cancel} Doesn&#39;t exist or is already cancelled&amp;quot;
 end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find a billing item from a provisioned product</title>
      <link>https://softlayer.github.io/ruby/billingfromproduct/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/billingfromproduct/</guid>
      <description>&lt;p&gt;In the following example we are looking for the Billing Item of an Endurance Storage volume with an ID of 1234567.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# add your network storage id, it can be found by doing this call: http://sldn.softlayer.com/reference/services/SoftLayer_Account/getNasNetworkStorage
network_storage_id = 1234567
#
item = client[:Network_Storage].object_mask(&amp;quot;mask[billingItem[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]]&amp;quot;).object_with_id(network_storage_id).getObject
pp item[&#39;billingItem&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Calculating month-to-date cost of a Virtual_Guest</title>
      <link>https://softlayer.github.io/ruby/monthtodate/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/monthtodate/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2
require &#39;pp&#39; # used to display results

# Create a client
client = SoftLayer::Client.new

# add your server id, can be found with the following script: https://softlayer.github.io/ruby/list_instances/
virtual_server_id = 12345678
item = client[:Virtual_Guest].object_mask(&amp;quot;mask[billingItem[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]]&amp;quot;).object_with_id(virtual_server_id).getObject
puts &amp;quot;Billing Item for Virtual Server:&amp;quot;
pp item[&#39;billingItem&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:a8ec6ac9c09d88a94b1b5bf10393284e&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Billing Item for Virtual Server:
{&amp;quot;createDate&amp;quot;=&amp;gt;&amp;quot;2016-01-29T12:23:43-06:00&amp;quot;,
 &amp;quot;currentHourlyCharge&amp;quot;=&amp;gt;&amp;quot;.023&amp;quot;,
 &amp;quot;hourlyRecurringFee&amp;quot;=&amp;gt;&amp;quot;.023&amp;quot;,
 &amp;quot;hoursUsed&amp;quot;=&amp;gt;&amp;quot;1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/ruby/nextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/nextinvoice/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# SoftLayer library will look to see if these global variables are set when making a connection
# more information here: https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L58

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new

total_amount = client[&#39;Account&#39;].getNextInvoiceTotalAmount
puts &amp;quot;Next invoice total amount: #{total_amount}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:5b3b7b946e37497a1fd07dfb3f249be6&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Next invoice total amount: 250.26
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/reload_hardware/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
        Will reload the operating system with a new imageTemplate, 
        along with a set of sshKeys. This will erease all data.
        &amp;quot;&amp;quot;&amp;quot;
        # Change these IDs
        imageId = 1234567
        sshKey1 = 123
        sshKey2 = 456
        serverId = 102938
        config = {
            &#39;imageTemplateId&#39;: imageId, 
            &#39;sshKeyIds&#39;: [sshKey1, sshKey2]
        }

        output = client[&#39;Hardware_Server&#39;].reloadOperatingSystem(&#39;FORCE&#39;, config, id=serverId)

        pp(config)
        print &amp;quot;RESULT\n&amp;quot;
        pp(output)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 25, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160125/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160125/</guid>
      <description>

&lt;h4 id=&#34;portal:13fb68d69deb9ad1d96bbcde6c031d70&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue where internal technical support updates were being sent in the customer facing section of tickets.&lt;/li&gt;
&lt;li&gt;Fixed an issue with Advanced Monitoring alert emails not being sent to customers.&lt;/li&gt;
&lt;li&gt;When the option to order a &amp;lsquo;Dedicated Firewall (Dedicated) Option&amp;rsquo; is selected, &amp;lsquo;Bare Metal Server Firewall Option&amp;rsquo; is now deselected to prevent the order form from producing the error when continuing to checkout. Conversely, if a &amp;lsquo;Bare Metal Server Firewall Option&amp;rsquo; is selected, the &amp;lsquo;Dedicated Firewall (Dedicated) Option&amp;rsquo; will be deselected.&lt;/li&gt;
&lt;li&gt;Expired quotes that contain products from specific packages: 56, 126, 142, 143, 146, 147, 148, 158, 234. The status of the quote will be updated to DELETED.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:13fb68d69deb9ad1d96bbcde6c031d70&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Exposed secureTransportCiphers and secureTransportCipherCount as Data Types for &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Application_Delivery_Controller_LoadBalancer_VirtualIpAddress&#34;&gt;SoftLayer_Network_Application_Delivery_Controller_LoadBalancer_VirtualIpAddress&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Exposed &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Application_Delivery_Controller_LoadBalancer_VirtualIpAddres-15&#34;&gt;getAvailableSecureTransportCiphers&lt;/a&gt; which yields a list of the SSL/TLS encryption ciphers that are currently supported on a virtual IP address instance.&lt;/li&gt;
&lt;li&gt;The API now allows for customer configuration of SSL ciphers to be used on a Load Balancer via &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Application_Delivery_Controller_LoadBalancer_VirtualIpAddress/e&#34;&gt;SoftLayer_Network_Application_Delivery_Controller_LoadBalancer_VirtualIpAddress::editObject()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:13fb68d69deb9ad1d96bbcde6c031d70&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Made a change to allow customers to have multiple abuse email contacts.&lt;/li&gt;
&lt;li&gt;Resolved an issue in which a subnet may be incorrectly reclaimed when only management interfaces are utilizing addresses.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 18, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160118/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160118/</guid>
      <description>

&lt;h4 id=&#34;portal:a9bef24bca82e17ba08525ff3da49072&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue where &lt;a href=&#34;http://knowledgelayer.softlayer.com/faq/what-data-transfer&#34;&gt;Data Transfer&lt;/a&gt; tickets were not populating with ship date any notes and/or tracking details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:a9bef24bca82e17ba08525ff3da49072&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:a9bef24bca82e17ba08525ff3da49072&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed a bug where the incorrect storage volume name was reported in snapshot threshold alert tickets.&lt;/li&gt;
&lt;li&gt;Corrected an issue with FreeBSD provisions that was causing non-swap space to be set as EXT3 instead of UFS.&lt;/li&gt;
&lt;li&gt;Resolved an issue where license updates for RedHat were not properly occurring on VSI&amp;rsquo;s.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 11, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160111/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160111/</guid>
      <description>

&lt;h4 id=&#34;portal:9faa0152f3a20dd613f7cfc7715e7054&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Replaced the 2014 SOC1 report with the 2015 SOC1 report for users to download from the portal.&lt;/li&gt;
&lt;li&gt;Fixed an issue where some tickets were not showing as updated by the customer.&lt;/li&gt;
&lt;li&gt;Fixed an issue where the create date was not set when a new DNS domain was created from subnet page.&lt;/li&gt;
&lt;li&gt;Fixed an issue where error messages from a previous submission are not cleared when a new Catalyst user submits the signup form.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:9faa0152f3a20dd613f7cfc7715e7054&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Deprecating &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getAvailableLocations&#34;&gt;getAvailableLocations()&lt;/a&gt; and &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getLocations&#34;&gt;getLocations()&lt;/a&gt;. Customers should now use &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getRegions&#34;&gt;getRegions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;API scripts need to be modified to use the following new packages instead of the retired packages listed below. Orders for the retired packages will no longer be available after January 18, 2016.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Retired Packages&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;New Packages&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;56 Quad Processor Multi Core Nehalem EX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;269 Quad E7-2600 v3 (6 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;126  Single Xeon 1200 Series (Sandy Bridge / Haswell)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;255  Single E3-1270 (4 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;126  Single Xeon 1200 Series (Sandy Bridge / Haswell)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;257  Single E3-1270 v3 (4 drives) Haswell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;142  Single Xeon 2000 Series (Sandy Bridge)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;259  Single E5-2600 (4 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;143  Dual Xeon 2000 Series (Sandy Bridge)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;273  Dual E5-2600 (4 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;143  Dual Xeon 2000 Series (Sandy Bridge)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;253  Dual E5-2600 v3 (4 drives) Haswell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;146  Sandy Bridge 1270&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;261  Single E3-1270 (2 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;147  Specialty Server: 4u Mass Storage Dual Xeon 2000 (Sandy Bridge) Series&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;263  Dual E5-2600 (36 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;147  Specialty Server: 4u Mass Storage Dual Xeon 2000 (Sandy Bridge) Series&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;248  Dual E5-2600 v3 (36 drives) Haswell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;148  Specialty Server: 2u Mass Storage Dual Xeon 2000 (Sandy Bridge) Series&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;265  Dual E5-2600 (12 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;148  Specialty Server: 2u Mass Storage Dual Xeon 2000 (Sandy Bridge) Series&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;251  Dual E5-2600 v3 (12 drives) Haswell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;158  Quad Xeon 4000 Series (Sandy Bridge)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;267  Quad E5-4600 (24 drives) Sandy Bridge&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;234  Quad Xeon E7-4800 v2 (Ivy Bridge) Series&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;271  Quad E7-4800 v2 (24 drives) Ivy Bridge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Managing SSH Key Pairs with fog-softlayer</title>
      <link>https://softlayer.github.io/fog/keypairs/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/fog/keypairs/</guid>
      <description>

&lt;h3 id=&#34;create-a-connection-to-softlayer-compute-service:4ae51d631ca1e9c4a46ff3036585b000&#34;&gt;Create a connection to SoftLayer Compute Service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fog/softlayer&#39;
@sl = Fog::Compute[:softlayer]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;key-pair-basics:4ae51d631ca1e9c4a46ff3036585b000&#34;&gt;Key Pair Basics&lt;/h3&gt;

&lt;p&gt;Create&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;kp1 = @sl.key_pairs.create(:label =&amp;gt; &#39;my-new-key&#39;, :key =&amp;gt; &#39;ssh-rsa AAAAxbU2lx...&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
kp2 = @sl.key_pairs.new
kp2.label = &#39;my-new-new-key&#39;
kp2.key = &#39;ssh-rsa AAAAxbU2lx...&#39;
kp2.save
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# By id:
kp = @sl.key_pairs.get(123456)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;

# By label:
kp = @sl.key_pairs.by_label(&#39;my-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Destroy&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;kp = @sl.key_pairs.by_label(&#39;my-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
kp.destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;key-pairs-with-servers:4ae51d631ca1e9c4a46ff3036585b000&#34;&gt;Key Pairs with Servers&lt;/h3&gt;

&lt;p&gt;Create a server with one or more key pairs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;the_first_key = @sl.key_pairs.by_label(&#39;my-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
the_second_key = @sl.key_pairs.by_label(&#39;my-other-new-key&#39;)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;

opts = {
		:flavor_id =&amp;gt; &#39;m1.small&#39;,
		:os_code =&amp;gt; &#39;UBUNTU_LATEST&#39;,
		:datacenter =&amp;gt; &#39;hkg02&#39;,
		:name =&amp;gt; &#39;cphrmky&#39;,
		:key_pairs =&amp;gt; [ the_first_key, the_second_key ]
}
@sl.servers.create(opts)
# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at the key pairs on a server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;server = @sl.servers.get(12345)
server.key_pairs
# =&amp;gt; [ &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;,
# &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Interact with SoftLayer Object Storage</title>
      <link>https://softlayer.github.io/fog/storage/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/fog/storage/</guid>
      <description>

&lt;h3 id=&#34;create-a-connection-to-softlayer-object-storage:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;Create a connection to SoftLayer Object Storage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fog/softlayer&#39;
@sl = Fog::Storage[:softlayer]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-the-models:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;Use the Models&lt;/h4&gt;

&lt;p&gt;List directories/containers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dirs = @sl.directories
dirs.size # the number of directories      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a directory/container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@sl.directories.create(:key =&amp;gt; &#39;a-container&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a directory/container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories.get(&#39;a-container&#39;)
dir.key  # =&amp;gt; &#39;a-container&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories.get(&#39;a-container&#39;)
# Pass a string.
dir.files.create(:key =&amp;gt; &#39;data.txt&#39;, :body =&amp;gt; &#39;The quick brown fox jumps over the lazy dog.&#39;)
# From a file.
dir.files.create(:key =&amp;gt; &#39;file-data.txt&#39;, :body =&amp;gt; File.open(&#39;/path/to/file-data.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retrieve an existing file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories.get(&#39;a-container&#39;)
file = dir.files.get(&#39;data.txt&#39;)
file.body # =&amp;gt; &#39;The quick brown fox jumps over the lazy dog.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy a file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;file  = @sl.directories.get(&#39;a-container&#39;).files.get(&#39;data.txt&#39;)
copy = file.copy(&#39;a-container&#39;, &#39;copy-of-data.txt&#39;)
copy.body # =&amp;gt; &#39;The quick brown fox jumps over the lazy dog.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the files in a directory/container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@sl.directories.get(&#39;a-container&#39;).files
# =&amp;gt; [
#    &amp;lt;Fog::Storage::Softlayer::File
#  key=&amp;quot;a-container/data.txt&amp;quot;,
#  content_length=43,
#  content_type=&amp;quot;text/plain&amp;quot;,
#  content_disposition=nil,
#  etag=&amp;quot;a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1&amp;quot;,
#  last_modified=1970-00-00 00:00:00 -0000,
#  access_control_allow_origin=nil,
#  origin=nil
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a signed [temporary] url for a file/object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;### NOTE
## Be sure you have set a meta_temp_url_key for your account at least once before
## @sl.post_set_meta_temp_url_key(&#39;someSortaSecretStuffHere&#39;)
### /NOTE

file = @sl.directories.get(&#39;a-container&#39;).files.get(&#39;data.txt&#39;)
file.url(Time.now + 300) # url expires in 5 minutes
# =&amp;gt; &amp;quot;https://dal05.objectstorage.softlayer.net:443/v1/AUTH_1a1a1a1a-1a1a-1a1a-1a1a-1a1a1a1a1a1a/a-container/data.txt?temp_url_sig=1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a&amp;amp;temp_url_expires=1401901023&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete files/objects from a directory/container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = @sl.directories(&#39;a-container&#39;)
dir.files.get(&#39;data.txt&#39;).destroy
dir.files.get(&#39;file-data.txt&#39;).destroy
dir.files.get(&#39;copy-of-data.txt&#39;).destroy
# Must destroy all files/objects before destroying container.
dir.destroy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Managing VSI&#39;s and Bare Metal servers  with fog-softlayer</title>
      <link>https://softlayer.github.io/fog/compute/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/fog/compute/</guid>
      <description>

&lt;h3 id=&#34;create-a-connection-to-softlayer-compute-service:dcd0bbf0b89f9e25c080385385922e68&#34;&gt;Create a connection to SoftLayer Compute Service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	require &#39;fog/softlayer&#39;
	@sl = Fog::Compute[:softlayer]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-the-models:dcd0bbf0b89f9e25c080385385922e68&#34;&gt;Use the Models&lt;/h3&gt;

&lt;p&gt;List all servers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   @sl.servers # list all servers
   @sl.servers.size # get a count of all servers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a server&amp;rsquo;s details&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   server = @sl.servers.get(&amp;lt;server id&amp;gt;)
   server.name # =&amp;gt; &#39;hostname.example.com&#39;
   server.created_at # =&amp;gt; DateTime the server was created
   server.state # =&amp;gt; &#39;Running&#39;, &#39;Stopped&#39;, &#39;Terminated&#39;, etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a server&amp;rsquo;s details using ip address&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   server = @sl.servers.get_by_ip(&amp;lt;server ip&amp;gt;)
   server.name # =&amp;gt; &#39;hostname.example.com&#39;
   server.created_at # =&amp;gt; DateTime the server was created
   server.state # =&amp;gt; &#39;Running&#39;, &#39;Stopped&#39;, &#39;Terminated&#39;, etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get all servers tagged with certain tags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	prod_fe_servers = @sl.servers.tagged_with([&#39;production&#39;, &#39;frontend&#39;])
	# =&amp;gt; [ &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;,
	#	&amp;lt;Fog::Compute::Softlayer::Server&amp;gt;,
	#	&amp;lt;Fog::Compute::Softlayer::Server&amp;gt;,
	#	&amp;lt;Fog::Compute::Softlayer::Server&amp;gt;,
	#	&amp;lt;Fog::Compute::Softlayer::Server&amp;gt;,]		
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a server&amp;rsquo;s public/frontend VLAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	server = @sl.servers.get(12345)
	server.vlan
	# =&amp;gt; &amp;lt;Fog::Network::Softlayer::Network
    #	id=123456,
	#   name=&#39;frontend-staging-vlan&#39;,
	#   modify_date=&amp;quot;2014-02-22T12:42:31-06:00&amp;quot;,
	#   note=nil,
	#   tags=[&#39;sparkle&#39;, &#39;motion&#39;],
	#   type=&amp;quot;STANDARD&amp;quot;,
	#   datacenter=    &amp;lt;Fog::Network::Softlayer::Datacenter
	#     id=168642,
	#     long_name=&amp;quot;San Jose 1&amp;quot;,
	#     name=&amp;quot;sjc01&amp;quot;
	#   &amp;gt;,
	#   network_space=&amp;quot;PUBLIC&amp;quot;,
	#   router={&amp;quot;hostname&amp;quot;=&amp;gt;&amp;quot;fcr01a.sjc01&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;82412, &amp;quot;datacenter&amp;quot;=&amp;gt;{&amp;quot;id&amp;quot;=&amp;gt;168642, &amp;quot;longName&amp;quot;=&amp;gt;&amp;quot;San Jose 1&amp;quot;, &amp;quot;name&amp;quot;=&amp;gt;&amp;quot;sjc01&amp;quot;}}
  	# &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a server&amp;rsquo;s private/backend VLAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	server = @sl.servers.get(12345)
	server.private_vlan
	# =&amp;gt;  &amp;lt;Fog::Network::Softlayer::Network
	#    id=123456,
	#    name=&#39;backend-staging-vlan&#39;,
	#    modify_date=&amp;quot;2014-02-22T12:42:33-06:00&amp;quot;,
	#    note=nil,
	#    tags=[],
	#    type=&amp;quot;STANDARD&amp;quot;,
	#    datacenter=    &amp;lt;Fog::Network::Softlayer::Datacenter
	#	    id=168642,
	#    	long_name=&amp;quot;San Jose 1&amp;quot;,
	#    	name=&amp;quot;sjc01&amp;quot;
	#   &amp;gt;,
	#   network_space=&amp;quot;PRIVATE&amp;quot;,
    #	router={&amp;quot;hostname&amp;quot;=&amp;gt;&amp;quot;bcr01a.sjc01&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;82461, &amp;quot;datacenter&amp;quot;=&amp;gt;{&amp;quot;id&amp;quot;=&amp;gt;168642, &amp;quot;longName&amp;quot;=&amp;gt;&amp;quot;San Jose 1&amp;quot;, &amp;quot;name&amp;quot;=&amp;gt;&amp;quot;sjc01&amp;quot;}}
  	# &amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a server&amp;rsquo;s tags&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;		server = @sl.servers.get(12345)
		server.tags
		# =&amp;gt; [&#39;production&#39;, &#39;frontend&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add tags to a server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;		server = @sl.servers.get(12345)
		server.tags
		# =&amp;gt; [&#39;production&#39;, &#39;frontend&#39;]
		server.add_tags([&#39;sparkle&#39;, &#39;motion&#39;]
		# =&amp;gt; true
		server.tags
		# =&amp;gt; [&#39;production&#39;, &#39;frontend&#39;, &#39;sparkle&#39;, &#39;motion&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete tags from a server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;		server = @sl.servers.get(12345)
		server.tags
		# =&amp;gt; [&#39;production&#39;, &#39;frontend&#39;, &#39;sparkle&#39;, &#39;motion&#39;]
		server.delete_tags([&#39;sparkle&#39;, &#39;motion&#39;]
		# =&amp;gt; true
		server.tags
		# =&amp;gt; [&#39;production&#39;, &#39;frontend&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a new VM with flavor (simple).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     opts = {
     	:flavor_id =&amp;gt; &amp;quot;m1.small&amp;quot;,
     	:image_id =&amp;gt; &amp;quot;23f7f05f-3657-4330-8772-329ed2e816bc&amp;quot;,
     	:name =&amp;gt; &amp;quot;test&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;
     }
     new_server = @sl.servers.create(opts)
     new_server.id # =&amp;gt; 1337
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a new Bare Metal instance with flavor (simple).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     opts = {
     	:flavor_id =&amp;gt; &amp;quot;m1.medium&amp;quot;,
     	:os_code =&amp;gt; &amp;quot;UBUNTU_LATEST&amp;quot;,
     	:name =&amp;gt; &amp;quot;test1&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;,
     	:bare_metal =&amp;gt; true
     }
     @sl.servers.create(opts)
     new_server.id # =&amp;gt; 1338
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a new VM without flavor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   	opts = {
     	:cpu =&amp;gt; 2,
     	:ram =&amp;gt; 2048,     	
     	:disk =&amp;gt; [{&#39;device&#39; =&amp;gt; 0, &#39;diskImage&#39; =&amp;gt; {&#39;capacity&#39; =&amp;gt; 100 } }],
     	:ephemeral_storage =&amp;gt; true,
     	:domain =&amp;gt; &amp;quot;not-my-default.com&amp;quot;,
     	:name =&amp;gt; &amp;quot;hostname&amp;quot;,
     	:os_code =&amp;gt; &amp;quot;UBUNTU_LATEST&amp;quot;,
     	:name =&amp;gt; &amp;quot;test2&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;     
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a Bare Metal Instance without a flavor&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   opts = {
     	:cpu =&amp;gt; 8,
     	:ram =&amp;gt; 16348,     	
     	:disk =&amp;gt; {&#39;capacity&#39; =&amp;gt; 500 },
     	:ephemeral_storage =&amp;gt; true,
     	:domain =&amp;gt; &amp;quot;not-my-default.com&amp;quot;,
     	:name =&amp;gt; &amp;quot;hostname&amp;quot;,
     	:os_code =&amp;gt; &amp;quot;UBUNTU_LATEST&amp;quot;,
     	:name =&amp;gt; &amp;quot;test2&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;,
     	:bare_metal =&amp;gt; true
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a server with one or more key pairs (also see &lt;a href=&#34;https://github.com/fog/fog-softlayer/blob/master/examples/key_pairs.md&#34;&gt;key_pairs examples on Github&lt;/a&gt; )&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	the_first_key = @sl.key_pairs.by_label(&#39;my-new-key&#39;)
	# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;
	the_second_key = @sl.key_pairs.by_label(&#39;my-other-new-key&#39;)
	# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::KeyPair&amp;gt;

	opts = {
		:flavor_id =&amp;gt; &#39;m1.small&#39;,
		:os_code =&amp;gt; &#39;UBUNTU_LATEST&#39;,
		:datacenter =&amp;gt; &#39;hkg02&#39;,
		:name =&amp;gt; &#39;cphrmky&#39;,
		:key_pairs =&amp;gt; [ the_first_key, the_second_key ]
	}
	@sl.servers.create(opts)
	# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete a VM or Bare Metal instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   	  @sl.servers.get(&amp;lt;server id&amp;gt;).destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a Server (works the same for VM and Bare Metal) into a specific VLAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	# I want to launch another server to hold docker containers into my existing staging VLANs
	# I&#39;ll start by getting a staging server so I can use its vlans as a reference.
	staging_server = @sl.servers.tagged_with([&#39;staging&#39;, &#39;docker&#39;]).first # =&amp;gt; &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;

	opts = {
	  :flavor_id =&amp;gt; &#39;m1.large&#39;,
	  :image_id =&amp;gt; &#39;23f7f05f-3657-4330-8772-329ed2e816bc&#39;,  # Ubuntu Docker Image
	  :domain =&amp;gt; &#39;staging.example.com&#39;,
	  :datacenter =&amp;gt; &#39;ams01&#39;, # This needs to be the same datacenter as the target VLAN of course.
	  :name =&amp;gt; &#39;additional-docker-host&#39;,
	  :vlan =&amp;gt; staging.server.vlan, # Passing in a &amp;lt;Fog::Network::Softlayer::Network&amp;gt; object.
	  :private_vlan =&amp;gt; staging.server.private_vlan.id, # Passing in an Integer (the id of a network/vlan) works too.
	}

	new_staging_server = @sl.servers.create(opts)
	# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a Server with only a private network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	opts = {
	  :flavor_id =&amp;gt; &#39;m1.large&#39;,
	  :os_code =&amp;gt; &#39;UBUNTU_LATEST&#39;,
	  :domain =&amp;gt; &#39;example.com&#39;,
	  :datacenter =&amp;gt; &#39;ams01&#39;,
	  :name =&amp;gt; &#39;private-eye&#39;,
	  :private_network_only =&amp;gt; true
	}

	private_vm = @sl.servers.create(opts)
	# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a Server with 1Gbps network components.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	opts = {
	  :flavor_id =&amp;gt; &#39;m1.large&#39;,
	  :os_code =&amp;gt; &#39;UBUNTU_LATEST&#39;,
	  :domain =&amp;gt; &#39;example.com&#39;,
	  :datacenter =&amp;gt; &#39;wdc01&#39;,
	  :name =&amp;gt; &#39;speedy-tubes&#39;,
	  :network_components =&amp;gt; [ {:speed =&amp;gt; 1000 } ],
	}

	private_vm = @sl.servers.create(opts)
	# =&amp;gt; &amp;lt;Fog::Compute::Softlayer::Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provision a Server with user metadata.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     opts = {
      :flavor_id =&amp;gt; &amp;quot;m1.small&amp;quot;,
      :image_id =&amp;gt; &amp;quot;23f7f05f-3657-4330-8772-329ed2e816bc&amp;quot;,
      :name =&amp;gt; &amp;quot;test&amp;quot;,
      :datacenter =&amp;gt; &amp;quot;ams01&amp;quot;,
      :user_data =&amp;gt; &amp;quot;my-custom-user-metadata&amp;quot;
     }

     new_server = @sl.servers.create(opts)
     new_server.user_data # =&amp;gt; &amp;quot;my-custom-user-metadata&amp;quot;
     new_server.user_data = &amp;quot;new-user-metadata&amp;quot;
     new_server.user_data # =&amp;gt; &amp;quot;new-user-metadata&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start, Stop, and Reboot a existing server (works the same for VMs and Bare Metal).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;		srvr = @sl.servers.get(123456)
		srvr.ready? # true

		srvr.reboot # true

		srvr.stop # true
		srvr.ready? # false
		srvr.state # &amp;quot;Halted&amp;quot;

		srvr.start # true
		srvr.ready # true
		srvr.state # &amp;quot;Running&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get all options to create a bare metal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   @sl.servers.get_bm_create_options
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get all options to create a VM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   @sl.servers.get_vm_create_options
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get all active tickets of a server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    server = @sl.servers.get(123456)
    server.get_active_tickets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get all users of a server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    server = @sl.servers.get(123456)
    server.get_users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get all upgrade options of a server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    server = @sl.servers.get(123456)
    server.get_upgrade_options
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update a virtual guest server.
Hash keys are the categories and the hash values are the capacity. You can retrieve them from upgrade options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    new_attributes = {
      :guest_core =&amp;gt; 2,
      :ram =&amp;gt; 1, # this value is in GBs
      :port_speed =&amp;gt; 100, # this value is in MPBSs
      :time =&amp;gt; Time.now + 5.minutes # if you don&#39;t specify, time will be equal to now
    }

    server = @sl.servers.get(123456)
    server.update(new_attributes)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update a bare metal server.
Hash keys are the categories and the hash values are the capacity. You can retrieve them from upgrade options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    new_attributes = {
      :ram =&amp;gt; 4, # this value is in GBs
      :port_speed =&amp;gt; 100, # this value is in MPBSs
      :maintenance_window =&amp;gt; 1111 # should see examples/network &amp;quot;Get a datacenter maintenance windows.&amp;quot;
    }

    server = @sl.servers.get(123456)
    server.update(new_attributes)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate an order template for VM with flavor (simple).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     opts = {
     	:flavor_id =&amp;gt; &amp;quot;m1.small&amp;quot;,
     	:image_id =&amp;gt; &amp;quot;23f7f05f-3657-4330-8772-329ed2e816bc&amp;quot;,
     	:name =&amp;gt; &amp;quot;test&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;
     }
     new_server = @sl.servers.new(opts)
     new_server.generate_order_template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate an order template for Bare Metal instance with flavor (simple).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     opts = {
     	:flavor_id =&amp;gt; &amp;quot;m1.medium&amp;quot;,
     	:os_code =&amp;gt; &amp;quot;UBUNTU_LATEST&amp;quot;,
     	:name =&amp;gt; &amp;quot;test1&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;,
     	:bare_metal =&amp;gt; true
     }
     new_server = @sl.servers.new(opts)
     new_server.generate_order_template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate an order template for VM without flavor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   	opts = {
     	:cpu =&amp;gt; 2,
     	:ram =&amp;gt; 2048,
     	:disk =&amp;gt; [{&#39;device&#39; =&amp;gt; 0, &#39;diskImage&#39; =&amp;gt; {&#39;capacity&#39; =&amp;gt; 100 } }],
     	:ephemeral_storage =&amp;gt; true,
     	:domain =&amp;gt; &amp;quot;not-my-default.com&amp;quot;,
     	:name =&amp;gt; &amp;quot;hostname&amp;quot;,
     	:os_code =&amp;gt; &amp;quot;UBUNTU_LATEST&amp;quot;,
     	:name =&amp;gt; &amp;quot;test2&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;
     }
     new_server = @sl.servers.new(opts)
     new_server.generate_order_template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate an order template for Bare Metal Instance without a flavor&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;   opts = {
     	:cpu =&amp;gt; 8,
     	:ram =&amp;gt; 16348,
     	:disk =&amp;gt; {&#39;capacity&#39; =&amp;gt; 500 },
     	:ephemeral_storage =&amp;gt; true,
     	:domain =&amp;gt; &amp;quot;not-my-default.com&amp;quot;,
     	:name =&amp;gt; &amp;quot;hostname&amp;quot;,
     	:os_code =&amp;gt; &amp;quot;UBUNTU_LATEST&amp;quot;,
     	:name =&amp;gt; &amp;quot;test2&amp;quot;,
     	:datacenter =&amp;gt; &amp;quot;ams01&amp;quot;,
     	:bare_metal =&amp;gt; true
     }
     new_server = @sl.servers.new(opts)
     new_server.generate_order_template
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
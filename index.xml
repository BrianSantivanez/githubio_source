<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Tue, 01 Mar 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Manage Users</title>
      <link>https://softlayer.github.io/python/manageUsers/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/manageUsers/</guid>
      <description>&lt;p&gt;Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp


def create_user(username, password):
    user_template = {
        &#39;username&#39;: username,
        &#39;firstName&#39;: &#39;API&#39;,
        &#39;lastName&#39;: &#39;Learner&#39;,
        &#39;email&#39;: &#39;someone@somewhere.com&#39;,
        &#39;companyName&#39;: &#39;IBM&#39;,
        &#39;address1&#39;: &#39;123 api road&#39;,
        &#39;city&#39;: &#39;Houston&#39;,
        &#39;country&#39;: &#39;US&#39;,
        &#39;postalCode&#39;: &#39;TX 77002&#39;,
        &#39;userStatusId&#39;: 1001,
        &#39;timezoneId&#39;: 107
    }
    created_user = client[&#39;User_Customer&#39;].createObject(
        user_template,
        password,
        password)
    return created_user

def get_permissions(_id):
    permissions = client[&#39;User_Customer&#39;].getPermissions(id=_id)
    return permissions

def set_permissions(_id, permissions):
    &amp;quot;&amp;quot;&amp;quot;
    To get permissions correct, I take the existing permissions of a user
    that I already have, and set my new user&#39;s permissions to be the same
    with addBulkPortalPermission
    &amp;quot;&amp;quot;&amp;quot;
    return client[&#39;User_Customer&#39;].addBulkPortalPermission(
        permissions, id=_id)

def fix_permissions(user,permissions):
    # I only want users to have access to this one host
    virtualGuestId = 22334455
    t = user[&#39;id&#39;]
    set_permissions(user[&#39;id&#39;], permissions)
    client[&#39;User_Customer&#39;].removeAllVirtualAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].removeAllHardwareAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=t)
    client[&#39;User_Customer&#39;].addVirtualGuestAccess(virtualGuestId,id=t)

def orderUserServer(user, apiKey):
    &amp;quot;&amp;quot;&amp;quot;
    Orders a server as the newly created user. 
    &amp;quot;&amp;quot;&amp;quot;
    hostname = user + &amp;quot;-lab-server&amp;quot;
    guest = {}
    guest[&#39;startCpus&#39;] = 1
    guest[&#39;maxMemory&#39;] = 1024
    guest[&#39;localDiskFlag&#39;] = False
    guest[&#39;hostname&#39;] = hostname
    guest[&#39;domain&#39;] = user + &amp;quot;.lablayer.info&amp;quot;
    guest[&#39;hourlyBillingFlag&#39;] = True
    guest[&#39;datacenter&#39;] = {}
    guest[&#39;datacenter&#39;][&#39;name&#39;] = &#39;tok02&#39;
    guest[&#39;blockDeviceTemplateGroup&#39;] = {&#39;globalIdentifier&#39;: &amp;quot;6c64f59a-edeb-4ba4-b992-d04972597357&amp;quot;}
    userClient = SoftLayer.Client(
        username = user,
        api_key = apiKey )
    result = userClient[&#39;Virtual_Guest&#39;].createObject(guest)
    print &amp;quot;Added server id: %s  ( %s )&amp;quot; % (result[&#39;id&#39;],result[&#39;fullyQualifiedDomainName&#39;]) 
    return
   

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--num-users&#39;, dest=&#39;num_users&#39;, type=int,
                           help=&#39;Number of users to provision.&#39;)
    argsparse.add_argument(&#39;--offset&#39;, dest=&amp;quot;offset&amp;quot;, type=int,
                           default=1, help=&#39;Username offset&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    args = argsparse.parse_args()

    ##### CHANGE THESE ##########
    template_user_id = 123456
    password = &#39;APAsswordGoes!!!H3r3&#39; 

    client = SoftLayer.Client()
    
    userPerms = client[&#39;User_Customer&#39;].getPermissions(id=template_user_id)
   
    start_user_num = args.offset

    for i in range(args.num_users):
        target_username = &#39;%s-%s&#39; % (args.prefix,start_user_num)
        try:
            new_user = create_user(target_username,password)
            fix_permissions(new_user,userPerms)
            client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=new_user[&#39;id&#39;])

        except SoftLayer.exceptions.SoftLayerAPIError as error:
            &amp;quot;&amp;quot;&amp;quot;
            If the user already exists, an exception is thrown. 
            Just reset their permissions and continue on.
            &amp;quot;&amp;quot;&amp;quot;
            oFilter = {}
            oFilter[&#39;users&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;][&#39;operation&#39;] = target_username
            new_user = client[&#39;Account&#39;].getUsers(filter=oFilter)[0]
            fix_permissions(new_user,userPerms)

        newApiKey = client[&#39;User_Customer&#39;].getApiAuthenticationKeys(id=new_user[&#39;id&#39;])
        print &amp;quot;username = %s&amp;quot; % (newApiKey[0][&#39;user&#39;][&#39;username&#39;])
        print &amp;quot;api_key =  %s&amp;quot; % (newApiKey[0][&#39;authenticationKey&#39;])
        orderUserServer(newApiKey[0][&#39;user&#39;][&#39;username&#39;],newApiKey[0][&#39;authenticationKey&#39;])
        start_user_num = start_user_num + 1


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disable user, changes their password, cancels their servers, and removes any sshKeys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp

def get_target_users(prefix):
    _filter = {
        &#39;users&#39;: {
            &#39;username&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }
    _mask = &amp;quot;mask[id,username]&amp;quot;
    _users = client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask)
    return _users

def get_target_keys(prefix):
    _filter = {
        &#39;sshKeys&#39;: {
            &#39;label&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }

    _mask = &amp;quot;mask[id,label]&amp;quot;
    _users = client[&#39;Account&#39;].getSshKeys(filter=_filter, mask=_mask)
    return _users

def print_result(result, thing):
    if result == True:
        print &amp;quot;OK&amp;quot;
    else:
        print &amp;quot;ERROR: &amp;quot;
        pp(thing)
    return

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    argsparse.add_argument(&#39;--password&#39;,
                           help=&#39;New Password&#39;, default=False)
 
    args = argsparse.parse_args()

    client = SoftLayer.Client()
  
    users = get_target_users(args.prefix)

    for user in users:
        password =  args.password
        print &#39;User: &#39; + user[&#39;username&#39;] + &#39; Password: &#39; + password 
        # status 1021 disables the user
        template = {
            &#39;id&#39;: user[&#39;id&#39;],
            &#39;userStatusId&#39;: 1021
        }

        # Cancel any servers the user created
        servers = client[&#39;User_Customer&#39;].getVirtualGuests(id=user[&#39;id&#39;])
        result = True
        for virt in servers: 
            # the &amp;quot;,&amp;quot; and the end of print removes the automatic newline
            print(&amp;quot;\tCanceling host... &amp;quot; + virt[&#39;fullyQualifiedDomainName&#39;] + &amp;quot; (&amp;quot; + str(virt[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
            try:
                result = client[&#39;Virtual_Guest&#39;].deleteObject(id=virt[&#39;id&#39;])
                print_result(result,virt)
            except SoftLayer.exceptions.SoftLayerAPIError as error:
                print(&amp;quot;\tException, host might already be canceling...&amp;quot;)
                pp(error)

        print(&amp;quot;\tChanging password for...&amp;quot; + user[&#39;username&#39;] + &amp;quot; (&amp;quot; + str(user[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;User_Customer&#39;].updatePassword(password, id=user[&#39;id&#39;])
        print_result(result,user)
 
    sshkeys = get_target_keys(args.prefix)
    print &#39;SSH Key Removal&#39;
    for key in sshkeys:
        print(&amp;quot;Deleting key... &amp;quot; + key[&#39;label&#39;] + &amp;quot; (&amp;quot; + str(key[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;SoftLayer_Security_Ssh_Key&#39;].deleteObject(id=key[&#39;id&#39;])
        print_result(result,key)

    print &#39;Complete&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 29, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160229/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160229/</guid>
      <description>

&lt;h4 id=&#34;portal:bc7b5768d66d4c7c293731ab8328c201&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing Managed Hosting orders to reset when a Promo code was applied to an order.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:bc7b5768d66d4c7c293731ab8328c201&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Removed defunct methods: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Metric_Tracking_Object/getBandwidthMinMax&#34;&gt;SoftLayer_Metric_Tracking_Object::getBandwidthMinMax&lt;/a&gt; and &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest&#34;&gt;SoftLayer_Virtual_Guest&lt;/a&gt;::getBandwidthMinMax&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:bc7b5768d66d4c7c293731ab8328c201&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing RedHat licenses to be terminated upon an OS reload.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get Notifications</title>
      <link>https://softlayer.github.io/python/notifications/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/notifications/</guid>
      <description>&lt;p&gt;Retrieves all notifications that were created on January 1, 2016.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        theDate = &#39;01/01/2016 01:00:00&#39;
        _filter = {
                &#39;startDate&#39;: { 
                    &#39;operation&#39;: &#39;greaterThanDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]}
                    ]
                }
            }
        result = self.client[&#39;SoftLayer_Notification_Occurrence_Event&#39;].getAllObjects(filter=_filter)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/ticket_filter/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp
import logging

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        theDate = &amp;quot;02/25/2016 01:00:00&amp;quot;
        endDate = &amp;quot;02/29/2016 01:00:00&amp;quot;

        mask = &amp;quot;mask[updates,group[name]]&amp;quot;


        theFilter1 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;betweenDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [theDate]},
                        {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]}
                    ]
                }
            }
        }

        theFilter2 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;greaterThanDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]}
                    ]
                },
                &#39;group&#39; : {
                    &#39;name&#39;: {
                        &#39;operation&#39;: &#39;Cancellations&#39;
                    }
                    
                }
            }
        }

        result = self.client[&#39;SoftLayer_Account&#39;].getTickets(filter=theFilter2, mask=mask)
        for ticket in result:
            print(&amp;quot;===============&amp;quot;)
            print(&amp;quot;%s - %s (%s)&amp;quot; % (ticket[&#39;createDate&#39;], ticket[&#39;title&#39;], ticket[&#39;group&#39;][&#39;name&#39;]))
            for update in ticket[&#39;updates&#39;]:
                print(&amp;quot;===============%s=============== &amp;quot; % (update[&#39;createDate&#39;]))
                print(&amp;quot;%s&amp;quot; % update[&#39;entry&#39;])
                print(&amp;quot;===============&amp;quot;)

        # pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 22, 2016</title>
      <link>https://softlayer.github.io/release_notes/2016022/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2016022/</guid>
      <description>

&lt;h4 id=&#34;portal:be1361cbbfd8cb2d9a105e85a97112fb&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was preventing orders from completing on accounts with Account Defined Networking enabled.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Resolved an issue that was preventing order quotes from being properly saved for later use.&lt;/li&gt;
&lt;li&gt;Removed the TLS_X cipher option for SSL Offloading on Load Balancers in the customer portal. Furthermore, any attempts to configure TLS_X through the API will now result in a NotSupported exception.&lt;/li&gt;
&lt;li&gt;Improved Cancellation Error Messaging for Already Canceled Services.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:be1361cbbfd8cb2d9a105e85a97112fb&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The data types &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Component&#34;&gt;redundancyEnabledFlag&lt;/a&gt; and &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Component&#34;&gt;redundancyCapableFlag&lt;/a&gt; on &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Component&#34;&gt;SoftLayer_Network_Component&lt;/a&gt; will now reflect properly for unbonded network components and bonded components with a bonding type of Etherchannel in a dual path environment.&lt;/li&gt;
&lt;li&gt;Addressed an issue where calling &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Application_Delivery_Controller_LoadBalancer_VirtualIpAddress/e&#34;&gt;SoftLayer_Network_Application_Delivery_Controller_LoadBalancer_VirtualIpAddress::editObject&lt;/a&gt; without specifying a serviceGroup ID was causing a duplication of serviceGroups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:be1361cbbfd8cb2d9a105e85a97112fb&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue with checking user status for users connected to the SoftLayer VPN when making SOAP calls to the API.&lt;/li&gt;
&lt;li&gt;Created a process that will allow users to authenticate via SAML even if they don&amp;rsquo;t exist in in the customer portal yet. Upon login the new user will be created automatically. To assign permissions the user will need to provide a roles attribute with the SAML token.&lt;/li&gt;
&lt;li&gt;Enabled SAML on all Customer accounts.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 17, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160217/</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160217/</guid>
      <description>

&lt;h4 id=&#34;portal:3fc30d4efb0f9f17a0ee9ad6f39c20bb&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue where there is an additional forward slash in the return redirect from PayPal ordering.&lt;/li&gt;
&lt;li&gt;Fixed an issue preventing the warning message from being displayed with improper virtual server configurations on the ordering page.&lt;/li&gt;
&lt;li&gt;The link to order private node virtual servers in the control portal will now properly direct users to the private node order page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:3fc30d4efb0f9f17a0ee9ad6f39c20bb&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:3fc30d4efb0f9f17a0ee9ad6f39c20bb&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Updated backend monitoring agent APIs, which will make the monitoring services more efficient and reliable.&lt;/li&gt;
&lt;li&gt;Updated windows post install scripts for better error handling.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 15, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160215/</link>
      <pubDate>Mon, 15 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160215/</guid>
      <description>

&lt;h4 id=&#34;portal:fd827376f4b08f3979c922f17976a534&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Updated the order receipt page, added some useful links to documentation about the purchased product.&lt;/li&gt;
&lt;li&gt;Streamlined the form which is used to submit orders.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:fd827376f4b08f3979c922f17976a534&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue with &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/createObject&#34;&gt;SoftLayer_Hardware::createObject&lt;/a&gt; that was preventing processor restricted operating systems from being ordered with fixedConfigurationPreset.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 10, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160210/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160210/</guid>
      <description>

&lt;h4 id=&#34;portal:6765cfd043d0eac1c46de11b9e94db91&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:6765cfd043d0eac1c46de11b9e94db91&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed a bug in &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/createObject&#34;&gt;SoftLayer_Hardware_Server::createObject&lt;/a&gt; that was preventing sshKeys from being properly installed on the new server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:6765cfd043d0eac1c46de11b9e94db91&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Disabled quotes that contain products from specific packages: 56, 126, 142, 143, 146, 147, 148, 158, 234&lt;/li&gt;
&lt;li&gt;Updated the Linux post provisioning process to output more verbose log files.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating a support ticket</title>
      <link>https://softlayer.github.io/python/create_ticket/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/create_ticket/</guid>
      <description>&lt;p&gt;Standard support tickets&amp;rsquo; titles must be selected from a pre-determined list of ticket subjects, defined in the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket_Subject&#34;&gt;SoftLayer_Ticket_Subject&lt;/a&gt; service. The following example will output all of the Ticket Subjects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
subjects = client[&#39;Ticket_Subject&#39;].getAllObjects()
pp(subjects)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the Ticket Subject ID you can pass it to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Ticket/createStandardTicket&#34;&gt;createStandardTicket&lt;/a&gt;. In the following example we are opening a ticket under the subject Hardware Firewall Question (ID 1121).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
client = SoftLayer.Client()
currentUser = client[&#39;Account&#39;].getCurrentUser()
new_ticket = {
       &#39;subjectId&#39;: 1121,
       &#39;assignedUserId&#39;: currentUser[&#39;id&#39;]
}
created_ticket = client[&#39;Ticket&#39;].createStandardTicket(new_ticket, &amp;quot;Content of the ticket goes here&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel an item or service</title>
      <link>https://softlayer.github.io/python/cancel_service/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/cancel_service/</guid>
      <description>&lt;p&gt;In the following example we are retrieving the Billing Item of a Virtual Guest with the ID of 12345678 and passing that ID to &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item/cancelService&#34;&gt;cancelService&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[id]&amp;quot;
billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=12345678)
cancelItem = client[&#39;SoftLayer_Billing_Item&#39;].cancelService(id = billingId[&#39;id&#39;])

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find a billing item from a provisioned product</title>
      <link>https://softlayer.github.io/python/getbillingitem/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getbillingitem/</guid>
      <description>&lt;p&gt;In the following example we are looking for the Billing Item of an Virtual Guest with an ID of 1234567.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[id]&amp;quot;
billingId = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567)
pp(billingId)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Month-to-date cost of a Virtual_Guest</title>
      <link>https://softlayer.github.io/python/monthtodate/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/monthtodate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
mask = &amp;quot;mask[createDate,hoursUsed,hourlyRecurringFee,currentHourlyCharge]&amp;quot;
toDateCost = client[&#39;SoftLayer_Virtual_Guest&#39;].getBillingItem(mask=mask,id=1234567)
pp(toDateCost)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;
{&#39;createDate&#39;: &#39;2016-02-05T14:07:37-06:00&#39;,
  &#39;currentHourlyCharge&#39;: &#39;.023&#39;,
  &#39;hourlyRecurringFee&#39;: &#39;.023&#39;,
  &#39;hoursUsed&#39;: &#39;1&#39;}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/python/nextinvoice/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/nextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
nextInvoiceAmount = client[&#39;SoftLayer_Account&#39;].getNextInvoiceTotalAmount()
pp(nextInvoiceAmount)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 8, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160208/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160208/</guid>
      <description>

&lt;h4 id=&#34;portal:b173e18a5e41cddcf9dae1b1b53c3f18&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue where private subnets were not populating in the VLAN selector for private networking only server orders.&lt;/li&gt;
&lt;li&gt;Resolved an issue preventing OS reloads from Image Templates from completing due to inactive packages on the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:b173e18a5e41cddcf9dae1b1b53c3f18&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 1, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160201/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160201/</guid>
      <description>

&lt;h4 id=&#34;portal:d28a490ace8738fb1cca6353e9a62ed3&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was preventing the portal from properly enabling Private VLAN spanning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:d28a490ace8738fb1cca6353e9a62ed3&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Exposed &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer/getAllowedHardwareIds&#34;&gt;getAllowedHardwareIds&lt;/a&gt; and &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer/getAllowedVirtualGuestIds&#34;&gt;getAllowedVirtualGuestIds&lt;/a&gt; to the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer&#34;&gt;SoftLayer_User_Customer&lt;/a&gt; service. This helps with API timeout issues on accounts with a large amount of Bare Metal Servers and or Virtual Guests.&lt;/li&gt;
&lt;li&gt;Resolved an issue where calling &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest_Block_Device_Template_Group/denySharingAccess&#34;&gt;denySharingAccess&lt;/a&gt; would cause an image template to go in to an inconsistent state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:d28a490ace8738fb1cca6353e9a62ed3&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added the ability to specify userdata to &lt;a href=&#34;http://www.softlayer.com/info/hourly-bare-metal-servers&#34;&gt;Hourly Bare Metal Servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enabled the automatic migration of local disk VSIs on disabled hosts on VSI power off or reboot.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
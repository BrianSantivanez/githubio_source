<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>SoftLayer API Examples on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 30 Oct 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Create a new virtual server and attach Security Groups</title>
      <link>https://softlayer.github.io/python/createvsiwithsecgroup/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/createvsiwithsecgroup/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from __future__ import print_function
import SoftLayer
from SoftLayer.managers.vs import VSManager

def create_vsi():
    #Create a client to the SoftLayer_Account API service.
    #Note: currently set without the user ID and API key since
    #it will by default use the values set in the CLI
    #to use other values use SoftLayer.Client(sl_username, sl_api_key)
    client = SoftLayer.Client()
    vsi_mgr = VSManager(client)

   # common values
    datacenter = &#39;wdc07&#39; 
    domain = &#39;cde.services&#39; 
    os_code = &#39;UBUNTU_LATEST_64&#39;
    local_disk = True 
    hourly = True 
    dedicated = False 
    nic_speed = 1000 
    disks = [100] 
    private = False 
    ssh_keys = [972047] 
    public_security_groups = [43507]
    private_security_groups = [43511]

    # server properties
    hostname = &#39;sgvsi&#39;
    cpus = 2
    memory = 2048

    result = vsi_mgr.create_instance(hostname=hostname, domain=domain,
                                     cpus=cpus, memory=memory, datacenter=datacenter,
                                     os_code=os_code, local_disk=local_disk,
                                     hourly=hourly, dedicated=dedicated,
                                     disks=disks, nic_speed=nic_speed, private=private,
                                     ssh_keys=ssh_keys, public_security_groups=public_security_groups,
                                     private_security_groups=private_security_groups)
    print(result)

if __name__ == &#39;__main__&#39;:
    create_vsi()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Add, list, and remove security group rules</title>
      <link>https://softlayer.github.io/python/securitygroup_rule_ops/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/securitygroup_rule_ops/</guid>
      <description>

&lt;h2 id=&#34;adding-a-rule-to-a-security-group&#34;&gt;Adding a rule to a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

sg_id = 123045
direction = &#39;ingress&#39;
ethertype = &#39;IPv4&#39;
remote_ip = &#39;169.148.34.0/24&#39;
protocol = &#39;tcp&#39;
port_min = 22
port_max = 22
try:
    result = net_mgr.add_securitygroup_rule(sg_id,
                                            direction=direction,
                                            ethertype=ethertype,
                                            remote_ip=remote_ip,
                                            protocol=protocol,
                                            port_min=port_min,
                                            port_max=port_max)
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to add a rule to the security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;listing-rules-in-a-security-group&#34;&gt;Listing rules in a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

sg_id = 123045
try:
    result = net_mgr.list_securitygroup_rules(sg_id)
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to list rules in the security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removing-a-rule-from-a-security-group&#34;&gt;Removing a rule from a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

sg_id = 123045
rule_id = 475879
try:
    result = net_mgr.remove_securitygroup_rule(sg_id, rule_id)
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to remove rule from the security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remove-all-rules-from-a-security-group&#34;&gt;Remove all rules from a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

sg_id = 123045
try:
    rules = net_mgr.list_securitygroup_rules(sg_id)
    rules = [rule[&#39;id&#39;] for rule in rules]
    result = net_mgr.remove_securitygroup_rules(sg_id, rules)
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to remove rules from the security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create, list, get, and delete security groups</title>
      <link>https://softlayer.github.io/python/securitygroup_ops/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/securitygroup_ops/</guid>
      <description>

&lt;h2 id=&#34;creating-a-security-group&#34;&gt;Creating a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

name = &#39;pythonCreatedGroupExample&#39;
description = &#39;Security Group created via python&#39;
try:
    result = net_mgr.create_securitygroup(name=name, description=description)
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to create a new security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deleting-a-security-group&#34;&gt;Deleting a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

sg_id = 12045
try:
    result = net_mgr.delete_securitygroup(sg_id)
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to delete security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-a-security-group&#34;&gt;Getting a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

sg_id = 12045
try:
    result = net_mgr.get_securitygroup(sg_id)
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to get security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-all-security-groups-in-account&#34;&gt;List all security groups in account&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)

result = net_mgr.list_securitygroups()
pp(result)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>VSIs and security groups</title>
      <link>https://softlayer.github.io/python/securitygroup_vsis/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/securitygroup_vsis/</guid>
      <description>

&lt;h2 id=&#34;creating-a-vsi-with-security-groups&#34;&gt;Creating a VSI with security groups&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the VSManager
client = SoftLayer.Client()
vs_mgr = SoftLayer.VSManager(client)

http_sg_id = 384757
ssh_sg_id = 576973

# Allow only HTTP on the public interface of the VSI
public_groups = [http_sg_id]

# Allow HTTP and SSH on the private interface of the VSI
private_groups = [http_sg_id, ssh_sg_id]

# If we didn&#39;t want to set any security groups on an interface
# (which allows all traffic), we don&#39;t set the associated
# creation kwarg

create_kwargs = {
    &#39;hostname&#39;: &#39;sg-vsi&#39;,
    &#39;domain&#39;: &#39;mycompany.com&#39;,
    &#39;os_code&#39;: &#39;UBUNTU_LATEST_64&#39;,
    &#39;datacenter&#39;: &#39;dal13&#39;,
    &#39;cpus&#39;: 1,
    &#39;memory&#39;: 1024,
    &#39;hourly&#39;: True,
    &#39;disks&#39;: (&#39;100&#39;,),
    &#39;public_security_groups&#39;: public_groups,
    &#39;private_security_groups&#39;: private_groups,
}

try:
    vsi = vs_mgr.create_instance(**create_kwargs)
    pp(vsi)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to create VSI with security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;attach-an-existing-vsi-to-security-groups&#34;&gt;Attach an existing VSI to security groups&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager and VSManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)
vs_mgr = SoftLayer.VSManager(client)

http_sg_id = 384757
vsi_id = 4018735
private_interface = False
port_number = 0 if private_interface else 1
network_component_mask = &#39;networkComponents[id, port]&#39;

try:
    vsi_components = vs_mgr.get_instance(vsi_id, mask=network_component_mask)
    component_to_attach = [comp for comp in vsi_components[&#39;networkComponents&#39;]
                           if comp[&#39;port&#39;] == port_number][0]
    result = net_mgr.attach_securitygroup_component(http_sg_id,
                                                    component_to_attach[&#39;id&#39;])
    pp(result)
    
    # If this is the first time the server is being associated with security groups,
    # a reboot is required for the security group to take effect on the VSI
    client[&#39;Virtual_Guest&#39;].rebootSoft(id=vsi_id)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to associate VSI with security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;detach-a-vsi-from-a-security-group&#34;&gt;Detach a VSI from a security group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output
from pprint import pprint as pp

# Create a client for use with the NetworkManager and VSManager
client = SoftLayer.Client()
net_mgr = SoftLayer.NetworkManager(client)
vs_mgr = SoftLayer.VSManager(client)

http_sg_id = 384757
vsi_id = 4018735
private_interface = False
port_number = 0 if private_interface else 1
network_component_mask = &#39;networkComponents[id, port]&#39;

try:
    vsi_components = vs_mgr.get_instance(vsi_id, mask=network_component_mask)
    component_to_detach = [comp for comp in vsi_components[&#39;networkComponents&#39;]
                           if comp[&#39;port&#39;] == port_number][0]
    net_mgr.detach_securitygroup_component(http_sg_id,
                                           component_to_detach[&#39;id&#39;])
    
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed... Unable to disassociate VSI with security group: faultCode=%s, faultString=%s&#39;
       % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: October 12, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20171012/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20171012/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an error that was being displayed when an end user clicks on “Reconfigure System Configuration” link on complete order page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Removed the ability to edit or view a users profile via the API if the users status is set to &lt;code&gt;cancel_pending&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Spare Pool Servers</title>
      <link>https://softlayer.github.io/rest/spare_pool/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/spare_pool/</guid>
      <description>

&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/sparePool&#34;&gt;&lt;code&gt;SoftLayer_Hardware_Server::sparepool()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparepool/add

curl -su userid:api_key  &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparePool/activate&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will return True if the action was successful, or throw an exception otherwise&lt;/p&gt;

&lt;p&gt;Exceptions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This server (hostname.domain.name) is not in a status that allows it to be added to spare pool.
This server (hostname.domain.name) is not in a status that allows it to be removed from spare pool.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server is likely already in a spare pool.&lt;/p&gt;

&lt;h3 id=&#34;view-spare-pool-servers&#34;&gt;View Spare Pool Servers&lt;/h3&gt;

&lt;p&gt;Filtering by hardwareStatus-&amp;gt;status doesn&amp;rsquo;t work, you will need to filter by the status id only.&lt;/p&gt;

&lt;p&gt;Status id 23 is SPARE_POOL
Status id 5 is ACTIVE&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key &#39;https://api.softlayer.com/rest/v3/SoftLayer_Account/getHardware?objectMask=mask[id,hostname,hardwareStatus[status,id]]&amp;amp;objectFilter={&amp;quot;hardware&amp;quot;:{&amp;quot;hardwareStatus&amp;quot;:{&amp;quot;id&amp;quot;:{&amp;quot;operation&amp;quot;:23}}}}&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: October 05, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20171005/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20171005/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/blogs/bluemix/2017/09/ibm-cloud-bluemix-load-balancer/&#34;&gt;IBM Bluemix Load Balancers&lt;/a&gt; are now live in the customer portal.&lt;/li&gt;
&lt;li&gt;Performance and Endurance Block volumes can no longer have their LUN Id changed unless all host authorizations are first removed. This is to ensure synchronization between the customer portal and the storage systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added more logic when auto-scaling Virtual Guests. The new logic checks the dates in the logs first and makes sure there are no other provisions or reclaims within the cooldown period of time.&lt;/li&gt;
&lt;li&gt;Fixed an issue where Virtual Guests being deployed from Image templates were set to Skip OS updates during provisioning.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Add, get, edit and remove Security Group rules</title>
      <link>https://softlayer.github.io/rest/addgeteditremovesecuritygrouprules/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/addgeteditremovesecuritygrouprules/</guid>
      <description>

&lt;h3 id=&#34;add-rules&#34;&gt;Add rules&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}/addRules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X POST &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/136741/addRules&#39; -d &#39;{&amp;quot;parameters&amp;quot;: [[{&amp;quot;direction&amp;quot;: &amp;quot;ingress&amp;quot;,&amp;quot;portRangeMin&amp;quot;:100,&amp;quot;portRangeMax&amp;quot;:101,&amp;quot;protocol&amp;quot;:&amp;quot;tcp&amp;quot;}]]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-rules&#34;&gt;Get rules&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}/getObject?objectMask=mask[rules]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -g -X GET &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/42401/getObject?objectMask=mask[rules]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;createDate&amp;quot;: &amp;quot;2017-05-19T14:00:15-05:00&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;VSIs in this group respond to ping requests.&amp;quot;,
    &amp;quot;id&amp;quot;: 42401,
    &amp;quot;modifyDate&amp;quot;: null,
    &amp;quot;name&amp;quot;: &amp;quot;allow_ping&amp;quot;,
    &amp;quot;rules&amp;quot;: [
        {
            &amp;quot;direction&amp;quot;: &amp;quot;ingress&amp;quot;,
            &amp;quot;ethertype&amp;quot;: &amp;quot;IPv4&amp;quot;,
            &amp;quot;id&amp;quot;: 43001,
            &amp;quot;portRangeMax&amp;quot;: 0,
            &amp;quot;portRangeMin&amp;quot;: 8,
            &amp;quot;protocol&amp;quot;: &amp;quot;icmp&amp;quot;,
            &amp;quot;remoteGroupId&amp;quot;: null,
            &amp;quot;securityGroupId&amp;quot;: 42401
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;edit-rules&#34;&gt;Edit Rules&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;PUT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}/editRules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X PUT &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/123456/editRules&#39; -d &#39;{&amp;quot;parameters&amp;quot;: [[{&amp;quot;id&amp;quot;: 11111,&amp;quot;portRangeMin&amp;quot;: 99},{&amp;quot;id&amp;quot;: 22222,&amp;quot;portRangeMin&amp;quot;: 199}]]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;remove-rules&#34;&gt;Remove Rules&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;PUT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}/removeRules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X PUT &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/123456/removeRules&#39; -d &#39;{&amp;quot;parameters&amp;quot;: [[11111]]}&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create, get, edit and delete Security Groups</title>
      <link>https://softlayer.github.io/rest/creategeteditdeletesecuritygroup/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/creategeteditdeletesecuritygroup/</guid>
      <description>

&lt;h3 id=&#34;create-security-group&#34;&gt;Create Security Group&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup&#39; -d &#39;{&amp;quot;parameters&amp;quot;: [{&amp;quot;name&amp;quot;: &amp;quot;some name&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;some description&amp;quot;}]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;createDate&amp;quot;: &amp;quot;2017-10-11T11:04:42-05:00&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;some description&amp;quot;,
    &amp;quot;id&amp;quot;: 123456,
    &amp;quot;modifyDate&amp;quot;: null,
    &amp;quot;name&amp;quot;: &amp;quot;some name&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-security-group&#34;&gt;Get Security Group&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X GET &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/123456&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;createDate&amp;quot;: &amp;quot;2017-10-11T11:04:42-05:00&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;some description&amp;quot;,
    &amp;quot;id&amp;quot;: 123456,
    &amp;quot;modifyDate&amp;quot;: null,
    &amp;quot;name&amp;quot;: &amp;quot;some name&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;edit-security-group&#34;&gt;Edit Security Group&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;PUT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X PUT &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/123456&#39; -d &#39;{&amp;quot;parameters&amp;quot;: [{&amp;quot;description&amp;quot;: &amp;quot;new description&amp;quot;}]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;delete-security-group&#34;&gt;Delete Security Group&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;DELETE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X DELETE &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/123456&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get network components, attach and detach network components</title>
      <link>https://softlayer.github.io/rest/getattachdetachnetworkcomponent/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getattachdetachnetworkcomponent/</guid>
      <description>

&lt;h3 id=&#34;get-the-network-component-ids-for-a-vsi&#34;&gt;Get the network component IDs for a VSI&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Virtual_Guest/{guest_id}/getObject.json?objectMask=mask[networkComponents.port,networkComponents.id]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -g -X GET &#39;https://api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/30000007/getObject.json?objectMask=mask[networkComponents.port,networkComponents.id]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;lt;output omitted&amp;gt;
    &amp;quot;networkComponents&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 20000003,
            &amp;quot;port&amp;quot;: 0
        },
        {
            &amp;quot;id&amp;quot;: 20000001,
            &amp;quot;port&amp;quot;: 1
        }
    ],
    &amp;lt;output omitted&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;attach-network-component-to-security-group&#34;&gt;Attach network component to Security Group&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}/attachNetworkComponents&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X POST &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/123456/attachNetworkComponents&#39; -d &#39;{&amp;quot;parameters&amp;quot;: [[20000003]]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;detach-network-component-from-security-group&#34;&gt;Detach network component from Security Group&lt;/h3&gt;

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Network_SecurityGroup/{securitygroup_id}/detachNetworkComponents&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X POST &#39;https://api.softlayer.com/rest/v3/SoftLayer_Network_SecurityGroup/123456/detachNetworkComponents&#39; -d &#39;{&amp;quot;parameters&amp;quot;: [[20000003]]}&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: September 27, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170927/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170927/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://console.bluemix.net/docs/infrastructure/security-groups/sg_overview.html#about-security-groups&#34;&gt;Security Groups&lt;/a&gt; are now live in the customer portal at &lt;a href=&#34;https://control.softlayer.com/security/securitygroups&#34;&gt;https://control.softlayer.com/security/securitygroups&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Pushed some code to tidy up the Virtual Guest Family size order forms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Created the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/enableEuLocalizedProcessing&#34;&gt;enableEuLocalizedProcessing&lt;/a&gt; and &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/disableEuLocalizedProcessing&#34;&gt;disableEuLocalizedProcessing&lt;/a&gt; methods for the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account&#34;&gt;SoftLayer_Account&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: September 21, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170921/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170921/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue where a subset of DCs where not displaying the 1,2,4 or 8 core options for Dedicated Host Virtual Guests.&lt;/li&gt;
&lt;li&gt;Pushed code that that corrected a display issue when ordering Dedicated Host Virtual Guests. When selecting Local drive Virtual Guests do not show the 3rd, 4th, and 5th disk options.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added validation to prevent monthly LBaaS orders via the API since the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_LBaaS_LoadBalancer&#34;&gt;SoftLayer_Network_LBaaS_LoadBalancer&lt;/a&gt; service is only available with hourly billing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: September 14, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170914/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170914/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue where standard disk prices were being incorrectly hidden for some datacenters during the order process.&lt;/li&gt;
&lt;li&gt;Virtual Guest Family sizes are now live on the order form. You can read more about the Family sizes &lt;a href=&#34;https://www.ibm.com/blogs/bluemix/2017/09/public-virtual-server-families/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added new functionality to the order forms to support multiple disk controllers for bare metal offerings.&lt;/li&gt;
&lt;li&gt;Added the following new offerings in the Bluemix catalog: &lt;a href=&#34;https://console-regional.ng.bluemix.net/containers-kubernetes/home/registryGettingStarted?env_id=ibm%3Ayp%3Aus-south&#34;&gt;Container Registry&lt;/a&gt;, &lt;a href=&#34;https://console-regional.ng.bluemix.net/catalog/services/informix-on-cloud?env_id=ibm%3Ayp%3Aus-south&amp;amp;taxonomyNavigation=containers&#34;&gt;Informix On Cloud&lt;/a&gt;, &lt;a href=&#34;https://console-regional.ng.bluemix.net/catalog/services/master-data-management-on-cloud?env_id=ibm%3Ayp%3Aus-south&amp;amp;taxonomyNavigation=containers&#34;&gt;Master Data Management on Cloud&lt;/a&gt;, &lt;a href=&#34;https://console-regional.ng.bluemix.net/catalog/services/information-server-on-cloud?env_id=ibm%3Ayp%3Aus-south&amp;amp;taxonomyNavigation=containers&#34;&gt;Information Server on Cloud&lt;/a&gt;, &lt;a href=&#34;https://console-regional.ng.bluemix.net/catalog/services/compose-for-janusgraph?env_id=ibm%3Ayp%3Aus-south&amp;amp;taxonomyNavigation=containers&#34;&gt;JanusGraph&lt;/a&gt;, &lt;a href=&#34;https://console-regional.ng.bluemix.net/catalog/services/monitoring?env_id=ibm%3Ayp%3Aus-south&amp;amp;taxonomyNavigation=containers&#34;&gt;Monitoring&lt;/a&gt;, and &lt;a href=&#34;https://console-regional.ng.bluemix.net/catalog/services/log-analysis?env_id=ibm%3Ayp%3Aus-south&amp;amp;taxonomyNavigation=containers&#34;&gt;Log Analysis&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed a bug where the results from &lt;a href=&#34;http://sldn.softlayer.com/reference/services/softlayer_virtual_guest/generateordertemplate&#34;&gt;SoftLayer_Virtual_Guest::generateOrderTemplate&lt;/a&gt; were not showing the new Family Size Virtual Guests.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Introduced a new feature which enables customers to specify a backend router for bare metal server orders via API.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://softlayer-python.readthedocs.io/en/latest/index.html&#34;&gt;SoftLayer Python CLI&lt;/a&gt; was updated for Family Sizes and Dedicated hosts. The virtual create-options command was updated to show flavors and the dedicated host options. The virtual create command was updated to accept a flavor key and a host id.&lt;/li&gt;
&lt;li&gt;Added the method &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_SecurityGroup/getSupportedDataCenters&#34;&gt;getSupportedDataCenters&lt;/a&gt; to service &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_SecurityGroup&#34;&gt;SoftLayer_Network_SecurityGroup&lt;/a&gt;. The new API will return a list of &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Location_Datacenter&#34;&gt;SoftLayer_Location_Datacenter&lt;/a&gt; objects, which represent the datacenters where security groups are available.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Corrected a bug that was causing customers to be unable to boot Virtual Guests in to our rescue environment.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderbaremetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/orderbaremetal/</guid>
      <description>

&lt;p&gt;Example of how to build an order for a bare metal server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers&lt;/li&gt;
&lt;li&gt;Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.&lt;/li&gt;
&lt;li&gt;listAvailableVlans() if you want to place the server on a specific VLAN.&lt;/li&gt;
&lt;li&gt;listPartitionTemplates() will show what partition schemes you can apply to a disk.&lt;/li&gt;
&lt;li&gt;listRaidArrayTypes() shows what id numbers are for each RAID type.&lt;/li&gt;
&lt;li&gt;Custom partitions can ONLY be specified for CentOS or RHEL servers, and ONLY on the secondary drives &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Trying to do the same for the primary controller will result in the default partitinoTemplate being applied. Custom partitions also require the arraySize be declared.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Places an order for a Bare Metal Server
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp



class ordering():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, package_id, location_id, pub_vlan_id=&#39;&#39;, priv_vlan_id=&#39;&#39;):
        &amp;quot;&amp;quot;&amp;quot;
        Places an order for a Bare Metal Instance
        &amp;quot;&amp;quot;&amp;quot;

        &amp;quot;&amp;quot;&amp;quot;These items are required for all servers and have a 0$ cost, some can be upgraded&amp;quot;&amp;quot;&amp;quot;
        required_items = [
            &#39;AUTOMATED_NOTIFICATION&#39;,
            &#39;MONITORING_HOST_PING&#39;,
            &#39;NOTIFICATION_EMAIL_AND_TICKET&#39;,
            &#39;REBOOT_KVM_OVER_IP&#39;,
            &#39;NESSUS_VULNERABILITY_ASSESSMENT_REPORTING&#39;,
            &#39;UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT&#39;,
            &#39;REDUNDANT_POWER_SUPPLY&#39;,
        ]
        &amp;quot;&amp;quot;&amp;quot;We need bandwidth, at least 1 ip, and the port speed &amp;quot;&amp;quot;&amp;quot;
        network_items = [
            &#39;BANDWIDTH_500_GB&#39;,
            &#39;1_IP_ADDRESS&#39;,
            &#39;1_GBPS_DUAL_PUBLIC_PRIVATE_NETWORK_UPLINKS_UNBONDED&#39;,
        ]
        &amp;quot;&amp;quot;&amp;quot;A disk controller, a duplicate entry for each disk you want, in order, ram, OS and processor chip &amp;quot;&amp;quot;&amp;quot;
        physical_items = [
            &#39;DISK_CONTROLLER_RAID&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;RAM_128_GB_DDR3_1333_REG_2&#39;,
            &#39;OS_VSPHERE_ENTERPRISE_PLUS_6_0&#39;,
            &#39;INTEL_XEON_2620_2_00&#39;
        ]

        all_items = required_items + network_items + physical_items
        prices = self.gatherPriceIds(package_id, all_items)
        productOrder = {&#39;orderContainers&#39;: [
                {&#39;hardware&#39;: 
                    [
                        {
                            &#39;domain&#39;: u&#39;cgallo.com&#39;,
                            &#39;hostname&#39;: u&#39;vmware-testing01&#39;,
                            &#39;primaryBackendNetworkComponent&#39;: {&#39;networkVlan&#39;: {&#39;id&#39; : int(priv_vlan_id)}},
                            &#39;primaryNetworkComponent&#39;: {&#39;networkVlan&#39;: {&#39;id&#39; : int(priv_vlan_id)}}
                        }
                    ],
                    &#39;location&#39;: location_id,
                    &#39;packageId&#39;: package_id,
                    &#39;prices&#39;: prices,
                    &#39;quantity&#39;: 1,
                    &#39;storageGroups&#39; : [
                        {
                            &#39;arrayTypeId&#39;: 2,
                            &#39;hardDrives&#39;: [0,1],
                            &#39;partitionTemplateId&#39; : 1
                        },
                        {
                            &#39;arrayTypeId&#39;: 9,
                            &#39;arraySize&#39; : 2000,
                            &#39;hardDrives&#39;: [2],
                            &#39;partitions&#39; : [
                                {&#39;name&#39; : &#39;/&#39;, &#39;size&#39;: 200, &#39;isGrow&#39;: 0},
                                {&#39;name&#39; : &#39;/boot&#39;, &#39;size&#39;: 100},
                                {&#39;name&#39; : &#39;/usr&#39;, &#39;size&#39;: 200},
                                {&#39;name&#39; : &#39;/mine&#39;, &#39;size&#39;: 200},
                                {&#39;name&#39; : &#39;/media&#39;, &#39;size&#39;: 1, &#39;isGrow&#39;: 1},
                            ]

                        },
                        {
                            &#39;arrayTypeId&#39;: 9,
                            &#39;hardDrives&#39;: [3]
                        }
                    ],
                }
            ]
        }
        pp(productOrder)
        order = self.client[&#39;Product_Order&#39;].verifyOrder(productOrder)
        # order = self.client[&#39;Product_Order&#39;].placeOrder(productOrder)
        pp(order)


    def listServerPackages(self):
        mask = &amp;quot;mask[type]&amp;quot;
        _filter = {
            &#39;type&#39;: {
                &#39;keyName&#39;: {&#39;operation&#39;: &#39;BARE_METAL_CPU&#39;},
            },
        }
        result = self.client[&#39;Product_Package&#39;].getAllObjects(mask=mask, filter=_filter)

        for product in result:
            print(&amp;quot;%s - %s - %s - %s&amp;quot; % 
                (product[&#39;id&#39;],
                 product[&#39;name&#39;],
                 product[&#39;keyName&#39;],
                 product[&#39;type&#39;][&#39;keyName&#39;])
            )
            

    def listPartitionTemplates(self):
        mask = &amp;quot;mask[partitionTemplates[data]]&amp;quot;
        result = self.client[&#39;SoftLayer_Hardware_Component_Partition_OperatingSystem&#39;].getAllObjects(mask=mask)
        print(&amp;quot;OS Type, Notes&amp;quot;)
        for os_type in result:
            print(&amp;quot;%s - %s&amp;quot; % (os_type[&#39;description&#39;],os_type[&#39;notes&#39;]))
            print(&amp;quot;\tTemplate id, Description&amp;quot;)
            for template in os_type[&#39;partitionTemplates&#39;]:
                print(&amp;quot;\t%s - %s &amp;quot; % (template[&#39;id&#39;],template[&#39;description&#39;]))
                for partition in template[&#39;data&#39;]:
                    print(&amp;quot;\t\t%s - %s %s&amp;quot; % 
                        (partition[&#39;partitionName&#39;], 
                         partition[&#39;partitionSize&#39;], 
                         &#39;Grow&#39; if partition[&#39;isGrow&#39;] else &#39;&#39;)
                    )

    def listRaidArrayTypes(self):
        result = self.client[&#39;SoftLayer_Configuration_Storage_Group_Array_Type&#39;].getAllObjects()
        for raid in result:
            print(&amp;quot;%s - %s - %s Min:%s Max:%s&amp;quot; % 
                (raid[&#39;id&#39;], 
                 raid[&#39;keyName&#39;], 
                 raid[&#39;description&#39;], 
                 raid[&#39;minimumDrives&#39;], 
                 raid[&#39;maximumDrives&#39;])
            ) 

    def listAvailableVlans(self, dc_id):
        mask = &amp;quot;mask[network,type,primaryRouter[datacenter]]&amp;quot;
        _filter = {
            &#39;networkVlans&#39; : {
                &#39;primaryRouter&#39;: {
                    &#39;datacenter&#39; : { &#39;id&#39;: {&#39;operation&#39;: dc_id} }
                }
            }
        }
        result = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask,filter=_filter)
        for vlan in result:
            print(&amp;quot;%s - VLAN: %s - Type: %s - %s &amp;quot; % 
                (vlan[&#39;id&#39;], 
                 vlan[&#39;vlanNumber&#39;],
                 vlan[&#39;type&#39;][&#39;keyName&#39;], 
                 vlan[&#39;primaryRouter&#39;][&#39;hostname&#39;])
            )

    def getServerPrices(self, package_id):
        mask = &amp;quot;mask[regions,items[prices],activeServerItems[prices]]&amp;quot;
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)
        print(&amp;quot;Location ID, Location Name&amp;quot;)
        for location in result[&#39;regions&#39;]:
            print(&amp;quot;%s - %s &amp;quot; % (location[&#39;location&#39;][&#39;location&#39;][&#39;id&#39;],location[&#39;description&#39;]))
        print(&amp;quot;Price ID, description, Monthly Fee, KeyName&amp;quot;)
        for item in result[&#39;items&#39;]:
            for prices in item[&#39;prices&#39;]:
                # only print the Default location price. 
                # The ordering system will replace the default price id for you if ordering in a non-usa region.
                if prices[&#39;locationGroupId&#39;] is &#39;&#39;:
                    # Some software has core restrictions that effect prices
                    if &#39;capacityRestrictionType&#39; in prices:
                        cores = &amp;quot;%s - %s&amp;quot; % (
                             prices[&#39;capacityRestrictionMinimum&#39;], 
                             prices[&#39;capacityRestrictionMaximum&#39;])
                        print(&amp;quot;%s, %s - %s cores, $%s, %s &amp;quot; % 
                            (prices[&#39;id&#39;],
                             item[&#39;description&#39;],
                             cores,prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                             item[&#39;keyName&#39;])
                        )
                    else:
                        print(&amp;quot;%s, %s, $%s, %s &amp;quot; % 
                            (prices[&#39;id&#39;],
                              item[&#39;description&#39;],
                              prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                              item[&#39;keyName&#39;])
                        )
        print(&amp;quot;======= SERVER ITEMS =======&amp;quot;)
        # serverItems = self.client[&#39;Product_Package&#39;].getActiveServerItems(id=package_id)
        print(&amp;quot;Price ID, description, Monthly Fee, KeyName&amp;quot;)
        for item in result[&#39;activeServerItems&#39;]:
            for prices in item[&#39;prices&#39;]:
                # only print the Default location price. 
                # The ordering system will replace the default price id for you if ordering in a non-usa region.
                if prices[&#39;locationGroupId&#39;] is &#39;&#39;:
                    print(&amp;quot;%s, %s, $%s, %s &amp;quot; % 
                        (prices[&#39;id&#39;],
                         item[&#39;description&#39;],
                         prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                         item[&#39;keyName&#39;])
                    )


    def gatherPriceIds(self,package_id,keyNames):
        # This wont work for prices that have core requirements
        mask = &amp;quot;mask[items[prices],activeServerItems[prices]]&amp;quot;
        items = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)

        prices = []
        sorted_items = {}

        for item in items[&#39;items&#39;]:
            for price in item[&#39;prices&#39;]:
                if price[&#39;locationGroupId&#39;] is &#39;&#39;: 
                    sorted_items[item[&#39;keyName&#39;]] = price[&#39;id&#39;]
        for item in items[&#39;activeServerItems&#39;]:
            for price in item[&#39;prices&#39;]:
                if price[&#39;locationGroupId&#39;] is &#39;&#39;: 
                    sorted_items[item[&#39;keyName&#39;]] = price[&#39;id&#39;]

        for keyName in keyNames:
            prices.append({&#39;id&#39;: int(sorted_items.get(keyName))})
        return prices

if __name__ == &amp;quot;__main__&amp;quot;:

    main = ordering()

    &amp;quot;&amp;quot;&amp;quot;
    Step 1, find the processor type you want
    269 - Quad E7-4800  Series (6 Drives) - 2U_QUAD_E74800_6_DRIVES : BARE_METAL_CPU
    &amp;quot;&amp;quot;&amp;quot;
    main.listServerPackages()
    package_id = 263

    &amp;quot;&amp;quot;&amp;quot;
    Step 2, collect all the pieces you want to order
    getServerPrices will list out all the keyNames and cost of components
    that can be ordered on a certain package. Will also list the DCs that this
    server is available in.
    &amp;quot;&amp;quot;&amp;quot;
    main.getServerPrices(package_id)
    location_id = 142776

    &amp;quot;&amp;quot;&amp;quot;
    Step 3, customize and place the order
    &amp;quot;&amp;quot;&amp;quot;
    main.listAvailableVlans(location_id)
    pub_vlan_id  = 2137279
    priv_vlan_id = 2137281
    main.listPartitionTemplates()
    main.listRaidArrayTypes()
    main.main(package_id,location_id,pub_vlan_id,priv_vlan_id)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exceptions-you-might-see&#34;&gt;Exceptions you might see&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidStorageGroups):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Defining partitions on secondary storage groups is only allowed for CentOS and Red Hat operating systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chose the right operating system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidLocation):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The location provided for this order is invalid.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Choose a correct location, locations should be displayed in getServerPrices()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidStorageGroups):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Storage group #1 does not have a grow partition. Each storage group with partitions defined must have a grow partition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure your partition has &amp;lsquo;isGrow&amp;rsquo; = 1 at some point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidStorageGroups):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Storage group #1 with size (GB) is smaller than the total partitioned size (501GB).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You forgot to assign an arraySize.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Storage_Group&#34;&gt;https://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Storage_Group&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Object Storage Uploader</title>
      <link>https://softlayer.github.io/python/swiftuploader/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/swiftuploader/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;We’ve recently added the option to import customer-supplied Virtual Hard Disks (VHDs) to our object storage offering. This is a great option for our customers who may have special virtual machines that they have spent hours perfecting. Since learning to import these images can pose a slight challenge, especially for those unfamiliar with object storage (OpenStack Swift), I wrote this blog to share scripts that will streamline the process.&lt;/p&gt;

&lt;h2 id=&#34;object-storage&#34;&gt;Object Storage&lt;/h2&gt;

&lt;p&gt;SoftLayer’s object storage is an enhanced version of OpenStack Swift. Although we’ve added features to it, the API (on the whole) is still the same. Two requirements of particular importance to storing disk images are limitations and requirements on large files. Swift limits all files to be 5GB or less. To support larger files users need to create a manifest file that combines smaller files into one large file.&lt;/p&gt;

&lt;p&gt;For example, to upload a 12GB VHD, the user is expected to segment the file into at least three files and then create a manifest that brings them back together.&lt;/p&gt;

&lt;h2 id=&#34;easier-importing&#34;&gt;Easier Importing&lt;/h2&gt;

&lt;p&gt;Since many people don’t have the time to learn the inner workings of Swift and would just like to get VHDs running on their servers, I have created a set scripts to simplify the process. They handle the authentication, file segmentation, and dynamic manifest creation for you, so you can get up and running quickly. You can easily access them here .&lt;/p&gt;

&lt;p&gt;You can use a Bash script or a Python 3 script. Both do the same thing, but depending on your environment you may prefer one over the other.&lt;/p&gt;

&lt;p&gt;But before we jump into the scripts, you’ll need to find your object storage username and password.&lt;/p&gt;

&lt;p&gt;To get those, log in to &lt;a href=&#34;http://control.softlayer.com&#34;&gt;http://control.softlayer.com&lt;/a&gt;, go to Storage-&amp;gt;Object Storage, select your cluster (I would suggest Dallas 5 for your first tests), and then click “View Credentials” in the top left of the page. You will be presented with a modal window containing your username and API Key (or password) for object storage.&lt;/p&gt;

&lt;h2 id=&#34;objectstorageuploader-sh-bash-edition&#34;&gt;ObjectStorageUploader.sh - Bash Edition&lt;/h2&gt;

&lt;p&gt;The idea behind this script is to have as little user interaction as possible. By calling the script with the proper parameters, you are able to walk away and let it do its thing.&lt;/p&gt;

&lt;p&gt;Simply place the bash script in your directory of VHDs. Call the script by passing in the image you want to upload, the location to upload it (container/filename), and your Swift username and password.&lt;/p&gt;

&lt;p&gt;$ ./ObjectStorageUpload.sh myOS.vhd &amp;lsquo;myContainer/myOS.vhd&amp;rsquo; &amp;lsquo;SLOS1234-1:SL1234&amp;rsquo; &amp;lsquo;apikey&amp;rsquo;&lt;/p&gt;

&lt;p&gt;It will begin the process of walking through the segments of the file and building up your object in object storage.&lt;/p&gt;

&lt;h2 id=&#34;objectstorageuploader-py-python-3-edition&#34;&gt;ObjectStorageUploader.py - Python 3 Edition&lt;/h2&gt;

&lt;p&gt;Before we begin, make sure you have installed the latest version of Python 3 located here: &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any Python 3 release will work, but I have been using Python 3.4.0 for my testing.&lt;/p&gt;

&lt;p&gt;The idea behind this script is to actually walk you through the process of uploading a file to Swift. Use this script via supplied parameters, in “interactive mode,” or a combination of the two. This is particularly handy for Windows users who are newer to scripting. Simply drop the script in the folder containing your VHDs, run it, and let it guide you through uploading the image to object storage.&lt;/p&gt;

&lt;p&gt;To execute the script, place it in the directory where you store your VHDs and double click it. It will then prompt you to select the file you want to upload.&lt;/p&gt;

&lt;p&gt;After selecting your file, you will be asked for your Swift username and password. Authentication will be attempted and, if successful, the list of containers in your cluster will be presented.&lt;/p&gt;

&lt;p&gt;Select the container you want to upload to and the script will begin uploading the VHD to object storage.&lt;/p&gt;

&lt;p&gt;If you prefer the command line arguments approach, you can pass in arguments to this script too. The signature is slightly different since all the opinions are optional.&lt;/p&gt;

&lt;p&gt;$ python ObjectStorageUpload.py -f myOS.vhd -t &amp;lsquo;myContainer/myOS.vhd&amp;rsquo; -u &amp;lsquo;SLOS1234-1:SL1234&amp;rsquo;&lt;/p&gt;

&lt;h2 id=&#34;importing-uploaded-vhd-as-image-templates&#34;&gt;Importing Uploaded VHD as Image Templates&lt;/h2&gt;

&lt;p&gt;Now that your image is in object storage you can import your VHD into the SoftLayer template, so you can use it to provision a new virtual server!&lt;/p&gt;

&lt;p&gt;Go to your image templates page in the portal and click the “Import Image” tab. Select the Swift account, cluster, container, and file that you uploaded. Give your new template a name and some notes. Make sure to fill out the Operating System information properly as this is used when setting up your new server, and finally click “Import.”&lt;/p&gt;

&lt;p&gt;Lastly, you will be emailed after the VHD has been processed by our system.&lt;/p&gt;

&lt;p&gt;-Adam Shaw&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ================================================================================
#     ObjectStorageUploader.py
#     © Copyright IBM Corporation 2014.
#     LICENSE: MIT (http://opensource.org/licenses/MIT)    
# ================================================================================

import argparse
import os
import math
import http.client
from urllib.parse import urlparse
from urllib.parse import quote


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(&amp;quot;-f&amp;quot;, &amp;quot;--file&amp;quot;, help=&amp;quot;file to upload to SWIFT&amp;quot;)
    parser.add_argument(&amp;quot;-u&amp;quot;, &amp;quot;--username&amp;quot;, help=&amp;quot;SWIFT username&amp;quot;)
    parser.add_argument(&amp;quot;-p&amp;quot;, &amp;quot;--password&amp;quot;, help=&amp;quot;SWIFT password (SoftLayer API key)&amp;quot;)
    parser.add_argument(&amp;quot;-c&amp;quot;, &amp;quot;--cluster&amp;quot;, help=&amp;quot;SWIFT cluster to use (default: dal05.objectstorage.softlayer.net)&amp;quot;)
    parser.add_argument(&amp;quot;-t&amp;quot;, &amp;quot;--target&amp;quot;, help=&amp;quot;location on SWIFT cluster to store file (container/filename.vhd)&amp;quot;)
    args = parser.parse_args()

    if not args.file:
        filename = select_file()
    else:
        filename = args.file

    if not args.username:
        swift_user_name, swift_password = get_swift_credentials()
    else:
        swift_user_name = args.username
        swift_password = args.password

    if not args.cluster:
        storage_url, auth_token = authenticate_swift(
            swift_user_name,
            swift_password,
            &amp;quot;dal05.objectstorage.softlayer.net&amp;quot;
        )
    else:
        storage_url, auth_token = authenticate_swift(
            swift_user_name,
            swift_password,
            args.cluster
        )

    if not args.target:
        container = select_container(storage_url, auth_token)
        swift_target_path = &amp;quot;{}/{}&amp;quot;.format(container, quote(filename))
    else:
        swift_target_path = args.target

    upload_file(filename, swift_target_path, storage_url, auth_token)


def select_file():
    current_path = (os.path.dirname(os.path.realpath(__file__)))
    print(&amp;quot;Files in {}&amp;quot;.format(current_path))
    files = get_file_list(current_path)
    return prompt_for_choice(files, &amp;quot;Select file for upload:&amp;quot;)


def get_file_list(path):
    files = []
    for file in os.listdir(path):
        if os.path.isfile(file):
            files.append(file)
    return files


def prompt_for_choice(list, prompt_label):
    for i, item in enumerate(list):
        if len(item):
            print(&amp;quot;{}) {}&amp;quot;.format(i, item))
    selected_index = input(prompt_label)
    if selected_index.isdigit():
        if 0 &amp;lt;= int(selected_index) &amp;lt; len(list):
            print()
            return list[int(selected_index)]

    print(&amp;quot;Invalid Input: {}&amp;quot;.format(selected_index))
    return prompt_for_choice(list, prompt_label)


def get_swift_credentials():
    swift_user_name = input(&amp;quot;Swift Username:&amp;quot;)
    swift_password = input(&amp;quot;Swift Password:&amp;quot;)
    return swift_user_name, swift_password


def authenticate_swift(swift_user_name, swift_password, selected_endpoint=&amp;quot;&amp;quot;):
    if selected_endpoint == &amp;quot;&amp;quot;:
        swift_endpoints = [
            &amp;quot;dal05.objectstorage.softlayer.net&amp;quot;,
            &amp;quot;sng01.objectstorage.softlayer.net&amp;quot;,
            &amp;quot;ams01.objectstorage.softlayer.net&amp;quot;,
        ]
        selected_endpoint = prompt_for_choice(
            swift_endpoints,
            &amp;quot;Select Object Storage Endpoint:&amp;quot;
        )

    print(&amp;quot;Authenticating...&amp;quot;)
    headers = {
        &amp;quot;X-Storage-User&amp;quot;: swift_user_name,
        &amp;quot;X-Storage-Pass&amp;quot;: swift_password
    }
    try:
        response = object_storage_request(
            selected_endpoint,
            &amp;quot;/auth/v1.0/&amp;quot;,
            headers
        )
    except Exception:
        swift_user_name, swift_password = get_swift_credentials()
        return authenticate_swift(swift_user_name, swift_password)
    print(&amp;quot;Success!&amp;quot;)

    storage_url = response.getheader(&amp;quot;X-Storage-Url&amp;quot;)
    auth_token = response.getheader(&amp;quot;X-Auth-Token&amp;quot;)

    return storage_url, auth_token


def select_container(storage_url, auth_token):
    url_tuple = urlparse(storage_url)

    headers = {&amp;quot;X-Auth-Token&amp;quot;: auth_token}
    try:
        response = object_storage_request(
            url_tuple.netloc,
            url_tuple.path,
            headers
        )
    except Exception:
        swift_user_name, swift_password = get_swift_credentials()
        storage_url, auth_token = authenticate_swift(swift_user_name, swift_password)
        return select_container(storage_url, auth_token)

    containers = response.read().decode(&amp;quot;utf-8&amp;quot;).split(&amp;quot;\n&amp;quot;)
    return prompt_for_choice(containers, &amp;quot;Select Container:&amp;quot;)


def object_storage_request(server, path, headers, method=&amp;quot;GET&amp;quot;, data=&amp;quot;&amp;quot;):
    connection = http.client.HTTPConnection(server)
    connection.request(method, path, data, headers)
    response = connection.getresponse()

    if 200 &amp;lt;= response.getcode() &amp;lt; 300:
        return response

    print(&amp;quot;Error {}: {}&amp;quot;.format(response.status, response.reason))
    raise Exception(response.status, response.reason)


def upload_file(filename, swift_target_path, storage_url, auth_token):
    url_tuple = urlparse(storage_url)
    headers = {&amp;quot;X-Auth-Token&amp;quot;: auth_token}

    file_size = os.path.getsize(filename)
    block_size = 1048576
    chunk_size = 5 * block_size
    chunks = math.ceil(file_size / chunk_size)

    print(&amp;quot;Reading in file&amp;quot;)
    file = open(filename, &#39;rb&#39;)
    print(&amp;quot;Uploading {} to \&amp;quot;{}\&amp;quot;&amp;quot;.format(filename, swift_target_path))
    for i in range(0, chunks):
        data = file.read(chunk_size)
        print(&amp;quot;Uploading part {} of {}&amp;quot;.format(i + 1, chunks))
        chunk_name = &amp;quot;chunk-{0:0&amp;gt;5}&amp;quot;.format(i)
        object_storage_request(
            url_tuple.netloc,
            &amp;quot;{}/{}/{}&amp;quot;.format(url_tuple.path, swift_target_path, chunk_name),
            headers,
            &amp;quot;PUT&amp;quot;,
            data
        )

    try:
        print(&amp;quot;Writing manifest file&amp;quot;)
        headers = {
            &amp;quot;X-Auth-Token&amp;quot;: auth_token,
            &amp;quot;X-Object-Manifest&amp;quot;: swift_target_path,
            &amp;quot;Content-Length&amp;quot;: 0,
        }
        object_storage_request(
            url_tuple.netloc,
            &amp;quot;{}/{}&amp;quot;.format(url_tuple.path, swift_target_path),
            headers,
            &amp;quot;PUT&amp;quot;
        )
    except Exception:
        return

    print(&amp;quot;File Uploaded!&amp;quot;)

if __name__ == &amp;quot;__main__&amp;quot;:
    main()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
# ================================================================================
#     ObjectStorageUploader.sh
#     © Copyright IBM Corporation 2014.
#     LICENSE: MIT (http://opensource.org/licenses/MIT)    
# ================================================================================

#./objectstorageupload.sh dsl-4.4.10.iso &#39;myContainer/file.vhd&#39; &#39;SLOS1234-1:SL1234&#39; &#39;apikey&#39;

fileToUpload=$1
swiftTargetPath=$2
swiftUsername=$3
swiftPassword=$4

swiftEndpoint=&#39;https://dal05.objectstorage.softlayer.net/auth/v1.0/&#39;

apiResponse=$(curl -X GET -H &amp;quot;X-Storage-User: $swiftUsername&amp;quot; -H &amp;quot;X-Storage-Pass: $swiftPassword&amp;quot; -s -i $swiftEndpoint)
swiftAuthToken=$(echo &amp;quot;$apiResponse&amp;quot; | grep &amp;quot;X-Auth-Token:&amp;quot; | sed &#39;s/X-Auth-Token: //g&#39; | tr -d &#39;\r&#39;)
swiftStorageUrl=$(echo &amp;quot;$apiResponse&amp;quot; | grep &amp;quot;X-Storage-Url:&amp;quot; | sed &#39;s/X-Storage-Url: //g&#39; | tr -d &#39;\r&#39;)

fileSize=$(wc -c $fileToUpload | awk &#39;{print $1}&#39;)
blockSize=1048576
let chunkSize=2048 #2GB chunks
let chunks=($fileSize/$blockSize+$chunkSize-1)/$chunkSize;

for ((i=0; i&amp;lt;chunks; i++))
do
   printf -v chunkName &amp;quot;chunk-%05d&amp;quot; $i
   let skipChunk=$i*chunkSize

   dd if=$fileToUpload bs=$blockSize count=$chunkSize skip=$skipChunk | curl -X PUT -H &amp;quot;X-Auth-Token: $swiftAuthToken&amp;quot; --data-binary @- &amp;quot;$swiftStorageUrl/$swiftTargetPath/$chunkName&amp;quot;
done

curl -X PUT -H &amp;quot;X-Auth-Token: $swiftAuthToken&amp;quot; -H &amp;quot;X-Object-Manifest: $swiftTargetPath&amp;quot; -H &amp;quot;Content-Length: 0&amp;quot; $swiftStorageUrl/$swiftTargetPath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Originally from &lt;a href=&#34;https://sldn.softlayer.com/blog/ashaw/object-storage-uploader&#34;&gt;SLDN&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
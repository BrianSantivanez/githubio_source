<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/index.xml</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Tue, 21 Feb 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Endurance Storage Replication</title>
      <link>https://softlayer.github.io/python/EnduranceReplication/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/EnduranceReplication/</guid>
      <description>&lt;p&gt;Some good starting reading.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://knowledgelayer.softlayer.com/procedure/endurance-replication&#34;&gt;https://knowledgelayer.softlayer.com/procedure/endurance-replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knowledgelayer.softlayer.com/procedure/endurance-snapshots&#34;&gt;https://knowledgelayer.softlayer.com/procedure/endurance-snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on the magic of storage ordering see the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py&#34;&gt;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py&#34;&gt;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This example should touch on all the basics of dealing with endurance storage replication volumes. This example uses the SoftLayer-python File manager a little bit for ordering&lt;/p&gt;

&lt;p&gt;TO authorize hosts that are NOT virtual guests, see the allowAccessFrom* methods in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
@package examples 
@author Christopher Gallo
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import logging
from pprint import pprint as pp

class example():

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;
        If you need debugging, uncomment these. be prepared for a lot of XML
        &amp;quot;&amp;quot;&amp;quot;
        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        self.client = SoftLayer.Client()
        self.storage = self.client[&#39;SoftLayer_Network_Storage&#39;]
        self.mgr = SoftLayer.FileStorageManager(self.client)
        # Broken up like this to look &#39;good&#39; on softlayer.github.io
        self.objectMask = &amp;quot;mask[&amp;quot;
            &amp;quot;id, username, capacityGb, bytesUsed,&amp;quot;
            &amp;quot;serviceResource[datacenter[name]],&amp;quot;
            &amp;quot;serviceResourceBackendIpAddress, &amp;quot; 
            &amp;quot;activeTransactionCount, &amp;quot;
            &amp;quot;fileNetworkMountAddress, &amp;quot;
            &amp;quot;snapshots[id,createDate], &amp;quot;
            &amp;quot;hourlySchedule, &amp;quot; 
            &amp;quot;allowedReplicationVirtualGuests[hostname], &amp;quot;
            &amp;quot;allowedVirtualGuests[hostname], &amp;quot;
            &amp;quot;replicationStatus, replicationPartners]&amp;quot;

    def orderStorage(self):
        &amp;quot;&amp;quot;&amp;quot;

        This will order endurance storage in HOU02 
        with 20G in size, and the 0.25IOPS/GB tier
        0.25, 2, 4 and 10 iops/g are tiers available. 
        &amp;quot;&amp;quot;&amp;quot;
        result = self.mgr.order_file_volume(
            storage_type=&amp;quot;storage_service_enterprise&amp;quot;,
            location = &amp;quot;hou02&amp;quot;,
            size = 20,
            tier_level = 0.25
            )
        pp(result)

    def orderSnapshot(self, volume_id):
        result = self.mgr.order_snapshot_space(
            volume_id=volume_id,
            capacity=20,
            tier = 0.25,
            upgrade=False)
        pp(result)

    def orderReplicant(self, volume_id, schedule):
        &amp;quot;&amp;quot;&amp;quot;
        Same as other ordering methods, schedule is 
        &amp;quot;HOURLY&amp;quot;, &amp;quot;DAILY&amp;quot; or &amp;quot;WEEKLY&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;
        result = self.mgr.order_replicant_volume(
            volume_id=volume_id,
            snapshot_schedule=schedule,
            location = &amp;quot;dal06&amp;quot;,
            tier = 0.25
        )
        pp(result)



    def listStoragePrices(self):
        &amp;quot;&amp;quot;&amp;quot;
        222 - Performance - PERFORMANCE_STORAGE_SERVICE
        240 - Endurance - CODENAME_PRIME_STORAGE
        If you feel like building the pricing object yourself, start here.
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[items[prices[pricingLocationGroup,categories],attributes]]&amp;quot;
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=240)
        for item in result[&#39;items&#39;]:
            print(&amp;quot;%s - %s - %s&amp;quot; % 
                (str(item[&#39;id&#39;]), item[&#39;description&#39;], item[&#39;keyName&#39;]) 
            # pp(item)
            for prices in item[&#39;prices&#39;]:
                if prices[&#39;locationGroupId&#39;] is  &#39;&#39;:
                    print &amp;quot;\t&amp;quot; + str(prices[&#39;id&#39;])
                # pp(prices)

    def listStorage(self):
        objectFilter = {
            &#39;nasNetworkStorage&#39;: {
                &#39;serviceResource&#39;: {
                    &#39;type&#39;: {
                        &#39;type&#39;: {
                            &#39;operation&#39;: &#39;!~ NAS&#39;
                        }
                    },
                    &#39;datacenter&#39;: {
                        &#39;name&#39;: {
                            &#39;operation&#39;: &#39;in&#39;,
                            &#39;options&#39;: [{
                                &#39;name&#39;: &#39;data&#39;,
                                &#39;value&#39;: [&#39;dal06&#39;,&#39;hou02&#39;]
                            }]
                        }
                    }
                },
                &#39;storageType&#39;: {
                    &#39;keyName&#39;: {
                        &#39;operation&#39;: &#39;ENDURANCE_FILE_STORAGE&#39;
                    }
                }
            }
        }
        result = self.client[&#39;Account&#39;].getNasNetworkStorage(
            mask=self.objectMask,filter=objectFilter)
        pp(result)

    def authHost(self, volume_id, host_id):

        guest = {
            &#39;id&#39;: host_id
        }
        self.storage.allowAccessFromVirtualGuest(guest, id=volume_id)

    def authReplicant(self, volume_id, host_id):

        guest = {
            &#39;id&#39;: host_id
        }
        self.storage.allowAccessToReplicantFromVirtualGuest(guest, id=volume_id)

    def createSnapSchedule(self, volume_id):
        # 
        # HOURLY, 24 copies, first minute of the hour. 
        self.storage.enableSnapshots(&#39;HOURLY&#39;, 24, 1, 0, 0, id=volume_id)

    def manualSnap(self, volume_id):
        self.storage.createSnapshot(&#39;Manual SNAP&#39;, id=volume_id)

    def getReplicantId(self, volume_id):
        &amp;quot;&amp;quot;&amp;quot;
        there might be more than 1 replicant id in this list if there are more 
        than 1 replicant targets. Or none of course.
        &amp;quot;&amp;quot;&amp;quot;
        result = self.storage.getReplicationPartners(id=volume_id)
        return result[0][&#39;id&#39;]
        

    def houIsDown(self, volume_id):
        replicate_to = main.getReplicantId(volume_id)
        self.storage.failoverToReplicant(replicate_to, id=volume_id)

    def houIsBack(self, volume_id):
        self.storage.failbackFromReplicant(id=volume_id)

    def volumeStatus(self, volume_id):
        result = self.storage.getObject(mask=self.objectMask, id=volume_id)
        pp(result)


if __name__ == &amp;quot;__main__&amp;quot;:


    host_a = 25206857
    host_b = 28630647
    main = example()
    main.listStorage()
    ### First we need to order a storage volume, and get its ID.
    # main.orderStorage()
    volume_id = 20017773
    ### Then we need to order snapshot space
    # main.orderSnapshot(volume_id)
    ### Then create a snapshot schedule.
    # main.createSnapSchedule(volume_id)
    ### Then Allow our host to access the volume
    # main.authHost(volume_id, [host_a])
    ### Create a manual snapshot for fun 
    # main.manualSnap(volume_id)
    ### Order replication space.
    # main.orderReplicant(volume_id, &#39;HOURLY&#39;)
    ### Allow our vm to access replicant volume
    # main.authReplicant(volume_id,host_b)
    ### Failover to replicant
    # main.houIsDown(volume_id)
    ### Failback to main
    # main.houIsBack(volume_id)
    ### Get some status
    # main.volumeStatus(volume_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 16, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170216/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170216/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was preventing punny code domains from being added using the &amp;lsquo;Add Bulk Domains&amp;rsquo; tool in the customer portal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added some backend code to help automation issues related to sending automated password reset emails.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Subnets and Bandwidth Pools</title>
      <link>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def getPublicSubnets(self):
        &amp;quot;&amp;quot;&amp;quot;
        subnet types
        SECONDARY_ON_VLAN = Portable IPs
        PRIMARY
        SUBNET_ON_VLAN = static subnets
        PRIMARY_6
        STATIC_IP_ROUTED
        GLOBAL_IP
        ADDITIONAL_PRIMARY
        &amp;quot;&amp;quot;&amp;quot;
        object_filter = {
            &#39;publicSubnets&#39; : {
                &#39;subnetType&#39; : {
                    &#39;operation&#39;: &#39;SECONDARY_ON_VLAN&#39;
                }
            }
        }

        subnets = self.client[&#39;Account&#39;].getPublicSubnets(filter=object_filter)
        pp(subnets)

    def getBandwidthPools(self):
        &amp;quot;&amp;quot;&amp;quot;
        bareMetalInstances and privateNetworkOnlyHardware
        may need to be included in the mask if applicable. 
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[hardware,virtualGuests]&amp;quot;
        pool = self.client[&#39;Account&#39;].getVirtualDedicatedRacks(mask=mask)
        pp(pool)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.getBandwidthPools()
    main.getPublicSubnets()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 8, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170208/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170208/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added a customerWaitTime field on the ticket search page in the customer portal. The customerWaitTime is the time the customer has been waiting for a response on a ticket. Multiple updates by the customer have no effect on this field and a reply by an employee resets the timer to zero.&lt;/li&gt;
&lt;li&gt;Pushed fix that tests that only numbers, letters, and spaces are allowed for all of the titles for contacts when trying to order an SSL certificate. The Symantec API does not accept any special characters in the &amp;lsquo;title&amp;rsquo; field for contact information and this was causing orders to fail.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved a bug preventing OS reloads from having partitions if reloading from a Customer Supplied OS (NO OS System).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 25, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170125/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170125/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue where the &amp;ldquo;Add to Order&amp;rdquo; button overlaps dropdown list content when the list is too long&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Published the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network&#34;&gt;SoftLayer_Network&lt;/a&gt; service for customers to interact with Customer Private Addressing.&lt;/li&gt;
&lt;li&gt;Refactored &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Order_Quote/getRecalculatedOrderContainer&#34;&gt;SoftLayer_Billing_Order_Quote::getRecalculatedOrderContainer()&lt;/a&gt;. Now returns the order container, instead of an array of an order container&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing Virtual Guests to fail reboot when residing on a host that has been marked as disabled for new instances.&lt;/li&gt;
&lt;li&gt;Fixed an issue that caused&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 12, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170111/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170111/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code to display the correct validation error when a number greater than 999 is used in the % field of Auto-Scaling policy actions. Previously a generic error message was displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Updatd our Microsoft Proxy to handle new TLS requirements by .NET. A recent update to .NET for windows 2012 r2 added a much more strict TLS validation for powershell which in turn caused Post Install Scripts to fail during download.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 5, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170105/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170105/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code to fix an issue that was causing an incorrect success message to be displayed when a user that has disabled/vpn only status clicked the Unlink button.&lt;/li&gt;
&lt;li&gt;Updated code to correct an error caused by a previously set VAT ID to be reported when the country selected does not use VAT.&lt;/li&gt;
&lt;li&gt;Updated the customer portal Order Form to include the new Cloud Object Storage general release offering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/python/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Bare Metal Server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot;

getDetails = client[&#39;SoftLayer_Hardware&#39;].getObject(mask=mask,id=296740)
pp(getDetails)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/rest/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Hardware/getObject&#34;&gt;&lt;code&gt;SoftLayer_Hardware::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Hardware/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Hardware/$serverId/getObject.json?objectMask=mask[billingItem[item,category,children[item,category]]]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/ruby/getVerboseBmDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getVerboseBmDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Bare Metal Server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

hardware_id = 26961063
object_mask = &#39;mask[id,fullyQualifiedDomainName,billingItem[id,item[id,description],category[name,id],children[id,item[id,description],category[name,id]]]]&#39;

getDetails = client[&#39;SoftLayer_Hardware&#39;].object_mask(object_mask).object_with_id(hardware_id).getObject
pp getDetails

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/python/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getVerboseVsiDetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=26961063)
pp(getDetails)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/rest/getVerboseVsiDetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getVerboseVsiDetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getObject&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/$virtualGuestId/getObject.json?objectMask=mask[billingItem[item,category,children[item,category]]]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: December 20, 2016</title>
      <link>https://softlayer.github.io/release_notes/20161219/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20161219/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added VAT id support for Belarus.&lt;/li&gt;
&lt;li&gt;Added code to cleanup tag references on Virtual Guests/NetScalers/Image templates that have been deleted from a customers account.&lt;/li&gt;
&lt;li&gt;Added firewall verification during server orders that checks if a selected VLAN is eligible to be used with a server hardware firewall.&lt;/li&gt;
&lt;li&gt;Added code to filter out firewall-ineligible VLANs in VLAN selection on the order form when a server hardware firewall is being ordered.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing accounts to become locked when linking more than 7 accounts to an IBMId in a 30 minute window.&lt;/li&gt;
&lt;li&gt;Fixed a bug that was stripping the underscore character from CNAME records hosted on the SoftLayer DNS system.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: December 7, 2016</title>
      <link>https://softlayer.github.io/release_notes/20161207/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20161207/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue where &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Brand/createObject&#34;&gt;SoftLayer_Brand::createObject&lt;/a&gt; requests coming in from the API were not creating an associated SoftLayer_Policy_Brand record. This bug resulted in user accounts created under the new brand to be unable to log in to the customer portal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/python/orderNetscaler/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/orderNetscaler/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class orderNetscaler():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        productOrder = {
        &#39;orderContainers&#39;: [
            {&amp;quot;hardware&amp;quot;: [{
                &amp;quot;primaryBackendNetworkComponent&amp;quot;: {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot;: 1234
                },
                &amp;quot;primaryNetworkComponent&amp;quot;: {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot;: 456
                }
            }],
            # REPLACE THIS with your location
            &amp;quot;location&amp;quot;: &amp;quot;DALLAS09&amp;quot;,
            &amp;quot;packageId&amp;quot;: 192,
            &amp;quot;quantity&amp;quot;: 1,
            # Price IDS for Netscaler and 2 IPs
            &amp;quot;prices&amp;quot;: [
                {&amp;quot;id&amp;quot;: 44964},
                {&amp;quot;id&amp;quot;: 17238}
            ]
        }]
        }
        order = self.client[&#39;Product_Order&#39;].placeOrder(productOrder)
        pp(order)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
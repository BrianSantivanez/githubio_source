<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/index.xml</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 29 Mar 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Release notes: March 29, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170329/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170329/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Corrected an issue with customers being unable to claim an order quote for Performance or Endurance storage.&lt;/li&gt;
&lt;li&gt;Fixed an issue where subusers on an account were not able to order Netscaler VPX services even with the appropriate portal permissions.&lt;/li&gt;
&lt;li&gt;Exception message was unclear when a user without the &amp;lsquo;ticket add&amp;rsquo; and &amp;lsquo;ticket view&amp;rsquo; permissions tried to create an upgrade order. New change accurately indicates that the user must have these two permissions in order to create an upgrade order.&lt;/li&gt;
&lt;li&gt;Resolved an issue where customers were unable to set the customer portal timezone to Brazil.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;When creating a ticket the &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Ticket&#34;&gt;SoftLayer_Ticket template object&lt;/a&gt; requires the assignedUserId property to be defined. This required the additional step of gathering the userId. Going forward the assignedUserId will default to the current user making the API call.
=======&lt;/li&gt;
&lt;li&gt;Resolved an issue where customers were unable to set the portal timezone to Brazil.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api-1&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;When creating a ticket the &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Ticket&#34;&gt;SoftLayer_Ticket template object&lt;/a&gt; requires the assignedUserId property to be defined. This required the additional step of gathering the userId. Going forward the assignedUserId will default to the current user making the API call.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Made changes to the way Post Provisioning Scripts work. The system now drops a small payload onto the customer device to download and execute the requested script, logging all responses to the customer&amp;rsquo;s syslog.&lt;/li&gt;
&lt;li&gt;Resolved an issue that was causing two primary IPv6 subnets to be created when ordering Network Gateway services.&lt;/li&gt;
&lt;li&gt;Pushed code to allow customers based in Serbia, Taiwan, Azerbaijan, Armenia, or South Africa to input Vat ID.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Reloading a server with a custom partition scheme</title>
      <link>https://softlayer.github.io/python/reloadCustomPartition/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/reloadCustomPartition/</guid>
      <description>&lt;p&gt;The following code allows you to reload a Bare Metal server with a custom partitioning scheme. You simply need to change the serverId and the partitions to suit your needs. Note that one partition must be marked as the &amp;lsquo;grow&amp;rsquo; partition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def main(self):
        serverId = 1154505
        config = {
        &amp;quot;upgradeHardDriveFirmware&amp;quot;: &amp;quot;0&amp;quot;,
        &amp;quot;upgradeBios&amp;quot;: &amp;quot;0&amp;quot;,
        &amp;quot;hardDrives&amp;quot;: [
            {
                &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Hardware_Component_HardDrive&amp;quot;,
                &amp;quot;partitions&amp;quot;: [
                    { &amp;quot;name&amp;quot;: &amp;quot;/boot&amp;quot;, &amp;quot;minimumSize&amp;quot;: &amp;quot;.25&amp;quot;},
                    { &amp;quot;name&amp;quot;: &amp;quot;/swap0&amp;quot;, &amp;quot;minimumSize&amp;quot;: &amp;quot;20&amp;quot;},
                    { &amp;quot;name&amp;quot;: &amp;quot;/&amp;quot;, &amp;quot;minimumSize&amp;quot;: &amp;quot;200&amp;quot;},
                    { &amp;quot;name&amp;quot;: &amp;quot;/tmp&amp;quot;, &amp;quot;minimumSize&amp;quot;: &amp;quot;200&amp;quot;},
                    { &amp;quot;name&amp;quot;: &amp;quot;/var&amp;quot;, &amp;quot;minimumSize&amp;quot;: &amp;quot;200&amp;quot;},
                    { &amp;quot;name&amp;quot;: &amp;quot;/remove&amp;quot;, &amp;quot;minimumSize&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;grow&amp;quot;: &amp;quot;1&amp;quot;}
                ]
            }
        ]
     }

        output = self.client[&#39;Hardware_Server&#39;].reloadOperatingSystem(&#39;FORCE&#39;, config, id=serverId)

        pp(config)
        print &amp;quot;RESULT\n&amp;quot;
        pp(output)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: March 20, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170320/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170320/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue with the customer portal timing out with a large number of billing items.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Prevent server errors when using SoftLayer_Product_Package getItemsFromImageTemplate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue provisioning Hourly Bare Metal servers that would require manual intervention to resolve.&lt;/li&gt;
&lt;li&gt;Fixes a problem that was preventing snapshots from being registered by the poller job.&lt;/li&gt;
&lt;li&gt;Allow hyphens in emails for IBMid&lt;/li&gt;
&lt;li&gt;Fixed an issue with offline migrations on windows virtual machines&lt;/li&gt;
&lt;li&gt;Update Hourly Bare Metal servers to check for mis-configurations before considering available&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Network Topology</title>
      <link>https://softlayer.github.io/python/networkTopology/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/networkTopology/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()


    def main(self):

        mask = &amp;quot;&amp;quot;&amp;quot;
            mask[attachedNetworkGateway[publicVlan,privateVlan],hardware[fullyQualifiedDomainName],
            network,networkSpace,primaryRouter[hostname],primarySubnet,subnets[networkIdentifier],virtualGuests[fullyQualifiedDomainName]
            ]
        &amp;quot;&amp;quot;&amp;quot;
        orderedVlans = {}
        result = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask)

        &amp;quot;&amp;quot;&amp;quot;
        This bit builds a nicely structured object of the network topology
        &amp;quot;&amp;quot;&amp;quot;
        for vlan in result:
            vlanNumber = vlan[&#39;vlanNumber&#39;]
            router,dc  = vlan[&#39;primaryRouter&#39;][&#39;hostname&#39;].split(&amp;quot;.&amp;quot;)
            if dc not in orderedVlans:
                orderedVlans[dc] = {}
            if router not in orderedVlans[dc]:
                orderedVlans[dc][router] = {}


            toAppend = {
                &#39;hardware&#39;: vlan[&#39;hardware&#39;],
                &#39;virtualGuests&#39;: vlan[&#39;virtualGuests&#39;],
                &#39;subnets&#39;: vlan[&#39;subnets&#39;]

            }

            if &#39;attachedNetworkGateway&#39; in vlan:
                if vlan[&#39;networkSpace&#39;] == &#39;PUBLIC&#39;:
                    gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;publicVlan&#39;][&#39;vlanNumber&#39;]
                elif vlan[&#39;networkSpace&#39;] == &#39;PRIVATE&#39;:
                    gatewayVlan = vlan[&#39;attachedNetworkGateway&#39;][&#39;privateVlan&#39;][&#39;vlanNumber&#39;]
                if gatewayVlan not in orderedVlans[dc][router]:
                    orderedVlans[dc][router][gatewayVlan] = {}
                orderedVlans[dc][router][gatewayVlan][vlanNumber] = toAppend
                orderedVlans[dc][router][gatewayVlan][&#39;gateway&#39;] = True
            else:
                orderedVlans[dc][router][vlanNumber] = toAppend

        &amp;quot;&amp;quot;&amp;quot;
        This bit prints out everything nicely-ish.
        &amp;quot;&amp;quot;&amp;quot;
        for dc in orderedVlans:
            print(&amp;quot;DC: %s&amp;quot; % dc)
            for router in orderedVlans[dc]:
                print(&amp;quot;\tRouter: %s&amp;quot; % router)
                for vlan in orderedVlans[dc][router]:
                    if &#39;gateway&#39; in orderedVlans[dc][router][vlan]:
                        print(&amp;quot;\t\tGATEWAY VLAN: %s&amp;quot; % vlan )
                        for vlanInner in orderedVlans[dc][router][vlan]:

                            if isinstance(vlanInner, int):
                                print(&amp;quot;\t\t\tVLAN: %s&amp;quot; % vlanInner )
                                if len(orderedVlans[dc][router][vlan][vlanInner][&#39;hardware&#39;]):
                                    print(&amp;quot;\t\t\t  ==SERVERS==&amp;quot;)
                                    for hardware in orderedVlans[dc][router][vlan][vlanInner][&#39;hardware&#39;]:
                                        print(&amp;quot;\t\t\t\t%s&amp;quot; % hardware[&#39;fullyQualifiedDomainName&#39;])
                                if len(orderedVlans[dc][router][vlan][vlanInner][&#39;virtualGuests&#39;]):
                                    print(&amp;quot;\t\t\t  ==VIRTUAL SERVERS==&amp;quot;)
                                    for virtualGuest in orderedVlans[dc][router][vlan][vlanInner][&#39;virtualGuests&#39;]:
                                        print(&amp;quot;\t\t\t\t%s&amp;quot; % virtualGuest[&#39;fullyQualifiedDomainName&#39;])
                                if len(orderedVlans[dc][router][vlan][vlanInner][&#39;subnets&#39;]):
                                    print(&amp;quot;\t\t\t  ==SUBNETS==&amp;quot;)
                                    for subnet in orderedVlans[dc][router][vlan][vlanInner][&#39;subnets&#39;]:
                                        print(&amp;quot;\t\t\t\t%s&amp;quot; % subnet[&#39;networkIdentifier&#39;])
                    else:
                        print(&amp;quot;\t\tVLAN: %s&amp;quot; % vlan )

                    if len(orderedVlans[dc][router][vlan][&#39;hardware&#39;]):
                        print(&amp;quot;\t\t  ==SERVERS==&amp;quot;)
                        for hardware in orderedVlans[dc][router][vlan][&#39;hardware&#39;]:
                            print(&amp;quot;\t\t\t%s&amp;quot; % hardware[&#39;fullyQualifiedDomainName&#39;])
                    if len(orderedVlans[dc][router][vlan][&#39;virtualGuests&#39;]):
                        print(&amp;quot;\t\t  ==VIRTUAL SERVERS==&amp;quot;)
                        for vm in orderedVlans[dc][router][vlan][&#39;virtualGuests&#39;]:
                            print(&amp;quot;\t\t\t%s&amp;quot; % vm[&#39;fullyQualifiedDomainName&#39;])
                    if len(orderedVlans[dc][router][vlan][&#39;subnets&#39;]):
                        print(&amp;quot;\t\t  ==SUBNETS==&amp;quot;)
                        for subnet in orderedVlans[dc][router][vlan][&#39;subnets&#39;]:
                            print(&amp;quot;\t\t\t%s&amp;quot; % subnet[&#39;networkIdentifier&#39;])


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DC: sjc03
    Router: bcr02a
        VLAN: 904
          ==VIRTUAL SERVERS==
            jrh-jump.poc.engineering
          ==SUBNETS==
            10.168.140.0
    Router: bcr01a
        GATEWAY VLAN: 1436
            VLAN: 1440
              ==SERVERS==
                jd-test-5600-srv.secore.com
                jd-cos-testing-sjc03.secore.com
              ==SUBNETS==
                10.161.111.64
          ==SERVERS==
            jd-5600-test.secore.com
          ==SUBNETS==
            10.161.110.0
    Router: fcr02a
        VLAN: 857
          ==VIRTUAL SERVERS==
            jrh-jump.poc.engineering
          ==SUBNETS==
            169.44.183.224
    Router: fcr01a
        VLAN: 1296
          ==SERVERS==
            jd-test-5600-srv.secore.com
            jd-cos-testing-sjc03.secore.com
          ==SUBNETS==
            169.45.115.16
            2607:f0d0:2601:00cc:0000:0000:0000:0000
        VLAN: 1273
          ==SERVERS==
            jd-5600-test.secore.com
          ==SUBNETS==
            169.44.136.64
            2607:f0d0:2601:0065:0000:0000:0000:0000
            2607:f0d0:2601:00ac:0000:0000:0000:0000
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: March 8, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170308/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170308/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Corrected an issue with ordering Fixed Configuration Servers. When a customer selected an operating system before a datacenter on fixed configurations servers the portal would show errors about storage groups being needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added the getBuckets and &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Hub_Cleversafe_Account/getCloudObjectStoragePolicy&#34;&gt;getCloudObjectStoragePolicy&lt;/a&gt; methods to the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Hub_Cleversafe_Account&#34;&gt;SoftLayer_Network_Storage_Hub_Cleversafe_Account&lt;/a&gt; service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: March 02, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170302/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170302/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved a bug when calling the methods &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi/failoverToReplicant&#34;&gt;failoverToReplicant&lt;/a&gt;, &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi/failbackFromReplicant&#34;&gt;failbackFromReplicant&lt;/a&gt;, or &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi/immediateFailoverToReplicant&#34;&gt;immediateFailoverToReplicant&lt;/a&gt; from the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi&#34;&gt;SoftLayer_Network_Storage_Iscsi&lt;/a&gt; class instead of the base &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage&#34;&gt;SoftLayer_Network_Storage&lt;/a&gt;, in which the method would return true, but the process would not be started.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Created an internal tool to unlink Bluemix and SoftLayer accounts. Customers can now open a ticket to request their Bluemix and SoftLayer accounts be unlinked.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Use IBMid to get SL api key</title>
      <link>https://softlayer.github.io/rest/IBMidtoSLKey/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/IBMidtoSLKey/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#!/bin/bash
# Parameters: &amp;lt;IBMid username&amp;gt; &amp;lt;IBMid password&amp;gt; &amp;lt;SL Account number (optional)&amp;gt;
# Requires: curl, jq and xmllint installed
creds=$(curl -s -u &#39;bx:bx&#39; -k -X POST --header &#39;Content-Type: application/x-www-form-urlencoded&#39; --header &#39;Accept: application/json&#39; -d &amp;quot;grant_type=password&amp;amp;response_type=cloud_iam,ims_portal&amp;amp;username=${1}&amp;amp;password=${2}&amp;amp;ims_account=${3}&amp;quot; https://iam.ng.bluemix.net/oidc/token)

ims_token=$(echo $creds | jq -r &#39;.ims_token&#39;)
ims_user_id=$(echo $creds | jq -r &#39;.ims_user_id&#39;)
echo $creds &amp;gt; creds.json

# Get api key over xmlrpc
curl -s -X POST -d &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;
&amp;lt;methodCall&amp;gt;
  &amp;lt;methodName&amp;gt;getObject&amp;lt;/methodName&amp;gt;
  &amp;lt;params&amp;gt;
    &amp;lt;param&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;struct&amp;gt;
          &amp;lt;member&amp;gt;
            &amp;lt;name&amp;gt;headers&amp;lt;/name&amp;gt;
            &amp;lt;value&amp;gt;
              &amp;lt;struct&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;authenticate&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;userId&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;int&amp;gt;$ims_user_id&amp;lt;/int&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;complexType&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;PortalLoginToken&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;authToken&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;$ims_token&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;SoftLayer_User_CustomerInitParameters&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;id&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;int&amp;gt;$ims_user_id&amp;lt;/int&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;SoftLayer_ObjectMask&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;mask&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;mask[username;apiAuthenticationKeys.authenticationKey]&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
              &amp;lt;/struct&amp;gt;
            &amp;lt;/value&amp;gt;
          &amp;lt;/member&amp;gt;
        &amp;lt;/struct&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/param&amp;gt;
  &amp;lt;/params&amp;gt;
&amp;lt;/methodCall&amp;gt;&amp;quot; https://api.softlayer.com/xmlrpc/v3/SoftLayer_User_Customer &amp;gt; response.xml
export SL_USERNAME=$(cat response.xml | xmllint --xpath &#39;(//params/param/value/struct/member/value/string/text())[1]&#39; -)
export SL_API_KEY=$(cat response.xml | xmllint --xpath &#39;(//params/param/value/struct/member/value/array/data/value/struct/member/value/string/text())[1]&#39; -)

echo &amp;quot;SL_USERNAME: $SL_USERNAME&amp;quot;
echo &amp;quot;SL_API_KEY: $SL_API_KEY&amp;quot;

rm -f creds.json response.xml # comment out to debug
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 23, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170223/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170223/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Portal Exception message was unclear when a user without &amp;lsquo;ticket add&amp;rsquo; and &amp;lsquo;ticket view&amp;rsquo; permissions tried to create an upgrade order. New change accurately indicates that the user must have these two permissions in order to create an upgrade order.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed two separate bugs in Endurance and Performance Storage provisioning where provisions were stalling due to API call timeout.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Endurance Storage Replication</title>
      <link>https://softlayer.github.io/python/EnduranceReplication/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/EnduranceReplication/</guid>
      <description>&lt;p&gt;Some good starting reading.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://knowledgelayer.softlayer.com/procedure/endurance-replication&#34;&gt;https://knowledgelayer.softlayer.com/procedure/endurance-replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knowledgelayer.softlayer.com/procedure/endurance-snapshots&#34;&gt;https://knowledgelayer.softlayer.com/procedure/endurance-snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on the magic of storage ordering see the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py&#34;&gt;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py&#34;&gt;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This example should touch on all the basics of dealing with endurance storage replication volumes. This example uses the SoftLayer-python File manager a little bit for ordering&lt;/p&gt;

&lt;p&gt;TO authorize hosts that are NOT virtual guests, see the allowAccessFrom* methods in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graceful vs Immediate failover&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/immediateFailoverToReplicant&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/immediateFailoverToReplicant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/failoverToReplicant&#34;&gt;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/failoverToReplicant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failback is always immediate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
@package examples 
@author Christopher Gallo
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import logging
from pprint import pprint as pp

class example():

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;
        If you need debugging, uncomment these. be prepared for a lot of XML
        &amp;quot;&amp;quot;&amp;quot;
        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        self.client = SoftLayer.Client()
        self.storage = self.client[&#39;SoftLayer_Network_Storage&#39;]
        self.mgr = SoftLayer.FileStorageManager(self.client)
        # Broken up like this to look &#39;good&#39; on softlayer.github.io
        self.objectMask = &amp;quot;mask[&amp;quot;
            &amp;quot;id, username, capacityGb, bytesUsed, serviceResource[datacenter[name]], &amp;quot;
            &amp;quot;serviceResourceBackendIpAddress, activeTransactionCount, &amp;quot;
            &amp;quot;fileNetworkMountAddress, snapshots[id,createDate], hourlySchedule, &amp;quot; 
            &amp;quot;allowedReplicationVirtualGuests[hostname], allowedVirtualGuests[hostname], &amp;quot;
            &amp;quot;replicationStatus, replicationPartners]&amp;quot;

    def orderStorage(self):
        &amp;quot;&amp;quot;&amp;quot;
        This will order endurance storage in HOU02 with 20G in size, and the 0.25IOPS/GB tier
        0.25, 2, 4 and 10 iops/g are tiers available. 
        &amp;quot;&amp;quot;&amp;quot;
        result = self.mgr.order_file_volume(
            storage_type=&amp;quot;storage_service_enterprise&amp;quot;,
            location = &amp;quot;hou02&amp;quot;,
            size = 20,
            tier_level = 0.25
            )
        pp(result)

    def orderSnapshot(self, volume_id):
        result = self.mgr.order_snapshot_space(
            volume_id=volume_id,
            capacity=20,
            tier = 0.25,
            upgrade=False)
        pp(result)

    def orderReplicant(self, volume_id, schedule):
        &amp;quot;&amp;quot;&amp;quot;
        Same as other ordering methods, schedule is 
        &amp;quot;HOURLY&amp;quot;, &amp;quot;DAILY&amp;quot; or &amp;quot;WEEKLY&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;
        result = self.mgr.order_replicant_volume(
            volume_id=volume_id,
            snapshot_schedule=schedule,
            location = &amp;quot;dal06&amp;quot;,
            tier = 0.25
        )
        pp(result)



    def listStoragePrices(self):
        &amp;quot;&amp;quot;&amp;quot;
        222 - Performance - PERFORMANCE_STORAGE_SERVICE
        240 - Endurance - CODENAME_PRIME_STORAGE
        If you feel like building the pricing object yourself, start here.
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[items[prices[pricingLocationGroup,categories],attributes]]&amp;quot;
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=240)
        for item in result[&#39;items&#39;]:
            print(&amp;quot;%s - %s - %s&amp;quot; % 
                (str(item[&#39;id&#39;]), item[&#39;description&#39;], item[&#39;keyName&#39;]) 
            # pp(item)
            for prices in item[&#39;prices&#39;]:
                if prices[&#39;locationGroupId&#39;] is  &#39;&#39;:
                    print &amp;quot;\t&amp;quot; + str(prices[&#39;id&#39;])
                # pp(prices)

    def listStorage(self):
    &amp;quot;&amp;quot;&amp;quot;
    Super complicated objectFilter. Mostly here as an example of how to do an IN filter.
    Returns all storage that is in DAL06, HOU02, is NOT NAS, and is Endurance_File_Storage
    &amp;quot;&amp;quot;&amp;quot;
        objectFilter = {
            &#39;nasNetworkStorage&#39;: {
                &#39;serviceResource&#39;: {
                    &#39;type&#39;: {
                        &#39;type&#39;: {&#39;operation&#39;: &#39;!~ NAS&#39;}
                    },
                    &#39;datacenter&#39;: {
                        &#39;name&#39;: {
                            &#39;operation&#39;: &#39;in&#39;,
                            &#39;options&#39;: [{
                                &#39;name&#39;: &#39;data&#39;,
                                &#39;value&#39;: [&#39;dal06&#39;,&#39;hou02&#39;]
                            }]
                        }
                    }
                },
                &#39;storageType&#39;: {
                    &#39;keyName&#39;: {&#39;operation&#39;: &#39;ENDURANCE_FILE_STORAGE&#39;}
                }
            }
        }
        result = self.client[&#39;Account&#39;].getNasNetworkStorage(
            mask=self.objectMask,filter=objectFilter)
        pp(result)

    def authHost(self, volume_id, host_id):
    &amp;quot;&amp;quot;&amp;quot;
    each host that needs to mount the volume needs to be authorized.
    host and volume need to be in the same DC
    &amp;quot;&amp;quot;&amp;quot;
        guest = {
            &#39;id&#39;: host_id
        }
        self.storage.allowAccessFromVirtualGuest(guest, id=volume_id)

    def authReplicant(self, volume_id, host_id):
    &amp;quot;&amp;quot;&amp;quot;
    each host that needs to mount the REPLICANT needs to be authorized.
    host and volume need to be in the same DC
    &amp;quot;&amp;quot;&amp;quot;
        guest = {
            &#39;id&#39;: host_id
        }
        self.storage.allowAccessToReplicantFromVirtualGuest(guest, id=volume_id)

    def createSnapSchedule(self, volume_id):
        # HOURLY, 24 copies, first minute of the hour. 
        self.storage.enableSnapshots(&#39;HOURLY&#39;, 24, 1, 0, 0, id=volume_id)

    def manualSnap(self, volume_id):
        self.storage.createSnapshot(&#39;Manual SNAP&#39;, id=volume_id)

    def getReplicantId(self, volume_id):
        &amp;quot;&amp;quot;&amp;quot;
        there might be more than 1 replicant id in this list if there are more 
        than 1 replicant targets. Or none of course.
        &amp;quot;&amp;quot;&amp;quot;
        result = self.storage.getReplicationPartners(id=volume_id)
        return result[0][&#39;id&#39;]
        

    def houIsDown(self, volume_id, now=False):

        replicate_to = main.getReplicantId(volume_id)
        if now:
            self.storage.immediateFailoverToReplicant(replicate_to, id=volume_id)
        else
            self.storage.failoverToReplicant(replicate_to, id=volume_id)

    def houIsBack(self, volume_id):
        self.storage.failbackFromReplicant(id=volume_id,now=False)

    def volumeStatus(self, volume_id):
        result = self.storage.getObject(mask=self.objectMask, id=volume_id)
        pp(result)


if __name__ == &amp;quot;__main__&amp;quot;:
&amp;quot;&amp;quot;&amp;quot;
Covers each of the steps required to create a storage volume, and then fail it over.
The ordering methods will need to be slightly modified for block storage. 
everything else should be good as is.

&amp;quot;&amp;quot;&amp;quot;

    host_a = 25206857
    host_b = 28630647
    main = example()
    main.listStorage()
    ### First we need to order a storage volume, and get its ID.
    # main.orderStorage()
    volume_id = 20017773

    ### Then we need to order snapshot space
    # main.orderSnapshot(volume_id)

    ### Then create a snapshot schedule.
    # main.createSnapSchedule(volume_id)

    ### Then Allow our host to access the volume
    # main.authHost(volume_id, [host_a])

    ### Create a manual snapshot for fun 
    # main.manualSnap(volume_id)

    ### Order replication space.
    # main.orderReplicant(volume_id, &#39;HOURLY&#39;)

    ### Allow our vm to access replicant volume
    # main.authReplicant(volume_id,host_b)

    ### Failover to replicant
    # main.houIsDown(volume_id)

    ### Failback to main
    # main.houIsBack(volume_id)

    ### Get some status
    # main.volumeStatus(volume_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 16, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170216/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170216/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was preventing punny code domains from being added using the &amp;lsquo;Add Bulk Domains&amp;rsquo; tool in the customer portal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added some backend code to help automation issues related to sending automated password reset emails.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Subnets and Bandwidth Pools</title>
      <link>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/bandwidthPoolsAndSubnets/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def getPublicSubnets(self):
        &amp;quot;&amp;quot;&amp;quot;
        subnet types
        SECONDARY_ON_VLAN = Portable IPs
        PRIMARY
        SUBNET_ON_VLAN = static subnets
        PRIMARY_6
        STATIC_IP_ROUTED
        GLOBAL_IP
        ADDITIONAL_PRIMARY
        &amp;quot;&amp;quot;&amp;quot;
        object_filter = {
            &#39;publicSubnets&#39; : {
                &#39;subnetType&#39; : {
                    &#39;operation&#39;: &#39;SECONDARY_ON_VLAN&#39;
                }
            }
        }

        subnets = self.client[&#39;Account&#39;].getPublicSubnets(filter=object_filter)
        pp(subnets)

    def getBandwidthPools(self):
        &amp;quot;&amp;quot;&amp;quot;
        bareMetalInstances and privateNetworkOnlyHardware
        may need to be included in the mask if applicable. 
        &amp;quot;&amp;quot;&amp;quot;
        mask = &amp;quot;mask[hardware,virtualGuests]&amp;quot;
        pool = self.client[&#39;Account&#39;].getVirtualDedicatedRacks(mask=mask)
        pp(pool)


if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.getBandwidthPools()
    main.getPublicSubnets()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: February 8, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170208/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170208/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added a customerWaitTime field on the ticket search page in the customer portal. The customerWaitTime is the time the customer has been waiting for a response on a ticket. Multiple updates by the customer have no effect on this field and a reply by an employee resets the timer to zero.&lt;/li&gt;
&lt;li&gt;Pushed fix that tests that only numbers, letters, and spaces are allowed for all of the titles for contacts when trying to order an SSL certificate. The Symantec API does not accept any special characters in the &amp;lsquo;title&amp;rsquo; field for contact information and this was causing orders to fail.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved a bug preventing OS reloads from having partitions if reloading from a Customer Supplied OS (NO OS System).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 25, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170125/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170125/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue where the &amp;ldquo;Add to Order&amp;rdquo; button overlaps dropdown list content when the list is too long&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Published the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network&#34;&gt;SoftLayer_Network&lt;/a&gt; service for customers to interact with Customer Private Addressing.&lt;/li&gt;
&lt;li&gt;Refactored &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Order_Quote/getRecalculatedOrderContainer&#34;&gt;SoftLayer_Billing_Order_Quote::getRecalculatedOrderContainer()&lt;/a&gt;. Now returns the order container, instead of an array of an order container&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing Virtual Guests to fail reboot when residing on a host that has been marked as disabled for new instances.&lt;/li&gt;
&lt;li&gt;Fixed an issue that caused&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 12, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170111/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170111/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code to display the correct validation error when a number greater than 999 is used in the % field of Auto-Scaling policy actions. Previously a generic error message was displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Updatd our Microsoft Proxy to handle new TLS requirements by .NET. A recent update to .NET for windows 2012 r2 added a much more strict TLS validation for powershell which in turn caused Post Install Scripts to fail during download.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: January 5, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170105/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170105/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code to fix an issue that was causing an incorrect success message to be displayed when a user that has disabled/vpn only status clicked the Unlink button.&lt;/li&gt;
&lt;li&gt;Updated code to correct an error caused by a previously set VAT ID to be reported when the country selected does not use VAT.&lt;/li&gt;
&lt;li&gt;Updated the customer portal Order Form to include the new Cloud Object Storage general release offering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
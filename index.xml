<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 14 Nov 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Release notes: November 14, 2016</title>
      <link>https://softlayer.github.io/release_notes/20161114/</link>
      <pubDate>Mon, 14 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20161114/</guid>
      <description>

&lt;h4 id=&#34;portal:249ab8aa11d016a4d7223936ce69d627&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Corrected an issue on the Bluemix order forms where the order form content appear in a different language based on the www.softlayer.com language cookie. The order forms are set to English until all language translations have been completed.&lt;/li&gt;
&lt;li&gt;Increased the space allowed for addresses when making payments via PayPal. The shorter space was causing PayPal transactions to fail when an account used a bunch of unicode characters.&lt;/li&gt;
&lt;li&gt;Fixed an issue where users might be immediately logged out after navigating to the order forms due to a non-public API call.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:249ab8aa11d016a4d7223936ce69d627&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:249ab8aa11d016a4d7223936ce69d627&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: November 8, 2016</title>
      <link>https://softlayer.github.io/release_notes/20161108/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20161108/</guid>
      <description>

&lt;h4 id=&#34;portal:980d6a3d74c875a184e9fbdf4cfdf36a&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Improved the ordering form performance when provisioning (Beta) Object Storage offerings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:980d6a3d74c875a184e9fbdf4cfdf36a&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:980d6a3d74c875a184e9fbdf4cfdf36a&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code that would stop the sending of order completed and approved emails for Bluemix services on Linked Accounts.&lt;/li&gt;
&lt;li&gt;Resolved an issue that was causing Guest disk billing items to have incorrect category codes after an OS reload order was placed.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Virtual Guest</title>
      <link>https://softlayer.github.io/go/createVsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/createVsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

func main() {

          sess := session.New()
          doCreateVMTest(sess)
}


func doCreateVMTest(sess *session.Session) {
    service := services.GetVirtualGuestService(sess)

    // Create a Virtual_Guest instance as a template
    vGuestTemplate := datatypes.Virtual_Guest{}

    //Set Creation values - use helpers from the sl package to set pointer values
    vGuestTemplate.Hostname = sl.String(&amp;quot;sample&amp;quot;)
    vGuestTemplate.Domain = sl.String(&amp;quot;example.com&amp;quot;)
    vGuestTemplate.MaxMemory = sl.Int(4096)
    vGuestTemplate.StartCpus = sl.Int(1)
    vGuestTemplate.Datacenter = &amp;amp;datatypes.Location{Name: sl.String(&amp;quot;wdc01&amp;quot;)}
    vGuestTemplate.OperatingSystemReferenceCode = sl.String(&amp;quot;UBUNTU_LATEST&amp;quot;)
    vGuestTemplate.LocalDiskFlag = sl.Bool(true)

    vGuest, err := service.Mask(&amp;quot;id;domain&amp;quot;).CreateObject(&amp;amp;vGuestTemplate)
    if err != nil {
        fmt.Printf(&amp;quot;%s\n&amp;quot;, err)
        return
    } else {
        fmt.Printf(&amp;quot;\nNew Virtual Guest created with ID %d\n&amp;quot;, *vGuest.Id)
        fmt.Printf(&amp;quot;Domain: %s\n&amp;quot;, *vGuest.Domain)
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Listing Virtual Guests</title>
      <link>https://softlayer.github.io/go/listvsis/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/listvsis/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

func main() {

          sess := session.New()
          doListAccountVMsTest(sess)
}

func doListAccountVMsTest(sess *session.Session) {
    // Get the Account service
    service := services.GetAccountService(sess)

    // List VMs
    vms, err := service.Mask(&amp;quot;id;hostname;domain&amp;quot;).Limit(10).GetVirtualGuests()
    if err != nil {
        fmt.Printf(&amp;quot;Error retrieving Virtual Guests from Account: %s\n&amp;quot;, err)
        return
    } else {
        fmt.Println(&amp;quot;VMs under Account:&amp;quot;)
    }

    for _, vm := range vms {
        fmt.Printf(&amp;quot;\t[%d]%s.%s\n&amp;quot;, *vm.Id, *vm.Hostname, *vm.Domain)
    }
}

func handleError(err error) {
    apiErr := err.(sl.Error)
    fmt.Printf(
        &amp;quot;Exception: %s\nMessage: %s\nHTTP Status Code: %d\n&amp;quot;,
        apiErr.Exception,
        apiErr.Message,
        apiErr.StatusCode)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/python/migratevsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/migratevsi/</guid>
      <description>&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/python/list_packages/&#34;&gt;python example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

# The package for Virtual Guests
packageId = 46

# Our exising VSI ID
virtualGuests = [
    {
        &amp;quot;id&amp;quot;:25367125
    }
]

# The price item id for a 25GB Local Primary Drive.
prices = [
   {
     &amp;quot;id&amp;quot;:13899,
     &amp;quot;categories&amp;quot;:[
        {
            &amp;quot;categoryCode&amp;quot;:&amp;quot;guest_disk0&amp;quot;,
            &amp;quot;id&amp;quot;:81,
            &amp;quot;name&amp;quot;:&amp;quot;First Disk&amp;quot;
        }
    ]
   }
]

# Maintenance Window time. The migration requires downtime
properties = [
    {
        &amp;quot;name&amp;quot;:&amp;quot;MAINTENANCE_WINDOW&amp;quot;,
        &amp;quot;value&amp;quot;:&amp;quot;now&amp;quot;
    }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

# The parameters needed for the migration order
orderData = {
   &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;properties&amp;quot;: properties,
   &amp;quot;virtualGuests&amp;quot; : virtualGuests,
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/ruby/migrateVsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/migrateVsi/</guid>
      <description>&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/ruby/list_packages/&#34;&gt;ruby example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
client = softlayer_client.service_named(&#39;Product_Order&#39;)

# The package for Virtual Guests
packageId = 46

# The price item id for a 25GB Local Primary Drive.
prices = [
{
  &#39;id&#39; =&amp;gt; 13899,
    &#39;categories&#39; =&amp;gt; [
       {
           &#39;categoryCode&#39; =&amp;gt; &#39;guest_disk0&#39;,
           &#39;id&#39; =&amp;gt; 81,
           &#39;name&#39; =&amp;gt; &#39;First Disk&#39;
       }
   ]
  }
]

# Maintenance Window time. The migration requires downtime
properties = [
  {
      &#39;name&#39; =&amp;gt; &#39;MAINTENANCE_WINDOW&#39;,
      &#39;value&#39; =&amp;gt; &#39;now&#39;
  }
]

productOrder = {
  &#39;complexType&#39; =&amp;gt; &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
  &#39;packageId&#39; =&amp;gt; packageId,
  &#39;prices&#39; =&amp;gt; prices,
  &#39;properties&#39; =&amp;gt; properties,
  &#39;virtualGuests&#39; =&amp;gt; [ {&#39;id&#39; =&amp;gt; &#39;25367125&#39;} ]
}

begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(productOrder)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/rest/migrateVsiDisk/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/migrateVsiDisk/</guid>
      <description>

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder/&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder`&lt;/p&gt;

&lt;h4 id=&#34;getting-the-proper-priceid:0917d8d3e4e14bfc914922c3c7a41c85&#34;&gt;Getting the proper priceId&lt;/h4&gt;

&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/python/list_packages/&#34;&gt;python example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from &lt;code&gt;main.getPackage(126)&lt;/code&gt; to &lt;code&gt;main.getPackage(46)&lt;/code&gt;. The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X POST --data @migrate.json
https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{  
   &amp;quot;parameters&amp;quot;:[  
      {  
         &amp;quot;complexType&amp;quot;:&amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;,
         &amp;quot;packageId&amp;quot;:46,
         &amp;quot;prices&amp;quot;:[  
            {  
               &amp;quot;id&amp;quot;:13899,
               &amp;quot;categories&amp;quot;:[  
                  {  
                     &amp;quot;categoryCode&amp;quot;:&amp;quot;guest_disk0&amp;quot;,
                     &amp;quot;id&amp;quot;:81,
                     &amp;quot;name&amp;quot;:&amp;quot;First Disk&amp;quot;
                  }
               ]
            }
         ],
         &amp;quot;properties&amp;quot;:[  
            {  
               &amp;quot;name&amp;quot;:&amp;quot;MAINTENANCE_WINDOW&amp;quot;,
               &amp;quot;value&amp;quot;:&amp;quot;now&amp;quot;
            }
         ],
         &amp;quot;virtualGuests&amp;quot;:[  
            {  
               &amp;quot;id&amp;quot;:25367125
            }
         ]
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: October 25, 2016</title>
      <link>https://softlayer.github.io/release_notes/20161024/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20161024/</guid>
      <description>

&lt;h4 id=&#34;portal:a0369bf2fcef1321a15cbe3d489d9ed9&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Changed portal layout and color scheme to match the new IBM Bluemix branding.&lt;/li&gt;
&lt;li&gt;Fixed an issue where SoftLayer tiered support customers could create a ticket with severity level higher than 4.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:a0369bf2fcef1321a15cbe3d489d9ed9&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/getFileBlockEncryptedLocations&#34;&gt;getFileBlockEncryptedLocations&lt;/a&gt; method to the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage&#34;&gt;SoftLayer_Network_Storage&lt;/a&gt; service. This method can be used to get a list of SoftLayer_Location objects corresponding to datacenters which support Encryption at Rest for File and Block Storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:a0369bf2fcef1321a15cbe3d489d9ed9&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;When a user&amp;rsquo;s password expired, we are no longer automatically sending the password reset email. Instead, the user will be informed that their password has expired and that they need to use the Reset Password link on the login page to change it.&lt;/li&gt;
&lt;li&gt;Updated automatically generated customer emails to reflect new branding.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: October 17, 2016</title>
      <link>https://softlayer.github.io/release_notes/20161017/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20161017/</guid>
      <description>

&lt;h4 id=&#34;portal:cc444b922321a3766266875981e31e1f&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Updated the page title and icon on the control portal compute order forms to reflect IBM Bluemix.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:cc444b922321a3766266875981e31e1f&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue with the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer_OpenIdConnect/getMappedAccounts&#34;&gt;getMappedAccounts&lt;/a&gt; method not correctly displaying the  accountLinks section of the output.&lt;/li&gt;
&lt;li&gt;When any sub-brand is created by a brand master account it now automatically has the brand attribute ALLOW_ACCOUNT_CREATION set to 1.This resolves an issue what required Sales Operations to manually set the ALLOW_ACCOUNT_CREATION to 1 on sub-branded accounts.&lt;/li&gt;
&lt;li&gt;Allowed the IAM token service to indicate that 2 factor authentication has been fulfilled in the case it has been performed recently. This will be done by including a flag in IAM token to indicate that 2FA is not needed. This is for the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer_OpenIdConnect/getPortalLoginTokenOpenIdConnect&#34;&gt;getPortalLoginTokenOpenIdConnect&lt;/a&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:cc444b922321a3766266875981e31e1f&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring Examples</title>
      <link>https://softlayer.github.io/python/monitoring/</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/monitoring/</guid>
      <description>&lt;p&gt;ResponseStatus codes and what they mean.
&lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Monitor_Version1_Query_Result&#34;&gt;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Monitor_Version1_Query_Result&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0: CRITICAL&lt;/li&gt;
&lt;li&gt;1: Warning&lt;/li&gt;
&lt;li&gt;2: OK&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4 - 5: Unknown Status, Contact Support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information:
&lt;a href=&#34;https://stackoverflow.com/questions/37662607/python-api-monitoring-manager&#34;&gt;https://stackoverflow.com/questions/37662607/python-api-monitoring-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example gets the status of your Basic and Advanced monitoring.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        return True

    def getBasicStatus(self, server_id):
        mask = &amp;quot;mask[fullyQualifiedDomainName, networkMonitors[lastResult]]&amp;quot;
        server = self.client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(id=server_id, mask=mask )
        pp(server)

    def getAdvancedStatus(self, server_id):
        mask = &amp;quot;mask[fullyQualifiedDomainName, monitoringAgents[configurationValues[definition]]]&amp;quot;
        server = self.client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(id=server_id, mask=mask )
        pp(server)

if __name__ == &amp;quot;__main__&amp;quot;:
    server = 24880113
    main = example()
    main.getBasicStatus(server)
    main.getAdvancedStatus(server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example configures the CPU monitor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
Configure the section &#39;CPU&#39; from the &#39;Cpu, Disk, and Memory Monitoring Agent&#39; agent.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Monitoring_Agent/applyConfigurationValues
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Monitoring_Agent_Configuration_Value

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# The IP address of the server or VSI to configure.
ipAddres = &amp;quot;159.8.52.188&amp;quot;

configuration = {
    &#39;Graph System CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph Total CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph User CPU Usage&#39;: &amp;quot;True&amp;quot;,
    &#39;Graph I/O Wait CPU Usage&#39;: &amp;quot;True&amp;quot;,
    &#39;Processor Queue Length Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Error Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Error Alarm Threshold&#39;: &amp;quot;99&amp;quot;,
    &#39;CPU Usage Warning Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Warning Alarm Threshold&#39;: &amp;quot;82&amp;quot;,
    &#39;Processor Queue Length Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;Max Queue Length&#39;: &amp;quot;4&amp;quot;
}

# The agent&#39;s name we wish to configure.
agentName = &#39;Cpu, Disk, and Memory Monitoring Agent&#39;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
monitoringService = client[&#39;SoftLayer_Monitoring_Agent&#39;]

# Getting the monitoring agents installed in the server or VSI.
try:
    objectMask = &#39;mask[monitoringAgents[configurationValues[definition]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# Getting the agent to configure.
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;name&#39;] == agentName]
if len(agents) == 0:
    print(&amp;quot;Unable to find the agent: &amp;quot; + agentName)
    exit(1)
agent = agents[0]

# Creating an SoftLayer_Monitoring_Agent_Configuration_Value skeleton
# which contains the configuration for the agent.
configurationValues = []
for item in configuration.keys():
    itemFound = False
    for value in agent[&#39;configurationValues&#39;]:
        if value[&#39;definition&#39;][&#39;name&#39;].strip().upper() == item.strip().upper():
            itemFound = True
            configurationValue = value
            configurationValue[&#39;value&#39;] = configuration[item].strip().upper()
            configurationValues.append(configurationValue)
            break
    if not itemFound:
        print(&amp;quot;The configuration: &amp;quot; + item + &amp;quot; is not available for the agent.&amp;quot;)


# Calling the SoftLayer_Monitoring_Agent::applyConfigurationValues method
# to apply the changes in the agent.
# Note: In case there is no changes in the agent configuration the method
# will return error.
try:
    result = monitoringService.applyConfigurationValues(configurationValues, id=agent[&#39;id&#39;])
    print(json.dumps(result, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to apply the configuration in the monitoring agent.&amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example GETs the monitoring configuration&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Get the configuration of the monitoring agent in a server or VSI.

Important manual pages:
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Monitoring_Agent/
http://sldn.softlayer.com/article/Object-Masks

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

ipAddres = &amp;quot;169.54.54.164&amp;quot;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]

try:
    objectMask = &#39;mask[monitoringAgents[configurationTemplate[configurationSections[subSections]],&#39; \
                 &#39;configurationValues[id, value, profileId, agentId, configurationDefinitionId,&#39; \
                 &#39;profile, definition[attributes, section, valueType]]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# We will get the configuration of the active agents
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;statusName&#39;] == &amp;quot;Active&amp;quot;]
server[&#39;monitoringAgents&#39;] = agents

configs = []
for agent in server[&#39;monitoringAgents&#39;]:
    config = {}
    config[&#39;agent&#39;] = agent[&#39;name&#39;]
    config[&#39;id&#39;] = agent[&#39;id&#39;]
    sections = []
    for section in agent[&#39;configurationTemplate&#39;][&#39;configurationSections&#39;]:
        sect = {}
        subsects = []
        hasProfile = False
        profileIds = []
        confs = []
        for subsection in section[&#39;subSections&#39;]:
            values = [value for value in agent[&#39;configurationValues&#39;] if
                      value[&#39;definition&#39;][&#39;sectionId&#39;] == subsection[&#39;id&#39;]]
            for value in values:
                conf = {}
                if value[&#39;profileId&#39;] == &amp;quot;&amp;quot;:
                    conf[value[&#39;definition&#39;][&#39;name&#39;]] = value[&#39;value&#39;]
                    confs.append(conf)
                else:
                    hasProfile = True
                    profileIds.append(value[&#39;profileId&#39;])      
        sect[&#39;name&#39;] = section[&#39;name&#39;]
        if not hasProfile:
            sect[&#39;configuration&#39;] = confs
            sections.append(sect)
        else:
            profileIds = list(set(profileIds))
            profiles = []
            for profileId in profileIds:
                profile = {}
                valueConfs = []
                valueProfiles = [value for value in agent[&#39;configurationValues&#39;] if
                                 value[&#39;profileId&#39;] == profileId]
                profile[&#39;name&#39;] = valueProfiles[0][&#39;profile&#39;][&#39;name&#39;]
                for valueProfile in valueProfiles:
                    value = {}
                    value[valueProfile[&#39;definition&#39;][&#39;name&#39;]] = valueProfile[&#39;value&#39;]
                    valueConfs.append(value)
                profile[&#39;configuration&#39;] = valueConfs
                profiles.append(profile)
            sect[&#39;profiles&#39;] = profiles
            sections.append(sect)
    config[&#39;sections&#39;] = sections
    configs.append(config)
print(json.dumps(configs, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example views the results of the monitoring&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
View the reports for the  &amp;quot;CPU&amp;quot; section from the
&#39;Cpu, Disk, and Memory Monitoring Agent&#39; monitor agent.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Monitoring_Agent/getGraphData
http://sldn.softlayer.com/reference/services/Monitoring_Agent_Configuration_Value/getMetricDataType

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# The IP address of the server or VSI to configure.
ipAddres = &amp;quot;159.8.52.188&amp;quot;

startDate = &#39;2016-01-02&#39;
endDate = &#39;2016-01-08&#39;

# Set &amp;quot;True&amp;quot; the reports you wish to see.
reports = {
    &#39;Graph System CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph Total CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph User CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph I/O Wait CPU Usage&#39;: &amp;quot;True&amp;quot;,
}

# The agent&#39;s name we wish to see the reports.
agentName = &#39;Cpu, Disk, and Memory Monitoring Agent&#39;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
monitoringService = client[&#39;SoftLayer_Monitoring_Agent&#39;]
agentConfigurationService = client[&#39;Monitoring_Agent_Configuration_Value&#39;]

# Getting the monitoring agents installed in the server or VSI.
try:
    # Setting an object mask to retrieve information about the monitoring agents.
    objectMask = &#39;mask[monitoringAgents[configurationValues[definition]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# Getting the agent to see the reports.
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;name&#39;] == agentName]
if len(agents) == 0:
    print(&amp;quot;Unable to find the agent: &amp;quot; + agentName)
    exit(1)
agent = agents[0]

# Creating the list of SoftLayer_Container_Metric_Data_Type objects
metricDataTypes = []
for item in reports.keys():
    if reports[item].strip().upper() == &amp;quot;TRUE&amp;quot;:
        itemFound = False
        for value in agent[&#39;configurationValues&#39;]:
            if value[&#39;definition&#39;][&#39;name&#39;].strip().upper() == item.strip().upper():
                itemFound = True
                if value[&#39;value&#39;].strip().upper() == &amp;quot;TRUE&amp;quot;:
                    try:
                        metrics = agentConfigurationService.getMetricDataType(id=value[&#39;id&#39;])
                        metricDataTypes.append(metrics)
                    except SoftLayer.SoftLayerAPIError as e:
                        print(&amp;quot;Unable to get the metrics. &amp;quot; % (e.faultCode, e.faultString))
                else:
                    print(&amp;quot;The report: &amp;quot; + item + &amp;quot; is disable for the agent. Please review the agent configuration.&amp;quot;)
                    exit(1)
                break
        if not itemFound:
            print(&amp;quot;The configuration: &amp;quot; + item + &amp;quot; is not available for the agent.&amp;quot;)

# Getting the reports.
try:
    data = monitoringService.getGraphData(metricDataTypes, startDate, endDate, id=agent[&#39;id&#39;])
    print(json.dumps(data, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the report. &amp;quot;  % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: October 11, 2016</title>
      <link>https://softlayer.github.io/release_notes/20161011/</link>
      <pubDate>Tue, 11 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20161011/</guid>
      <description>

&lt;h4 id=&#34;portal:cd5434fd597b526b4c079e06b3495802&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Updated the error message when ordering Public Subnets on a VLAN with HSRP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:cd5434fd597b526b4c079e06b3495802&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Corrected an issue with the information for the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer_OpenIdConnect/getOpenIdRegistrationInfoFromCode&#34;&gt;getOpenIdRegistrationInfoFromCode&lt;/a&gt; method for the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer_OpenIdConnect&#34;&gt;SoftLayer_User_Customer_OpenIdConnect&lt;/a&gt; service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:cd5434fd597b526b4c079e06b3495802&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed a potential issue that caused order verifications to fail in certain cases for accounts that have large numbers of Endurance or Performance volumes.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://softlayer.github.io/python/order_quote_advanced/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/order_quote_advanced/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.OrderingManager(self.client)


    def orderQuote(self, quote_id):
        # If you have more than 1 server in the quote, you will need to append
        # 
        guests = {
            &#39;hostname&#39;: &#39;quotetest&#39;, 
            &#39;domain&#39;: &#39;example.com&#39;

        }
        
        quote = self.client[&#39;Billing_Order_Quote&#39;]
        quote_container = quote.getRecalculatedOrderContainer(id=quote_id)
        container = quote_container[&#39;orderContainers&#39;][0]

        container[&#39;quantity&#39;] = 1
        container[&#39;virtualGuests&#39;] = []
        container[&#39;virtualGuests&#39;].append(guests)

        # SoftLayer.exceptions.SoftLayerAPIError: SoftLayerAPIError(SoftLayer_Exception_Order_MismatchedQuantity): The number of servers (2) does not match the order quantity (1).
        # the hardware variable was getting filled out for some reason, even though there were no hardware on this quote.
        container[&#39;hardware&#39;] = None


        container[&#39;presetId&#39;] = None
        container[&#39;provisionScripts&#39;] = [&#39;https://gist.githubusercontent.com/myscript.py&#39;]
        # http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
        # The order of containers passed in needs to match the order they are assigned to either hardware or virtualGuests
        container[&#39;sshKeys&#39;] = [{&#39;sshKeyIds&#39;: [1234]} ]

        # Edit this ID to change the location of the order.
        # this is AMS03
        container[&#39;location&#39;] = 814994
        result = self.client[&#39;Product_Order&#39;].verifyOrder(container)
        pp(result)

    def getOrderContainer(self,quote_id):
        quote = self.client[&#39;Billing_Order_Quote&#39;]
        container = quote.getRecalculatedOrderContainer(id=quote_id)
        return container[&#39;orderContainers&#39;][0]


    def listQuotes(self):
        quotes = self.client[&#39;SoftLayer_Account&#39;].getActiveQuotes()
        pp(quotes)

    def listLocations(self):
        locations = self.client[&#39;SoftLayer_Location&#39;].getDatacenters()
        pp(locations)

    def listSshKeys(self):
        keys = self.client[&#39;SoftLayer_Account&#39;].getSshKeys()
        pp(keys)

if __name__ == &amp;quot;__main__&amp;quot;:
    quote_id = 1942633
    main = example()
    # main.main()
    # main.listQuotes()
    # quote = main.getOrderContainer(quote_id)
    # pp(quote)
    # main.listLocations()
    # main.listSshKeys()
    main.orderQuote(quote_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with SoftLayer and Terraform</title>
      <link>https://softlayer.github.io/terraform/getting_started/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/terraform/getting_started/</guid>
      <description>

&lt;h3 id=&#34;overview:90d2f5b321651d7e838fc1e3cf5f419b&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions. Terraform supports several Cloud Service providers by default but is also extensible with plugins written in Go.&lt;/p&gt;

&lt;p&gt;The infrastructure Terraform can manage includes low-level components such as compute instances, storage, and networking, as well as high-level components such as DNS entries, SaaS features, etc.&lt;/p&gt;

&lt;h3 id=&#34;installing-terraform:90d2f5b321651d7e838fc1e3cf5f419b&#34;&gt;Installing Terraform&lt;/h3&gt;

&lt;p&gt;You can grab the installer for your specific Operating System on the Terraform &lt;a href=&#34;https://www.terraform.io/downloads.html&#34;&gt;Download Page&lt;/a&gt;. Terraform will run on OS X, Linux, FreeBSD and Windows.&lt;/p&gt;

&lt;h3 id=&#34;terraform-configuration:90d2f5b321651d7e838fc1e3cf5f419b&#34;&gt;Terraform Configuration&lt;/h3&gt;

&lt;p&gt;Terraform uses text files to describe infrastructure and to set variables. These text files are called Terraform configurations and end in &lt;code&gt;.tf&lt;/code&gt;. This section talks about the format of these files as well as how they&amp;rsquo;re loaded.&lt;/p&gt;

&lt;p&gt;The format of the configuration files are able to be in two formats: Terraform format and JSON. The Terraform format is more human-readable, supports comments, and is the generally recommended format for most Terraform files. The JSON format is meant for machines to create, modify, and update, but can also be done by Terraform operators if you prefer. Terraform format ends in &lt;code&gt;.tf&lt;/code&gt; and JSON format ends in &lt;code&gt;.tf.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to put credentials in your configuration file, you can leave them out and use &lt;code&gt;provider &amp;quot;softlayer&amp;quot; {}&lt;/code&gt; in the configuration file and instead set these environment variables:&lt;/p&gt;

&lt;p&gt;SOFTLAYER_USERNAME: Your SoftLayer username
SOFTLAYER_API_KEY: Your API key&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a SoftLayer Virtual Guest</title>
      <link>https://softlayer.github.io/terraform/create_vsi/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/terraform/create_vsi/</guid>
      <description>

&lt;p&gt;This example will create a virtual guest running the latest offered version of Ubuntu in the Dallas 09 Datacenter.&lt;/p&gt;

&lt;h3 id=&#34;configuration-file:48b6aebd917fbdd1d3a987aab2d6e8bb&#34;&gt;Configuration File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;provider &amp;quot;softlayer&amp;quot; {}

# Virtual Server created with existing SSH Key already in SoftLayer 

resource &amp;quot;softlayer_virtual_guest&amp;quot; &amp;quot;terraform&amp;quot; {
    name = &amp;quot;terraform&amp;quot;
    domain = &amp;quot;tinylab.info&amp;quot;
    ssh_keys = [&amp;quot;563523&amp;quot;]
    image = &amp;quot;UBUNTU_LATEST_64&amp;quot;
    region = &amp;quot;dal09&amp;quot;
    public_network_speed = 100
    cpu = 1
    ram = 1024
    local_disk = &amp;quot;false&amp;quot;
    hourly_billing = &amp;quot;true&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;terraform-plan:48b6aebd917fbdd1d3a987aab2d6e8bb&#34;&gt;Terraform Plan&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;terraform plan&lt;/code&gt; command will look at any &lt;code&gt;.tf&lt;/code&gt; file in the current directory and show you what Terraform would do if we applied the configuration aka running &lt;code&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan

+ softlayer_virtual_guest.terraform
    cpu:                  &amp;quot;1&amp;quot;
    domain:               &amp;quot;tinylab.info&amp;quot;
    hourly_billing:       &amp;quot;true&amp;quot;
    image:                &amp;quot;UBUNTU_LATEST_64&amp;quot;
    ipv4_address:         &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    ipv4_address_private: &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    local_disk:           &amp;quot;false&amp;quot;
    name:                 &amp;quot;terraform&amp;quot;
    private_network_only: &amp;quot;false&amp;quot;
    public_network_speed: &amp;quot;100&amp;quot;
    ram:                  &amp;quot;1024&amp;quot;
    region:               &amp;quot;dal09&amp;quot;
    ssh_keys.#:           &amp;quot;1&amp;quot;
    ssh_keys.0:           &amp;quot;563523&amp;quot;


Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;terraform-apply:48b6aebd917fbdd1d3a987aab2d6e8bb&#34;&gt;Terraform apply&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ terraform apply 

  cpu:                  &amp;quot;&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;
  domain:               &amp;quot;&amp;quot; =&amp;gt; &amp;quot;tinylab.info&amp;quot;
  hourly_billing:       &amp;quot;&amp;quot; =&amp;gt; &amp;quot;true&amp;quot;
  image:                &amp;quot;&amp;quot; =&amp;gt; &amp;quot;UBUNTU_LATEST_64&amp;quot;
  ipv4_address:         &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
  ipv4_address_private: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
  local_disk:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;
  name:                 &amp;quot;&amp;quot; =&amp;gt; &amp;quot;terraform&amp;quot;
  private_network_only: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;
  public_network_speed: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;100&amp;quot;
  ram:                  &amp;quot;&amp;quot; =&amp;gt; &amp;quot;1024&amp;quot;
  region:               &amp;quot;&amp;quot; =&amp;gt; &amp;quot;dal09&amp;quot;
  ssh_keys.#:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;
  ssh_keys.0:           &amp;quot;&amp;quot; =&amp;gt; &amp;quot;563523&amp;quot;

$ terraform show 

softlayer_virtual_guest.terraform:
  id = 24618829
  cpu = 1
  dedicated_acct_host_only = false
  domain = tinylab.info
  hourly_billing = true
  image = UBUNTU_LATEST_64
  ipv4_address = 169.44.104.77
  ipv4_address_private = 10.143.223.17
  local_disk = false
  name = terraform
  private_network_only = true
  public_network_speed = 100
  ram = 1024
  region = dal09
  ssh_keys.# = 1
  ssh_keys.0 = 563523
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: September 20, 2016</title>
      <link>https://softlayer.github.io/release_notes/20160920/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20160920/</guid>
      <description>

&lt;h4 id=&#34;portal:0a2f0d50e6727c60129af255ec508f65&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api:0a2f0d50e6727c60129af255ec508f65&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer/getOpenIdConnectMigrationState&#34;&gt;getOpenIdConnectMigrationState&lt;/a&gt; to the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_User_Customer&#34;&gt;SoftLayer_User_Customer&lt;/a&gt; service. This new method allows users to query whether an open invitation exists for a user.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend:0a2f0d50e6727c60129af255ec508f65&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an bug that was causing Netscaler provisioning issues due to hostname/domain validation errors.&lt;/li&gt;
&lt;li&gt;Fixed an issue with NO OS servers that was causing the Evault Bare Metal restore transaction to fail.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
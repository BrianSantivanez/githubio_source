<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>SoftLayer API Examples on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Tue, 20 Jun 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Create a Security group</title>
      <link>https://softlayer.github.io/python/createsecuritygroup/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/createsecuritygroup/</guid>
      <description>

&lt;p&gt;The Security Group offering is currently in Beta. The use of this feature is restricted to select users. When the Beta period is over, security groups will be available for all users. Contact sgbeta@us.ibm.com using &amp;lsquo;Security Groups&amp;rsquo; in the subject line with any questions.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-security-group&#34;&gt;Creating a Security Group&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
# For nice debug output:
from pprint import pprint as pp
# Create an object template to create the item.
objectTemplate = {
	&#39;accountId&#39;: YOUR_ACCOUNT_ID,
    &#39;name&#39;: &#39;pythonCreatedGroupExample&#39;,
    &#39;description&#39;: &#39;Sec Group created via python&#39;
} 
client = SoftLayer.Client()
try:
    result = client[&#39;SoftLayer_Network_SecurityGroup&#39;].createObjects([objectTemplate])
    pp(result)
except SoftLayer.SoftLayerAPIError as e:
    pp(&#39;Failed ... Unable to create a new SecGroup  faultCode=%s, faultString=%s&#39;
        % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Provision Times</title>
      <link>https://softlayer.github.io/python/provisiontimes/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/provisiontimes/</guid>
      <description>&lt;p&gt;Goes through orders and prints out each transaction that provisioned a server or virtual server. Calculates provision time from the time the order was placed, till the time the transaction went to COMPLETE.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Order: 15866609 - 2017-06-09T10:42:04-06:00
    FQDN, Status, transaction id, elapsed time
    sgtest.cdetest.info, COMPLETE, 57090965, 383.0
Order: 15861187 - 2017-06-09T09:07:49-06:00
    FQDN, Status, transaction id, elapsed time
    jumpbox.cdetest.info, COMPLETE, 57080823, 774.0
Order: 15860993 - 2017-06-09T08:53:22-06:00
    FQDN, Status, transaction id, elapsed time
Order: 15853891 - 2017-06-09T04:47:32-06:00
    FQDN, Status, transaction id, elapsed time
    d1.cdetest.info, COMPLETE, 57055133, 2148.0
    d2.cdetest.info, COMPLETE, 57055135, 2159.0
    d3.cdetest.info, COMPLETE, 57055137, 2155.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp
from datetime import datetime

class bcolors:
    HEADER = &#39;\033[95m&#39;
    OKBLUE = &#39;\033[94m&#39;
    OKGREEN = &#39;\033[92m&#39;
    WARNING = &#39;\033[93m&#39;
    FAIL = &#39;\033[91m&#39;
    ENDC = &#39;\033[0m&#39;
    BOLD = &#39;\033[1m&#39;
    UNDERLINE = &#39;\033[4m&#39;

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        # Accounts with a large number of orders will want to use this filter.
        startDate = &amp;quot;04/01/2017 01:00:00&amp;quot;
        endDate = &amp;quot;06/12/2017 01:00:00&amp;quot;
        theFilter1 = {
            &#39;orders&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;betweenDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [startDate]},
                        {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]}
                    ]
                }
            }
        }
        mask = &amp;quot;mask[items[hostName, domainName, categoryCode, billingItem[id,provisionTransaction]]]&amp;quot;
        items = 10
        offset = 0
        limit = 10
        while items == 10:
            orders = self.client[&#39;SoftLayer_Account&#39;].getOrders(filter=theFilter1, offset=offset, limit=limit, mask=mask)
            items = len(orders)
            offset = offset + limit
            self.printOrderTimes(orders)

    def printOrderTimes(self, orders):
        for order in orders:
            print(&amp;quot;Order: %s - %s &amp;quot; % (order[&#39;id&#39;], order[&#39;createDate&#39;]))
            print(&amp;quot;\tFQDN, Status, transaction id, elapsed time&amp;quot;)
            # pp(order)
            createDate = order[&#39;createDate&#39;]
            timeWarn = 600
            timeRed = 1200
            for item in order[&#39;items&#39;]:
                if item[&#39;categoryCode&#39;] == &#39;server&#39;:
                    # 1 hour
                    timeWarn = 3600
                    # 4 hours 
                    timeRed = 14400
                elif item[&#39;categoryCode&#39;] == &#39;guest_core&#39;:
                    # 10 minutes
                    timeWarn = 600
                    # 20 minutes
                    timeRed = 1200

                if item[&#39;categoryCode&#39;] == &#39;server&#39; or item[&#39;categoryCode&#39;] == &#39;guest_core&#39;:

                    try:
                        transaction = item[&#39;billingItem&#39;][&#39;provisionTransaction&#39;]
                    except KeyError:
                        # Likely a canceled order
                        continue

                    #python timezones are weird and I don&#39;t want to deal with them. 
                    t_s = createDate[:-6] 
                    t_e = transaction[&#39;statusChangeDate&#39;][:-6] 


                    FMT = &#39;%Y-%m-%dT%H:%M:%S&#39;
                    tdelta = datetime.strptime(t_e,FMT) - datetime.strptime(t_s,FMT)
                    fqdn = &amp;quot;%s.%s&amp;quot; % (item[&#39;hostName&#39;], item[&#39;domainName&#39;])
                    seconds =  tdelta.total_seconds()
                    if seconds &amp;gt; timeWarn and seconds &amp;lt; timeRed:
                        color = bcolors.WARNING
                    elif seconds &amp;gt;= timeRed:
                        color = bcolors.FAIL
                    else:
                        color = bcolors.OKGREEN
                    print(&amp;quot;\t%s%s, %s, %s, %s%s&amp;quot; % 
                        (color,fqdn, transaction[&#39;transactionStatus&#39;][&#39;name&#39;], transaction[&#39;id&#39;], seconds ,bcolors.ENDC)
                    )

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get bills by user</title>
      <link>https://softlayer.github.io/python/billsbyuser/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/billsbyuser/</guid>
      <description>&lt;p&gt;This is a rough script, it doesn&amp;rsquo;t include some of the tax fees and some of the other one off fee fields that you will find in &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item&#34;&gt;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chris-cde - 840.0
    123.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $345.0
    234.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $495.0
    chris.testing.com : 2 x 2.0 GHz Cores $0.0
    4 Portable Private IP Addresses - $0.0
    8 Portable Private IP Addresses - $0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Goes through the next invoice. Collections billing items by the user that orderd them.
Prints out each user and how much they caused in billing, along with what they ordered.
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

class bills():

    def __init__(self):

        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.VSManager(self.client)

    def main(self):

        &amp;quot;&amp;quot;&amp;quot;
        Not all billing items have a user record, these are collected under the master account
        http://sldn.softlayer.com/reference/services/SoftLayer_Account/getNextInvoiceTopLevelBillingItems returns
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item -&amp;gt; taps orderItem for
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Order_Item -&amp;gt; taps order for 
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Order -&amp;gt; taps userRecord for
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_User_Customer
        &amp;quot;&amp;quot;&amp;quot;
        mask=&amp;quot;mask[orderItem[order[id,userRecord[displayName,username]]]]&amp;quot;
        billingItems = self.client[&#39;SoftLayer_Account&#39;].getNextInvoiceTopLevelBillingItems(mask=mask)

        users = {&#39;masterUser&#39;: []}
        for item in billingItems:
            if &#39;orderItem&#39; in item:
                username = item[&#39;orderItem&#39;][&#39;order&#39;][&#39;userRecord&#39;][&#39;username&#39;]
                del item[&#39;orderItem&#39;]
                if username not in users:
                    users[username] = []
                users[username].append(item)
            else:
                users[&#39;masterUser&#39;].append(item)


        # prints everything out, and finds the sum of items.
        for user in users:
            servers = []
            everything_else = []
            total_cost = 0

            for item in users[user]:

                # this doens&#39;t include Tax fees, or setup fees because I&#39;m lazy
                cost = float(item[&#39;recurringFee&#39;]) + float(item[&#39;oneTimeFee&#39;])
                if &#39;hostName&#39; in item:
                    fqdn = &amp;quot;%s.%s : %s $%s&amp;quot; % (item[&#39;hostName&#39;], item[&#39;domainName&#39;], item[&#39;description&#39;], cost)
                    servers.append(fqdn)
                else:
                    item = &amp;quot;%s - $%s&amp;quot; % (item[&#39;description&#39;], cost)
                    everything_else.append(item)
                total_cost = total_cost + cost
            print(&amp;quot;%s - %s&amp;quot; % (user , total_cost))
            for server in servers:
                print(&amp;quot;\t%s&amp;quot; % server)
            for thing in everything_else:
                print(&amp;quot;\t%s&amp;quot; % thing)




if __name__ == &amp;quot;__main__&amp;quot;:
    main = bills()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tag Vlans</title>
      <link>https://softlayer.github.io/python/vlantagging/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/vlantagging/</guid>
      <description>&lt;p&gt;A rough examples of how to add vlans to servers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo


@sldn{SoftLayer_Network_Component}
@sldn{SoftLayer_Network_Component,getNetworkVlanTrunks}

@manager{hardware}
Goes through a list of servers, add the specified vlan to each one
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer

class testVlanTag():
    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;SoftLayer Client&amp;quot;&amp;quot;&amp;quot;
        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.HardwareManager(self.client)    

    def addVlanTrunks(self, id, vlans):
        &amp;quot;&amp;quot;&amp;quot;
            Adds a vlan to a network component
            @param id ID of SoftLayer_Network_Component you want to add vlan to
            @param vlans dictionary of vlan nubmers you want to add
            @sldn{SoftLayer_Network_Component,addNetworkVlanTrunks}
            @sldn{SoftLayer_Network_Component,getNetworkVlanTrunks}
        &amp;quot;&amp;quot;&amp;quot;
        for vlanNumber in vlans:
            print &amp;quot;Adding vlan %s to %s&amp;quot; % (vlanNumber,id)
            result = self.client[&#39;Network_Component&#39;].addNetworkVlanTrunks([{&#39;vlanNumber&#39;:vlanNumber}],id=id)
            vlan = self.client[&#39;Network_Component&#39;].getNetworkVlanTrunks(id=id)


    def main(self):
        &amp;quot;&amp;quot;&amp;quot;
            Runs through a list of server ids and tags them with the proper vlan
            Does both public and private interfaces
        &amp;quot;&amp;quot;&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of ids&amp;quot;&amp;quot;&amp;quot;
        serverIds = [14274503]
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of public vlan nubmers to tag on each server&amp;quot;&amp;quot;&amp;quot;
        publicVlanNumbers = [1125,1110]
        &amp;quot;&amp;quot;&amp;quot;comma seperated list of private vlan nubmers to tag on each server&amp;quot;&amp;quot;&amp;quot;
        privateVlanNumbers = [1110]

        for sid in serverIds:
            hardware = self.mgr.get_hardware(sid)
            privateIP = hardware[&#39;primaryBackendIpAddress&#39;]
            print &amp;quot;Private IP is: %s&amp;quot; % (privateIP) 
            publicIP = hardware[&#39;primaryIpAddress&#39;]
            print &amp;quot;Public IP is: %s&amp;quot; % (publicIP)

            for component in hardware[&#39;networkComponents&#39;]:
                try:
                    if (component[&#39;primaryIpAddress&#39;] == publicIP):
                        continue
                        # self.addVlanTrunks(component[&#39;id&#39;],publicVlanNumbers)
                    elif (component[&#39;primaryIpAddress&#39;] == privateIP):
                        self.addVlanTrunks(component[&#39;id&#39;],privateVlanNumbers)
                    # result = self.client[&#39;Network_Component&#39;].clearNetworkVlanTrunks(id=component[&#39;id&#39;])
                    mask = &#39;networkVlan, networkVlanTrunks, uplinkComponent[networkVlanTrunks]&#39;
                    nic = self.client[&#39;Network_Component&#39;].getObject(id=component[&#39;id&#39;], mask=mask)
                except KeyError:
                    continue

            print &amp;quot;Done with %s &amp;quot; % (hardware[&#39;hostname&#39;])
            print &amp;quot;=====================================&amp;quot;  

if __name__ == &amp;quot;__main__&amp;quot;:
    main = testVlanTag()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: June 8, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170608/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170608/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Corrected an issue in the portal where VMware ESXI 5.5 was not showing the licensing cost disclaimer on the order summary page in quotes and at checkout.&lt;/li&gt;
&lt;li&gt;Added additional Flex pricing information and external documentation links to the Cloud Object Storage S3 order page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code that improves the performance of &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/createSnapshot&#34;&gt;SoftLayer_Network_Storage::createSnapshot&lt;/a&gt; on Endurance and Performance volumes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: June 1, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170601/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170601/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;When a server is reloaded customers now have the option to enable LVM on the storage groups during the reload.&lt;/li&gt;
&lt;li&gt;Added support for performance pricing when you duplicate storage volumes. Rolled out the ability for a user to create a new volume from an existing volume or snapshot. When creating the new volume a user will have the ability to either keep the configuration of the new volume (size, IOPS tier, etc) or make changes to the configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added additional disk controller categories to make it possible for there to be more than one disk controller ordered in a server.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: May 24, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170524/</link>
      <pubDate>Wed, 24 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170524/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Corrected an issue that was causing the order form to not display hardware selection when loading from a Flex Image template.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: May 18, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170518/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170518/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing SAP Certified servers to not be orderable from a Quote.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolve an issue where upgrading a Bluemix account to add infrastructure services would occasionally fail but still upgrade the account.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: May 18, 2017</title>
      <link>https://softlayer.github.io/release_notes/20170518/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/20170518/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing SAP Certified servers to not be orderable from a Quote.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolve an issue where upgrading a Bluemix account to add infrastructure services would occasionally fail but still upgrade the account.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: May 10, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170510/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170510/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed an issue where it was possible to order a clone&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added the getHardwarePools method to the &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account&#34;&gt;SoftLayer_Account&lt;/a&gt; service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved an issue that was causing Virtual Guest image templates to not be imported properly due to mismatched software descriptions. This only affected Windows image template imports.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/python/getkvmdetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getkvmdetails/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Ryan Tiffany
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&amp;quot;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=31678643)
pp(getDetails)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/rest/getkvmdetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getkvmdetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getObject&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/[device_id]/getObject?objectMask=mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;accountId&amp;quot;: xxxxx,
    &amp;quot;consoleIpAddressRecord&amp;quot;: {
        &amp;quot;ipAddress&amp;quot;: {
            &amp;quot;ipAddress&amp;quot;: &amp;quot;10.3.2.143&amp;quot;
        },
        &amp;quot;port&amp;quot;: 5902
    },
    &amp;quot;createDate&amp;quot;: &amp;quot;2017-05-02T11:00:54-06:00&amp;quot;,
    &amp;quot;dedicatedAccountHostOnlyFlag&amp;quot;: false,
    &amp;quot;domain&amp;quot;: &amp;quot;cdetest.info&amp;quot;,
    &amp;quot;fullyQualifiedDomainName&amp;quot;: &amp;quot;kube.cdetest.info&amp;quot;,
    &amp;quot;globalIdentifier&amp;quot;: &amp;quot;1c02e7d5-7a4e-4324-9ff2-xxxxxxxx&amp;quot;,
    &amp;quot;hostname&amp;quot;: &amp;quot;kube&amp;quot;,
    &amp;quot;id&amp;quot;: 31678643,
    &amp;quot;lastPowerStateId&amp;quot;: null,
    &amp;quot;lastVerifiedDate&amp;quot;: null,
    &amp;quot;managedResourceFlag&amp;quot;: false,
    &amp;quot;maxCpu&amp;quot;: 2,
    &amp;quot;maxCpuUnits&amp;quot;: &amp;quot;CORE&amp;quot;,
    &amp;quot;maxMemory&amp;quot;: 4096,
    &amp;quot;metricPollDate&amp;quot;: null,
    &amp;quot;modifyDate&amp;quot;: &amp;quot;2017-05-02T11:10:50-06:00&amp;quot;,
    &amp;quot;operatingSystem&amp;quot;: {
        &amp;quot;hardwareId&amp;quot;: null,
        &amp;quot;id&amp;quot;: 15948205,
        &amp;quot;manufacturerLicenseInstance&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;passwords&amp;quot;: [
            {
                &amp;quot;createDate&amp;quot;: &amp;quot;2017-05-02T11:04:32-06:00&amp;quot;,
                &amp;quot;id&amp;quot;: 17502747,
                &amp;quot;modifyDate&amp;quot;: &amp;quot;2017-05-02T11:04:32-06:00&amp;quot;,
                &amp;quot;password&amp;quot;: &amp;quot;redacted&amp;quot;,
                &amp;quot;port&amp;quot;: null,
                &amp;quot;software&amp;quot;: null,
                &amp;quot;softwareId&amp;quot;: 15948205,
                &amp;quot;username&amp;quot;: &amp;quot;root&amp;quot;
            }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/ruby/getkvmdetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getkvmdetails/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
virtual_server_id = 31678643

mask = &#39;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&#39;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].object_mask(mask).object_with_id(virtual_server_id).getObject
pp getDetails
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: May 3, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170503/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170503/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Resolved a bug that was causing duplicate pricing information to be shown for storage options on the portal order form.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/getStorageTierLevel&#34;&gt;SoftLayer_Network_Storage::storageTierLevel&lt;/a&gt; to always return a string value instead of a &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Item&#34;&gt;SoftLayer_Billing_Item&lt;/a&gt; object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fixed a bug that would automatically allow inactive image templates to be used for VSI OS Reloads.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release notes: April 26, 2017</title>
      <link>https://softlayer.github.io/release_notes/2017/20170426/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/release_notes/2017/20170426/</guid>
      <description>

&lt;h4 id=&#34;portal&#34;&gt;Portal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backend&#34;&gt;Backend&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Pushed code to resolve an issue where mixed case IBMId accounts were unable to upgrade to a Pay as you Go Bluemix Developer Services account.&lt;/li&gt;
&lt;li&gt;Resolved an issue that was causing NetScaler provisions to fail due to the license not being bound to a valid MAC address on the host system.&lt;/li&gt;
&lt;li&gt;Pushed code which added the requirement of using an IBMid in order to link a Platform as a Service account to an Infrastructure as a Service account.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
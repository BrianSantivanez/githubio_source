<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_product_order on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/classes/softlayer_product_order/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 13 Sep 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderbaremetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/orderbaremetal/</guid>
      <description>

&lt;p&gt;Example of how to build an order for a bare metal server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers&lt;/li&gt;
&lt;li&gt;Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.&lt;/li&gt;
&lt;li&gt;listAvailableVlans() if you want to place the server on a specific VLAN.&lt;/li&gt;
&lt;li&gt;listPartitionTemplates() will show what partition schemes you can apply to a disk.&lt;/li&gt;
&lt;li&gt;listRaidArrayTypes() shows what id numbers are for each RAID type.&lt;/li&gt;
&lt;li&gt;Custom partitions can ONLY be specified for CentOS or RHEL servers, and ONLY on the secondary drives &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Trying to do the same for the primary controller will result in the default partitinoTemplate being applied. Custom partitions also require the arraySize be declared.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Places an order for a Bare Metal Server
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp



class ordering():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, package_id, location_id, pub_vlan_id=&#39;&#39;, priv_vlan_id=&#39;&#39;):
        &amp;quot;&amp;quot;&amp;quot;
        Places an order for a Bare Metal Instance
        &amp;quot;&amp;quot;&amp;quot;

        &amp;quot;&amp;quot;&amp;quot;These items are required for all servers and have a 0$ cost, some can be upgraded&amp;quot;&amp;quot;&amp;quot;
        required_items = [
            &#39;AUTOMATED_NOTIFICATION&#39;,
            &#39;MONITORING_HOST_PING&#39;,
            &#39;NOTIFICATION_EMAIL_AND_TICKET&#39;,
            &#39;REBOOT_KVM_OVER_IP&#39;,
            &#39;NESSUS_VULNERABILITY_ASSESSMENT_REPORTING&#39;,
            &#39;UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT&#39;,
            &#39;REDUNDANT_POWER_SUPPLY&#39;,
        ]
        &amp;quot;&amp;quot;&amp;quot;We need bandwidth, at least 1 ip, and the port speed &amp;quot;&amp;quot;&amp;quot;
        network_items = [
            &#39;BANDWIDTH_500_GB&#39;,
            &#39;1_IP_ADDRESS&#39;,
            &#39;1_GBPS_DUAL_PUBLIC_PRIVATE_NETWORK_UPLINKS_UNBONDED&#39;,
        ]
        &amp;quot;&amp;quot;&amp;quot;A disk controller, a duplicate entry for each disk you want, in order, ram, OS and processor chip &amp;quot;&amp;quot;&amp;quot;
        physical_items = [
            &#39;DISK_CONTROLLER_RAID&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;HARD_DRIVE_2_00_TB_SATA_2&#39;,
            &#39;RAM_128_GB_DDR3_1333_REG_2&#39;,
            &#39;OS_VSPHERE_ENTERPRISE_PLUS_6_0&#39;,
            &#39;INTEL_XEON_2620_2_00&#39;
        ]

        all_items = required_items + network_items + physical_items
        prices = self.gatherPriceIds(package_id, all_items)
        productOrder = {&#39;orderContainers&#39;: [
                {&#39;hardware&#39;: 
                    [
                        {
                            &#39;domain&#39;: u&#39;cgallo.com&#39;,
                            &#39;hostname&#39;: u&#39;vmware-testing01&#39;,
                            &#39;primaryBackendNetworkComponent&#39;: {&#39;networkVlan&#39;: {&#39;id&#39; : int(priv_vlan_id)}},
                            &#39;primaryNetworkComponent&#39;: {&#39;networkVlan&#39;: {&#39;id&#39; : int(priv_vlan_id)}}
                        }
                    ],
                    &#39;location&#39;: location_id,
                    &#39;packageId&#39;: package_id,
                    &#39;prices&#39;: prices,
                    &#39;quantity&#39;: 1,
                    &#39;storageGroups&#39; : [
                        {
                            &#39;arrayTypeId&#39;: 2,
                            &#39;hardDrives&#39;: [0,1],
                            &#39;partitionTemplateId&#39; : 1
                        },
                        {
                            &#39;arrayTypeId&#39;: 9,
                            &#39;arraySize&#39; : 2000,
                            &#39;hardDrives&#39;: [2],
                            &#39;partitions&#39; : [
                                {&#39;name&#39; : &#39;/&#39;, &#39;size&#39;: 200, &#39;isGrow&#39;: 0},
                                {&#39;name&#39; : &#39;/boot&#39;, &#39;size&#39;: 100},
                                {&#39;name&#39; : &#39;/usr&#39;, &#39;size&#39;: 200},
                                {&#39;name&#39; : &#39;/mine&#39;, &#39;size&#39;: 200},
                                {&#39;name&#39; : &#39;/media&#39;, &#39;size&#39;: 1, &#39;isGrow&#39;: 1},
                            ]

                        },
                        {
                            &#39;arrayTypeId&#39;: 9,
                            &#39;hardDrives&#39;: [3]
                        }
                    ],
                }
            ]
        }
        pp(productOrder)
        order = self.client[&#39;Product_Order&#39;].verifyOrder(productOrder)
        # order = self.client[&#39;Product_Order&#39;].placeOrder(productOrder)
        pp(order)


    def listServerPackages(self):
        mask = &amp;quot;mask[type]&amp;quot;
        _filter = {
            &#39;type&#39;: {
                &#39;keyName&#39;: {&#39;operation&#39;: &#39;BARE_METAL_CPU&#39;},
            },
        }
        result = self.client[&#39;Product_Package&#39;].getAllObjects(mask=mask, filter=_filter)

        for product in result:
            print(&amp;quot;%s - %s - %s - %s&amp;quot; % 
                (product[&#39;id&#39;],
                 product[&#39;name&#39;],
                 product[&#39;keyName&#39;],
                 product[&#39;type&#39;][&#39;keyName&#39;])
            )
            

    def listPartitionTemplates(self):
        mask = &amp;quot;mask[partitionTemplates[data]]&amp;quot;
        result = self.client[&#39;SoftLayer_Hardware_Component_Partition_OperatingSystem&#39;].getAllObjects(mask=mask)
        print(&amp;quot;OS Type, Notes&amp;quot;)
        for os_type in result:
            print(&amp;quot;%s - %s&amp;quot; % (os_type[&#39;description&#39;],os_type[&#39;notes&#39;]))
            print(&amp;quot;\tTemplate id, Description&amp;quot;)
            for template in os_type[&#39;partitionTemplates&#39;]:
                print(&amp;quot;\t%s - %s &amp;quot; % (template[&#39;id&#39;],template[&#39;description&#39;]))
                for partition in template[&#39;data&#39;]:
                    print(&amp;quot;\t\t%s - %s %s&amp;quot; % 
                        (partition[&#39;partitionName&#39;], 
                         partition[&#39;partitionSize&#39;], 
                         &#39;Grow&#39; if partition[&#39;isGrow&#39;] else &#39;&#39;)
                    )

    def listRaidArrayTypes(self):
        result = self.client[&#39;SoftLayer_Configuration_Storage_Group_Array_Type&#39;].getAllObjects()
        for raid in result:
            print(&amp;quot;%s - %s - %s Min:%s Max:%s&amp;quot; % 
                (raid[&#39;id&#39;], 
                 raid[&#39;keyName&#39;], 
                 raid[&#39;description&#39;], 
                 raid[&#39;minimumDrives&#39;], 
                 raid[&#39;maximumDrives&#39;])
            ) 

    def listAvailableVlans(self, dc_id):
        mask = &amp;quot;mask[network,type,primaryRouter[datacenter]]&amp;quot;
        _filter = {
            &#39;networkVlans&#39; : {
                &#39;primaryRouter&#39;: {
                    &#39;datacenter&#39; : { &#39;id&#39;: {&#39;operation&#39;: dc_id} }
                }
            }
        }
        result = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask,filter=_filter)
        for vlan in result:
            print(&amp;quot;%s - VLAN: %s - Type: %s - %s &amp;quot; % 
                (vlan[&#39;id&#39;], 
                 vlan[&#39;vlanNumber&#39;],
                 vlan[&#39;type&#39;][&#39;keyName&#39;], 
                 vlan[&#39;primaryRouter&#39;][&#39;hostname&#39;])
            )

    def getServerPrices(self, package_id):
        mask = &amp;quot;mask[regions,items[prices],activeServerItems[prices]]&amp;quot;
        # locations = self.client[&#39;Product_Package&#39;].getLocations(id=package_id)
        result = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)
        print(&amp;quot;Location ID, Location Name&amp;quot;)
        for location in result[&#39;regions&#39;]:
            print(&amp;quot;%s - %s &amp;quot; % (location[&#39;location&#39;][&#39;location&#39;][&#39;id&#39;],location[&#39;description&#39;]))
        print(&amp;quot;Price ID, description, Monthly Fee, KeyName&amp;quot;)
        for item in result[&#39;items&#39;]:
            for prices in item[&#39;prices&#39;]:
                # only print the Default location price. 
                # The ordering system will replace the default price id for you if ordering in a non-usa region.
                if prices[&#39;locationGroupId&#39;] is &#39;&#39;:
                    # Some software has core restrictions that effect prices
                    if &#39;capacityRestrictionType&#39; in prices:
                        cores = &amp;quot;%s - %s&amp;quot; % (
                             prices[&#39;capacityRestrictionMinimum&#39;], 
                             prices[&#39;capacityRestrictionMaximum&#39;])
                        print(&amp;quot;%s, %s - %s cores, $%s, %s &amp;quot; % 
                            (prices[&#39;id&#39;],
                             item[&#39;description&#39;],
                             cores,prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                             item[&#39;keyName&#39;])
                        )
                    else:
                        print(&amp;quot;%s, %s, $%s, %s &amp;quot; % 
                            (prices[&#39;id&#39;],
                              item[&#39;description&#39;],
                              prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                              item[&#39;keyName&#39;])
                        )
        print(&amp;quot;======= SERVER ITEMS =======&amp;quot;)
        # serverItems = self.client[&#39;Product_Package&#39;].getActiveServerItems(id=package_id)
        print(&amp;quot;Price ID, description, Monthly Fee, KeyName&amp;quot;)
        for item in result[&#39;activeServerItems&#39;]:
            for prices in item[&#39;prices&#39;]:
                # only print the Default location price. 
                # The ordering system will replace the default price id for you if ordering in a non-usa region.
                if prices[&#39;locationGroupId&#39;] is &#39;&#39;:
                    print(&amp;quot;%s, %s, $%s, %s &amp;quot; % 
                        (prices[&#39;id&#39;],
                         item[&#39;description&#39;],
                         prices.get(&#39;recurringFee&#39;,&#39;?&#39;),
                         item[&#39;keyName&#39;])
                    )


    def gatherPriceIds(self,package_id,keyNames):
        # This wont work for prices that have core requirements
        mask = &amp;quot;mask[items[prices],activeServerItems[prices]]&amp;quot;
        items = self.client[&#39;Product_Package&#39;].getObject(mask=mask,id=package_id)

        prices = []
        sorted_items = {}

        for item in items[&#39;items&#39;]:
            for price in item[&#39;prices&#39;]:
                if price[&#39;locationGroupId&#39;] is &#39;&#39;: 
                    sorted_items[item[&#39;keyName&#39;]] = price[&#39;id&#39;]
        for item in items[&#39;activeServerItems&#39;]:
            for price in item[&#39;prices&#39;]:
                if price[&#39;locationGroupId&#39;] is &#39;&#39;: 
                    sorted_items[item[&#39;keyName&#39;]] = price[&#39;id&#39;]

        for keyName in keyNames:
            prices.append({&#39;id&#39;: int(sorted_items.get(keyName))})
        return prices

if __name__ == &amp;quot;__main__&amp;quot;:

    main = ordering()

    &amp;quot;&amp;quot;&amp;quot;
    Step 1, find the processor type you want
    269 - Quad E7-4800  Series (6 Drives) - 2U_QUAD_E74800_6_DRIVES : BARE_METAL_CPU
    &amp;quot;&amp;quot;&amp;quot;
    main.listServerPackages()
    package_id = 263

    &amp;quot;&amp;quot;&amp;quot;
    Step 2, collect all the pieces you want to order
    getServerPrices will list out all the keyNames and cost of components
    that can be ordered on a certain package. Will also list the DCs that this
    server is available in.
    &amp;quot;&amp;quot;&amp;quot;
    main.getServerPrices(package_id)
    location_id = 142776

    &amp;quot;&amp;quot;&amp;quot;
    Step 3, customize and place the order
    &amp;quot;&amp;quot;&amp;quot;
    main.listAvailableVlans(location_id)
    pub_vlan_id  = 2137279
    priv_vlan_id = 2137281
    main.listPartitionTemplates()
    main.listRaidArrayTypes()
    main.main(package_id,location_id,pub_vlan_id,priv_vlan_id)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exceptions-you-might-see&#34;&gt;Exceptions you might see&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidStorageGroups):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Defining partitions on secondary storage groups is only allowed for CentOS and Red Hat operating systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chose the right operating system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidLocation):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The location provided for this order is invalid.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Choose a correct location, locations should be displayed in getServerPrices()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidStorageGroups):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Storage group #1 does not have a grow partition. Each storage group with partitions defined must have a grow partition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure your partition has &amp;lsquo;isGrow&amp;rsquo; = 1 at some point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;SoftLayerAPIError(SoftLayer_Exception_Order_InvalidStorageGroups):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Storage group #1 with size (GB) is smaller than the total partitioned size (501GB).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You forgot to assign an arraySize.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Storage_Group&#34;&gt;https://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Storage_Group&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ordering Raid</title>
      <link>https://softlayer.github.io/ruby/orderingraid/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/orderingraid/</guid>
      <description>

&lt;p&gt;As a SoftLayer user, you have probably seen the beautiful RAID Configurator that greets you when you order a server on the SoftLayer website.&lt;/p&gt;

&lt;p&gt;It allows you to do anything you like, from a straight RAID configuration involving all drives in a single disk array, to a much more intricate configuration with nearly any mix of disks and RAID types.&lt;/p&gt;

&lt;p&gt;However beautiful and practical the interface, sometimes you want to script this process, and the SoftLayer mantra of &amp;ldquo;Anything you can do in the Web interface, you can do on the API&amp;rdquo; also rings true in this case.&lt;/p&gt;

&lt;h2 id=&#34;single-raid-group&#34;&gt;Single RAID group&lt;/h2&gt;

&lt;p&gt;If all your drives are the same and you simply want a single RAID group, be it RAID 0,1,5 or 10, you can achieve this by ordering the corresponding disk controller.&lt;/p&gt;

&lt;p&gt;When building your order template you will see that RAID-enabled servers are listed with multiple disk controllers. Here&amp;rsquo;s an example of the relevant price IDs from package 53 (Intel Xeon 3200 Series):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Category &amp;quot;Disk Controller&amp;quot;:
     876 -- Non-RAID
     877 -- RAID 0
     878 -- RAID 1
     879 -- RAID 5
     880 -- RAID 10
     22482 -- RAID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So ordering an Intel 3260 server with RAID 10 through the API could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rubygems&#39;
require &#39;softlayer_api&#39;
 
$SL_API_USERNAME = &amp;quot; PLEASE SET ME &amp;quot;
$SL_API_KEY = &amp;quot; PLEASE SET ME TOO &amp;quot;
 
client = SoftLayer::Service.new(&amp;quot;SoftLayer_Product_Order&amp;quot;);
 
order = {
 :complexType =&amp;gt; &#39;SoftLayer_Container_Product_Order_Hardware_Server&#39;,
 :quantity =&amp;gt; 1,
 :hardware =&amp;gt; [{:hostname =&amp;gt; &#39;raidtest&#39;, :domain =&amp;gt; &#39;example.com&#39;}],
 :location =&amp;gt; 168642, # San Jose 1
 :packageId =&amp;gt; 53, # Intel Xeon 3200 Series
 :prices =&amp;gt; [
  {:id =&amp;gt; 2050}, # Single Processor Quad Core Xeon 3460 - 2.80GHz (Lynnfield) - 1 x 8MB cache w/HT
  {:id =&amp;gt; 17438}, # -- Ubuntu Linux 12.04.0 LTS Precise Pangolin - Minimal Install (64 bit)
  {:id =&amp;gt; 21004}, # 4 GB DDR3 Registered 1333
  {:id =&amp;gt; 880}, # Disk controller -- RAID 10 
  {:id =&amp;gt; 1257}, # First hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 728}, # 0 GB Bandwidth
  {:id =&amp;gt; 898}, # 100 Mbps Private Network
  {:id =&amp;gt; 906}, # Reboot / KVM over IP  
  {:id =&amp;gt; 420}, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
  {:id =&amp;gt; 55}, # Host Ping
  {:id =&amp;gt; 418}, # Nessus Vulnerability Assessment &amp;amp; Reporting
  {:id =&amp;gt; 57}, # Notification -- Email and Ticket
  {:id =&amp;gt; 58} # Response -- Automated Notification
 ]
}
 
result = client.verifyOrder(order)
## Uncomment when you are ready to order
# client.placeOrder(order)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multiple-raid-groups&#34;&gt;Multiple RAID groups&lt;/h2&gt;

&lt;p&gt;When ordering multiple RAID groups you need to order the Disk Controller type called RAID, and specify your RAID groups in an attribute in the order template called storageGroups.
storageGroups is of the type &lt;a href=&#34;https://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Storage_Group&#34;&gt;SoftLayer_Container_Product_Order_Storage_Group&lt;/a&gt; and the most important attributes can be explained as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;arrayTypeId: Integer - Required
Can be retrieved from &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Configuration_Storage_Group_Array_Type&#34;&gt;SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
hardDrives: Array of integers - Required
Array of drives to take part in the given raid array. 0 = first drive, 1 = second drive, etc&lt;/p&gt;

&lt;p&gt;hotSpareDrives: array of integers - Optional
On raid types where hot spare is allowed, you can specify which drives to use as hot spare.
Raid types that allow hot spare can be retrieved from &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Configuration_Storage_Group_Array_Type&#34;&gt;SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;partitionTemplateId: integer - Optional
To be used on the array where the operating system is to be installed.
Partition Template IDs for the relevant operating system can be retrieved from
&lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Component_Partition_OperatingSystem/getPartitionTemplates&#34;&gt;SoftLayer_Hardware_Component_Partition_OperatingSystem::getPartitionTemplates&lt;/a&gt;
use &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Component_Partition_OperatingSystem&#34;&gt;SoftLayer_Hardware_Component_Partition_OperatingSystem::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to get a list of operating system groups that has partition templates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s say, for example, you want to have a server with a single SSD drive for the operating system, also hosting a large 12GB swap partition, and a separate RAID array with 3 striped 147GB SAS Drives.&lt;/p&gt;

&lt;p&gt;The first thing we&amp;rsquo;ll need to do is specify the controller and drives we want in our order template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{:id =&amp;gt; 22482}, # Disk controller -- RAID
{:id =&amp;gt; 13756}, # First hard drive -- 50GB SSD
{:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
{:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
{:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To configure the RAID groups we need to populate storageGroups
The disks will be addressed in the order of their placement and template, starting at disk 0.
So for the first disk that we want to be on its own we will use arrayTypeId 9, which is JBOD, and specify partitionTemplateId 226 which specifies a 12GB Swap partition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{
        :arrayTypeId =&amp;gt; 9, # JBOD -- Other types available from SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects
        :hardDrives =&amp;gt; [0], # First Hard Drive (50GB SSD)
        :partitionTemplateId =&amp;gt; 226 # Custom partition template - 12GB Swap
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the second group we specify arrayTypeId 1, which is RAID 0 - Striped&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{
        :arrayTypeId =&amp;gt; 1, # RAID 0 -- Other types available from SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects
        :hardDrives =&amp;gt; [1,2,3] # Second, third and fourth hard drives (147GB SAS)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All together, the order will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rubygems&#39;
require &#39;softlayer_api&#39;
 
$SL_API_USERNAME = &amp;quot; PLEASE SET ME &amp;quot;
$SL_API_KEY = &amp;quot; PLEASE SET ME TOO &amp;quot;
 
client = SoftLayer::Service.new(&amp;quot;SoftLayer_Product_Order&amp;quot;);
 
order = {
 :complexType =&amp;gt; &#39;SoftLayer_Container_Product_Order_Hardware_Server&#39;,
 :quantity =&amp;gt; 1,
 :hardware =&amp;gt; [{:hostname =&amp;gt; &#39;raidtest&#39;, :domain =&amp;gt; &#39;example.com&#39;}],
 :location =&amp;gt; 168642, # San Jose 1
 :packageId =&amp;gt; 53, # Intel Xeon 3200 Series
 :prices =&amp;gt; [
  {:id =&amp;gt; 2050}, # Single Processor Quad Core Xeon 3460 - 2.80GHz (Lynnfield) - 1 x 8MB cache w/HT
  {:id =&amp;gt; 17438}, # -- Ubuntu Linux 12.04.0 LTS Precise Pangolin - Minimal Install (64 bit)
  {:id =&amp;gt; 21004}, # 4 GB DDR3 Registered 1333
  {:id =&amp;gt; 22482}, # Disk controller -- RAID
  {:id =&amp;gt; 13756}, # First hard drive -- 50GB SSD
  {:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 728}, # 0 GB Bandwidth
  {:id =&amp;gt; 898}, # 100 Mbps Private Network
  {:id =&amp;gt; 906}, # Reboot / KVM over IP  
  {:id =&amp;gt; 420}, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
  {:id =&amp;gt; 55}, # Host Ping
  {:id =&amp;gt; 418}, # Nessus Vulnerability Assessment &amp;amp; Reporting
  {:id =&amp;gt; 57}, # Notification -- Email and Ticket
  {:id =&amp;gt; 58} # Response -- Automated Notification
 ],
 
 :storageGroups =&amp;gt; [
     { # RAID Array 1
        :arrayTypeId =&amp;gt; 9, # JBOD
        :hardDrives =&amp;gt; [0], # First Hard Drive (50GB SSD)
        :partitionTemplateId =&amp;gt; 226 # Custom partition template - 12GB Swap
     },
     { # RAID Array 2
        :arrayTypeId =&amp;gt; 1, # RAID 0
        :hardDrives =&amp;gt; [1,2,3] # Second, third and fourth hard drives (147GB SAS)
     }
  ]
}

 
result = client.verifyOrder(order)
## Uncomment when you&#39;re ready to order
# client.placeOrder(order)
Links and other useful information
order_multiple_raid_groups.rb
order_single_raid_group.rb
get_package_options.rb (command line tool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//hansKristian&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/ruby/ordernetscaler/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/ordernetscaler/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

config = { 
    &#39;orderContainers&#39; =&amp;gt; [
        {&amp;quot;hardware&amp;quot; =&amp;gt; [{
            &amp;quot;primaryBackendNetworkComponent&amp;quot; =&amp;gt; {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1211234
                },
                &amp;quot;primaryNetworkComponent&amp;quot; =&amp;gt; {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1212456
                }
            }],
            # REPLACE THIS with your location
            &amp;quot;location&amp;quot; =&amp;gt; &amp;quot;DALLAS09&amp;quot;,
            &amp;quot;packageId&amp;quot; =&amp;gt; 192,
            &amp;quot;quantity&amp;quot; =&amp;gt; 1,
            # Price IDS for Netscaler and 2 IPs
            &amp;quot;prices&amp;quot; =&amp;gt; [
                {&amp;quot;id&amp;quot; =&amp;gt; 44964},
                {&amp;quot;id&amp;quot; =&amp;gt; 17238}
            ]
            }]
        }

order = client[&#39;Product_Order&#39;].verifyOrder(config)

pp order    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/python/ordernetscaler/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/ordernetscaler/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class orderNetscaler():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        productOrder = {
        &#39;orderContainers&#39;: [
            {&amp;quot;hardware&amp;quot;: [{
                &amp;quot;primaryBackendNetworkComponent&amp;quot;: {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot;: 1234
                },
                &amp;quot;primaryNetworkComponent&amp;quot;: {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot;: 456
                }
            }],
            # REPLACE THIS with your location
            &amp;quot;location&amp;quot;: &amp;quot;DALLAS09&amp;quot;,
            &amp;quot;packageId&amp;quot;: 192,
            &amp;quot;quantity&amp;quot;: 1,
            # Price IDS for Netscaler and 2 IPs
            &amp;quot;prices&amp;quot;: [
                {&amp;quot;id&amp;quot;: 44964},
                {&amp;quot;id&amp;quot;: 17238}
            ]
        }]
        }
        order = self.client[&#39;Product_Order&#39;].placeOrder(productOrder)
        pp(order)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/python/migratevsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/migratevsi/</guid>
      <description>&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/python/list_packages/&#34;&gt;python example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

# The package for Virtual Guests
packageId = 46

# Our exising VSI ID
virtualGuests = [
    {
        &amp;quot;id&amp;quot;:25367125
    }
]

# The price item id for a 25GB Local Primary Drive.
prices = [
   {
     &amp;quot;id&amp;quot;:13899,
     &amp;quot;categories&amp;quot;:[
        {
            &amp;quot;categoryCode&amp;quot;:&amp;quot;guest_disk0&amp;quot;,
            &amp;quot;id&amp;quot;:81,
            &amp;quot;name&amp;quot;:&amp;quot;First Disk&amp;quot;
        }
    ]
   }
]

# Maintenance Window time. The migration requires downtime
properties = [
    {
        &amp;quot;name&amp;quot;:&amp;quot;MAINTENANCE_WINDOW&amp;quot;,
        &amp;quot;value&amp;quot;:&amp;quot;now&amp;quot;
    }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

# The parameters needed for the migration order
orderData = {
   &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;properties&amp;quot;: properties,
   &amp;quot;virtualGuests&amp;quot; : virtualGuests,
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/ruby/migratevsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/migratevsi/</guid>
      <description>&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/ruby/list_packages/&#34;&gt;ruby example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
client = softlayer_client.service_named(&#39;Product_Order&#39;)

# The package for Virtual Guests
packageId = 46

# The price item id for a 25GB Local Primary Drive.
prices = [
{
  &#39;id&#39; =&amp;gt; 13899,
    &#39;categories&#39; =&amp;gt; [
       {
           &#39;categoryCode&#39; =&amp;gt; &#39;guest_disk0&#39;,
           &#39;id&#39; =&amp;gt; 81,
           &#39;name&#39; =&amp;gt; &#39;First Disk&#39;
       }
   ]
  }
]

# Maintenance Window time. The migration requires downtime
properties = [
  {
      &#39;name&#39; =&amp;gt; &#39;MAINTENANCE_WINDOW&#39;,
      &#39;value&#39; =&amp;gt; &#39;now&#39;
  }
]

productOrder = {
  &#39;complexType&#39; =&amp;gt; &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
  &#39;packageId&#39; =&amp;gt; packageId,
  &#39;prices&#39; =&amp;gt; prices,
  &#39;properties&#39; =&amp;gt; properties,
  &#39;virtualGuests&#39; =&amp;gt; [ {&#39;id&#39; =&amp;gt; &#39;25367125&#39;} ]
}

begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(productOrder)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/rest/migratevsidisk/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/migratevsidisk/</guid>
      <description>

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder/&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder`&lt;/p&gt;

&lt;h4 id=&#34;getting-the-proper-priceid&#34;&gt;Getting the proper priceId&lt;/h4&gt;

&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/python/list_packages/&#34;&gt;python example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from &lt;code&gt;main.getPackage(126)&lt;/code&gt; to &lt;code&gt;main.getPackage(46)&lt;/code&gt;. The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X POST --data @migrate.json
https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{  
   &amp;quot;parameters&amp;quot;:[  
      {  
         &amp;quot;complexType&amp;quot;:&amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;,
         &amp;quot;packageId&amp;quot;:46,
         &amp;quot;prices&amp;quot;:[  
            {  
               &amp;quot;id&amp;quot;:13899,
               &amp;quot;categories&amp;quot;:[  
                  {  
                     &amp;quot;categoryCode&amp;quot;:&amp;quot;guest_disk0&amp;quot;,
                     &amp;quot;id&amp;quot;:81,
                     &amp;quot;name&amp;quot;:&amp;quot;First Disk&amp;quot;
                  }
               ]
            }
         ],
         &amp;quot;properties&amp;quot;:[  
            {  
               &amp;quot;name&amp;quot;:&amp;quot;MAINTENANCE_WINDOW&amp;quot;,
               &amp;quot;value&amp;quot;:&amp;quot;now&amp;quot;
            }
         ],
         &amp;quot;virtualGuests&amp;quot;:[  
            {  
               &amp;quot;id&amp;quot;:25367125
            }
         ]
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://softlayer.github.io/python/order_quote_advanced/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/order_quote_advanced/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def orderQuote(self, quote_id, dc_id = None, image_id = None, private_vlan = None, public_vlan = None):
        # If you have more than 1 server in the quote, you will need to append
        # a copy of this for each VSI, with hostnames changed as needed
        guests = {
            &#39;hostname&#39;: &#39;quotetest&#39;, 
            &#39;domain&#39;: &#39;example.com&#39;
        }
        if public_vlan:
            guests.update({
                &#39;primaryNetworkComponent&#39;: {
                    &amp;quot;networkVlan&amp;quot;: {&amp;quot;id&amp;quot;: int(public_vlan)}}})
        if private_vlan:
            guests.update({
                &amp;quot;primaryBackendNetworkComponent&amp;quot;: {
                    &amp;quot;networkVlan&amp;quot;: {&amp;quot;id&amp;quot;: int(private_vlan)}}})

        quote = self.client[&#39;Billing_Order_Quote&#39;]
        quote_container = quote.getRecalculatedOrderContainer(id=quote_id)

        container = quote_container
        container[&#39;quantity&#39;] = 1
        container[&#39;virtualGuests&#39;] = []
        container[&#39;virtualGuests&#39;].append(guests)

        # container[&#39;provisionScripts&#39;] = [&#39;https://gist.githubusercontent.com/myscript.py&#39;]
        # container[&#39;sshKeys&#39;] = [{&#39;sshKeyIds&#39;: [660791]} ]

        if image_id is not None:
            container[&#39;imageTemplateId&#39;] = image_id

        if dc_id is not None:
            container[&#39;location&#39;] = dc_id

        # result = self.client[&#39;Product_Order&#39;].verifyOrder(container)
        result = self.client[&#39;Product_Order&#39;].placeOrder(container)
        pp(result)

    def listQuotes(self):
        quotes = self.client[&#39;SoftLayer_Account&#39;].getActiveQuotes()
        pp(quotes)

    def listLocations(self):
        locations = self.client[&#39;SoftLayer_Location&#39;].getDatacenters()
        pp(locations)

    def listSshKeys(self):
        keys = self.client[&#39;SoftLayer_Account&#39;].getSshKeys()
        pp(keys)

    def listImageTemplates(self):
        mask = &amp;quot;mask[id,name,note]&amp;quot;
        imageTemplates = self.client[&#39;SoftLayer_Account&#39;].getPrivateBlockDeviceTemplateGroups(mask=mask)
        print(&amp;quot;ID - Name - Note&amp;quot;)
        for template in imageTemplates:
            try:
                print(&amp;quot;%s - %s - %s&amp;quot; % (template[&#39;id&#39;], template[&#39;name&#39;], template[&#39;note&#39;]))
            except KeyError:
                print(&amp;quot;%s - %s - %s&amp;quot; % (template[&#39;id&#39;], template[&#39;name&#39;], &#39;None&#39;))

    def listVlansInLocation(self, location_id):
        mask = &amp;quot;mask[id,vlanNumber,primaryRouter[hostname,datacenter[id,name]]]&amp;quot;
        objfilter2 = { &amp;quot;networkVlans&amp;quot;:    
                        {&amp;quot;primaryRouter&amp;quot;: 
                            {&amp;quot;datacenter&amp;quot;: { &amp;quot;id&amp;quot; : {&amp;quot;operation&amp;quot;:location_id} } }
                        }
                    }
        subnets = self.client[&#39;SoftLayer_Account&#39;].getNetworkVlans(mask=mask,filter=objfilter2)
        for subnet in subnets:
            print(&amp;quot;%s, %s, %s&amp;quot; % ( subnet[&#39;id&#39;], subnet[&#39;vlanNumber&#39;], subnet[&#39;primaryRouter&#39;][&#39;hostname&#39;]))


if __name__ == &amp;quot;__main__&amp;quot;:
    quote_id = 1234
    main = example()
    # main.listImageTemplates()
    # main.listQuotes()
    # main.listLocations()
    dal13 = 1854895
    ams03 = 814994
    dal09 = 449494
    # main.listSshKeys()
    # main.listVlansInLocation(dal13)
    backend_vlan = 1400000 # 123, bcr06a.dal09
    front_vlan = 1400001 # 456, fcr06a.dal09
    main.orderQuote(quote_id, dc_id=dal09, private_vlan=backend_vlan,public_vlan=front_vlan )

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/ruby/orderlb/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/orderlb/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;rubygems&#39;
require &#39;softlayer_api&#39;

location = &#39;DALLAS06&#39;

# The id of the SoftLayer_Product_Package you wish to order.
# In this case it is a Local Load Balancer.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Every item in SoftLayer&#39;s product catalog is assigned an id. Use these ids
# to tell the SoftLayer API which options you want in your new server. Use
# the getActivePackages() method in the SoftLayer_Account API service to get
# a list of available item and price options per available package.
prices = [
   {&#39;id&#39; =&amp;gt; 2078}  # Shared Load Balancer w/ 500 VIP Connections
]

# Build a skeleton SoftLayer_Container_Product_Order object
# containing the order you wish to place.
orderTemplate = {
   &#39;location&#39; =&amp;gt; location,
   &#39;packageId&#39; =&amp;gt; packageId,
   &#39;prices&#39; =&amp;gt; prices
}

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

# Declare the API client to use the SoftLayer_Product_Order API service
client = softlayer_client.service_named(&#39;Product_Order&#39;)


begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(orderTemplate)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/rest/orderlb/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/orderlb/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::verifyOrder()&lt;/code&gt;&lt;/a&gt;
Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder
URL: SoftLayer_Product_Order/placeOrder&lt;/p&gt;

&lt;p&gt;In the following example I am ordering a Local Load Balancer 500 VIP connections (PriceId: 2078) in the Dallas 06 Datacenter (locationId: 154820).&lt;/p&gt;

&lt;p&gt;Example CURL using verifyOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example CURL using placeOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/placeOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/python/createlbpython/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/createlbpython/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a load balancer

Important manual pages:
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json


# The package to order load balancers.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Since Load Balancers can have Location Specific itemPriceId&#39;s I am using the following script to
# return just the standard (location agnostic) itemPriceId&#39;s.
# https://gist.github.com/greyhoundforty/a0b55afcab9bc758405e21a39b93c63d
# In my case I am going with &#39;Load Balancer 500 VIP Connections&#39;

prices = [
   {
       &amp;quot;id&amp;quot;: 2078
   }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

orderData = {
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;location&amp;quot;: &amp;quot;DALLAS06&amp;quot;
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>https://softlayer.github.io/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Modify the configuration for a Bare Metal Server.</title>
      <link>https://softlayer.github.io/python/modify_bare_metal/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/modify_bare_metal/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Upgrades a server.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/getUpgradeItemPrices
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Property
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Hardware_Server_Upgrade

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer.API
import json


def getServer(serverIp, hardwareService):
    &amp;quot;&amp;quot;&amp;quot;Get the server.
         :param string serverIp: The Ip address of the server.
         :param SoftLayer_Hardware_Server hardwareService: the SoftLayer_Hardware_Server service.
         :returns: A SoftLayer_Hardware_Server object.
    &amp;quot;&amp;quot;&amp;quot;
    try:
        objectMask = &amp;quot;mask[id]&amp;quot;
        server = hardwareService.findByIpAddress(serverIp, mask=objectMask)
        if not server:
            print(&amp;quot;There is no a server with the IP address: &amp;quot; + serverIp)
            exit(1)
    except SoftLayer.SoftLayerAPIError as e:
        print(&amp;quot;Unable to retrieve the server:&amp;quot; % (e.faultCode, e.faultString))
        exit(1)
    return server


def getUpgradeItems(server, hardwareService):
    &amp;quot;&amp;quot;&amp;quot;Get the prices of the items to upgrade in a server.
         :param SoftLayer_Hardware_Server server: The server to get the upgrade item prices.
         :param SoftLayer_Hardware_Server hardwareService: the SoftLayer_Hardware_Server service.
         :returns: A array of SoftLayer_Product_Item_Price object.
    &amp;quot;&amp;quot;&amp;quot;
    try:
        upgradeItems = hardwareService.getUpgradeItemPrices(id=server[&#39;id&#39;])
    except SoftLayer.SoftLayerAPIError as e:
        print(&amp;quot;Unable to retrieve the upgrade items:&amp;quot; % (e.faultCode, e.faultString))
        exit(1)
    return upgradeItems

# The IP address of the server we wish to modify
serverIp = &amp;quot;184.172.45.222&amp;quot;

# Specify the items to upgrade and the values.
# It uses the same names and values as the displayed
# in Softlayer&#39;s Portal.
modify = {
    &amp;quot;FIRST HARD DRIVE&amp;quot;: &amp;quot;2.00 TB SATA&amp;quot;,
    &amp;quot;SECOND HARD DRIVE&amp;quot;: &amp;quot;500 GB SATA&amp;quot;
}

# The date for the upgrade of the server.
dateForUpgrade = &amp;quot;2015-12-15T03:00:00-06:00&amp;quot;

client = SoftLayer.Client()
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

server = getServer(serverIp, hardwareService)
pricesUpgrade = getUpgradeItems(server, hardwareService)

# Getting the item prices for the upgrade.
prices = []
for item in modify.keys():
    for price in pricesUpgrade:
        added = False
        for category in price[&#39;categories&#39;]:
            if category[&#39;name&#39;].strip().upper() == item.strip().upper() and \
               price[&#39;item&#39;][&#39;description&#39;].strip().upper() == modify[item].strip().upper():
                prices.append(price)
                added = True
                break
        if added:
            break
    if not added:
        print(&amp;quot;There is no price for the item: &amp;quot; + item + &amp;quot;- &amp;quot; + modify[item])


# Build a skeleton SoftLayer_Container_Product_Order_Property objects
properties = [
    {
        &#39;name&#39;: &#39;MAINTENANCE_WINDOW&#39;,
        &#39;value&#39;: dateForUpgrade
    },
    {
        &#39;name&#39;: &#39;MAINTENANCE_WINDOW_ID&#39;,
        &#39;value&#39;: 483
    }
]

# Build a skeleton SoftLayer_Container_Product_Order_Hardware_Server_Upgrade object
# containing the upgrade you wish to place
upgradeData = {
    &#39;hardware&#39;: [server],
    &#39;prices&#39;: prices,
    &#39;properties&#39;: properties,
    &#39;complexType&#39;: &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;
}

try:
    # When you are ready to upgrade the server
    # change veryOrder() method by placeOrder method.
    result = productOrderService.verifyOrder(upgradeData)
    print(json.dumps(result, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to upgrade bare metal server faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Place block storage (performance ISCSI) order</title>
      <link>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a block storage (performance ISCSI).

Important manual pages:
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItems
http://sldn.softlayer.com/reference/services/SoftLayer_Location
http://sldn.softlayer.com/reference/services/SoftLayer_Location/getDatacenters
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type/getAllObjects
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Location
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Storage_Enterprise
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/blog/cmporter/Location-based-Pricing-and-You
http://sldn.softlayer.com/blog/bpotter/Going-Further-SoftLayer-API-Python-Client-Part-3
http://sldn.softlayer.com/article/Object-Filters
http://sldn.softlayer.com/article/Python
http://sldn.softlayer.com/article/Object-Masks

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# Values &amp;quot;AMS01&amp;quot;, &amp;quot;AMS03&amp;quot;, &amp;quot;CHE01&amp;quot;, &amp;quot;DAL05&amp;quot;, &amp;quot;DAL06&amp;quot; &amp;quot;FRA02&amp;quot;, &amp;quot;HKG02&amp;quot;, &amp;quot;LON02&amp;quot;, etc.
location = &amp;quot;AMS01&amp;quot;

# Values &amp;quot;20&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;80&amp;quot;, &amp;quot;100&amp;quot;, etc.
storageSize = &amp;quot;40&amp;quot;

# Values between &amp;quot;100&amp;quot; and &amp;quot;6000&amp;quot; by intervals of 100.
iops = &amp;quot;100&amp;quot;

# Values &amp;quot;Hyper-V&amp;quot;, &amp;quot;Linux&amp;quot;, &amp;quot;VMWare&amp;quot;, &amp;quot;Windows 2008+&amp;quot;, &amp;quot;Windows GPT&amp;quot;, &amp;quot;Windows 2003&amp;quot;, &amp;quot;Xen&amp;quot;
os = &amp;quot;Linux&amp;quot;

PACKAGE_ID = 222

client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]
packageService = client[&#39;SoftLayer_Product_Package&#39;]
locationService = client[&#39;SoftLayer_Location&#39;]
osService = client[&#39;SoftLayer_Network_Storage_Iscsi_OS_Type&#39;]

objectFilterDatacenter = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: location.lower()}}
objectFilterStorageNfs = {&amp;quot;items&amp;quot;: {&amp;quot;categories&amp;quot;: {&amp;quot;categoryCode&amp;quot;: {&amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iscsi&amp;quot;}}}}
objectFilterOsType = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: os}}

try:
    # Getting the datacenter.
    datacenter = locationService.getDatacenters(filter=objectFilterDatacenter)
    # Getting the performance storage NFS prices.
    itemsStorageNfs = packageService.getItems(id=PACKAGE_ID, filter=objectFilterStorageNfs)
    # Getting the storage space prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_space&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesStorageSpace = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the storage space value is invalid.
    if len(pricesStorageSpace) == 0:
        raise ValueError(&#39;The storage space value: &#39; + storageSize + &#39; GB, is not valid.&#39;)
    # Getting the IOPS prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: iops
                }
            },
            &amp;quot;attributes&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iops&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesIops = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the IOPS value is invalid for the configured storage space.
    if len(pricesIops) == 0:
        raise ValueError(&#39;The IOPS value: &#39; + iops + &#39;, is not valid for the storage space: &#39; + storageSize + &#39; GB.&#39;)
    # Getting the OS.
    os = osService.getAllObjects(filter=objectFilterOsType)
    # Building the order template.
    orderData = {
        &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Network_PerformanceStorage_Iscsi&amp;quot;,
        &amp;quot;packageId&amp;quot;: PACKAGE_ID,
        &amp;quot;location&amp;quot;: datacenter[0][&#39;id&#39;],
        &amp;quot;quantity&amp;quot;: 1,
        &amp;quot;prices&amp;quot;: [
            {
                &amp;quot;id&amp;quot;: itemsStorageNfs[0][&#39;prices&#39;][0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesStorageSpace[0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesIops[0][&#39;id&#39;]
            }
        ],
        &amp;quot;osFormatType&amp;quot;: os[0]
    }
    # verifyOrder() will check your order for errors. Replace this with a call to
    # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
    # that you can use for your records.
    response = productOrderService.verifyOrder(orderData)
    print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>https://softlayer.github.io/php/orderfirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/orderfirewalls/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();
        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices=1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function placeOrderHardwareFirewall() {
        // http://sldn.softlayer.com/blog/phil/Getting-Started-Firewalls
        // The speed of the firewall needs to match speed of the server
       
        // 3896 , HARDWARE_FIREWALL_HIGH_AVAILABILITY , Hardware Firewall (High Availability)
        // 297 , 1000MBPS_HARDWARE_FIREWALL , 1000Mbps Hardware Firewall
        // 298 , 100MBPS_HARDWARE_FIREWALL , 100Mbps Hardware Firewall
        // 1296 , 2000MBPS_HARDWARE_FIREWALL , 2000Mbps Hardware Firewall
        // 4550 , 20MBPS_HARDWARE_FIREWALL , 20Mbps Hardware Firewall
        // 299 , 10MBPS_HARDWARE_FIREWALL , 10Mbps Hardware Firewall
        // 1329 , HARDWARE_FIREWALL_DEDICATED , Hardware Firewall (Dedicated)
        // 4551 , 200MBPS_HARDWARE_FIREWALL , 200Mbps Hardware Firewall
        // $example-&amp;gt;getPackageById(0, 297 );
        // Generic Location Price
        // (
        //  [id] =&amp;gt; 408
        //  [itemId] =&amp;gt; 297
        //  [locationGroupId] =&amp;gt;
        //  [oneTimeFee] =&amp;gt; 0
        //  [recurringFee] =&amp;gt; 199
        //  [setupFee] =&amp;gt; 0
        // )
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 408;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();

        // Put your serverId here
        $serverToFirewall = new stdClass();
        $serverToFirewall-&amp;gt;id = 12345;
        $container-&amp;gt;hardware[0] = $serverToFirewall;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }


    function placeOrderFortigateAppliance() {
        // The speed of the firewall needs to match speed of the server
        // $example-&amp;gt;getPackageById(0, 4337 );
        // 4337 , FORTIGATE_SECURITY_APPLIANCE , FortiGate Security Appliance
        // 4338 , FORTIGATE_SECURITY_APPLIANCE_HIGH_AVAILABILITY , FortiGate Security Appliance (High Availability)
        // Generic Location Price
        // [id] =&amp;gt; 21514
        // [itemId] =&amp;gt; 4337
        // [locationGroupId] =&amp;gt;
        // [recurringFee] =&amp;gt; 999
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 21514;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();
        // Put the vlan id that you want to protect here
        $container-&amp;gt;vlanId = 12345;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

}


$example = new Example();
// $example-&amp;gt;getAllPackages();
// $example-&amp;gt;getPackageById(0, 297 );
// $example-&amp;gt;placeOrderHardwareFirewall();
// $example-&amp;gt;getPackageById(0, 4337 );
// $example-&amp;gt;placeOrderFortigateAppliance();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
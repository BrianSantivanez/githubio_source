<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_product_order on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/classes/softlayer_product_order/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 31 Mar 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/ruby/ordernetscaler/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/ordernetscaler/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

config = { 
    &#39;orderContainers&#39; =&amp;gt; [
        {&amp;quot;hardware&amp;quot; =&amp;gt; [{
            &amp;quot;primaryBackendNetworkComponent&amp;quot; =&amp;gt; {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1211234
                },
                &amp;quot;primaryNetworkComponent&amp;quot; =&amp;gt; {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1212456
                }
            }],
            # REPLACE THIS with your location
            &amp;quot;location&amp;quot; =&amp;gt; &amp;quot;DALLAS09&amp;quot;,
            &amp;quot;packageId&amp;quot; =&amp;gt; 192,
            &amp;quot;quantity&amp;quot; =&amp;gt; 1,
            # Price IDS for Netscaler and 2 IPs
            &amp;quot;prices&amp;quot; =&amp;gt; [
                {&amp;quot;id&amp;quot; =&amp;gt; 44964},
                {&amp;quot;id&amp;quot; =&amp;gt; 17238}
            ]
            }]
        }

order = client[&#39;Product_Order&#39;].verifyOrder(config)

pp order    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/python/ordernetscaler/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/ordernetscaler/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class orderNetscaler():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        productOrder = {
        &#39;orderContainers&#39;: [
            {&amp;quot;hardware&amp;quot;: [{
                &amp;quot;primaryBackendNetworkComponent&amp;quot;: {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot;: 1234
                },
                &amp;quot;primaryNetworkComponent&amp;quot;: {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot;: 456
                }
            }],
            # REPLACE THIS with your location
            &amp;quot;location&amp;quot;: &amp;quot;DALLAS09&amp;quot;,
            &amp;quot;packageId&amp;quot;: 192,
            &amp;quot;quantity&amp;quot;: 1,
            # Price IDS for Netscaler and 2 IPs
            &amp;quot;prices&amp;quot;: [
                {&amp;quot;id&amp;quot;: 44964},
                {&amp;quot;id&amp;quot;: 17238}
            ]
        }]
        }
        order = self.client[&#39;Product_Order&#39;].placeOrder(productOrder)
        pp(order)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/python/migratevsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/migratevsi/</guid>
      <description>&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/python/list_packages/&#34;&gt;python example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import json

# The package for Virtual Guests
packageId = 46

# Our exising VSI ID
virtualGuests = [
    {
        &amp;quot;id&amp;quot;:25367125
    }
]

# The price item id for a 25GB Local Primary Drive.
prices = [
   {
     &amp;quot;id&amp;quot;:13899,
     &amp;quot;categories&amp;quot;:[
        {
            &amp;quot;categoryCode&amp;quot;:&amp;quot;guest_disk0&amp;quot;,
            &amp;quot;id&amp;quot;:81,
            &amp;quot;name&amp;quot;:&amp;quot;First Disk&amp;quot;
        }
    ]
   }
]

# Maintenance Window time. The migration requires downtime
properties = [
    {
        &amp;quot;name&amp;quot;:&amp;quot;MAINTENANCE_WINDOW&amp;quot;,
        &amp;quot;value&amp;quot;:&amp;quot;now&amp;quot;
    }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

# The parameters needed for the migration order
orderData = {
   &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;properties&amp;quot;: properties,
   &amp;quot;virtualGuests&amp;quot; : virtualGuests,
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/ruby/migratevsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/migratevsi/</guid>
      <description>&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/ruby/list_packages/&#34;&gt;ruby example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
client = softlayer_client.service_named(&#39;Product_Order&#39;)

# The package for Virtual Guests
packageId = 46

# The price item id for a 25GB Local Primary Drive.
prices = [
{
  &#39;id&#39; =&amp;gt; 13899,
    &#39;categories&#39; =&amp;gt; [
       {
           &#39;categoryCode&#39; =&amp;gt; &#39;guest_disk0&#39;,
           &#39;id&#39; =&amp;gt; 81,
           &#39;name&#39; =&amp;gt; &#39;First Disk&#39;
       }
   ]
  }
]

# Maintenance Window time. The migration requires downtime
properties = [
  {
      &#39;name&#39; =&amp;gt; &#39;MAINTENANCE_WINDOW&#39;,
      &#39;value&#39; =&amp;gt; &#39;now&#39;
  }
]

productOrder = {
  &#39;complexType&#39; =&amp;gt; &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
  &#39;packageId&#39; =&amp;gt; packageId,
  &#39;prices&#39; =&amp;gt; prices,
  &#39;properties&#39; =&amp;gt; properties,
  &#39;virtualGuests&#39; =&amp;gt; [ {&#39;id&#39; =&amp;gt; &#39;25367125&#39;} ]
}

begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(productOrder)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/rest/migratevsidisk/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/migratevsidisk/</guid>
      <description>

&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder/&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder`&lt;/p&gt;

&lt;h4 id=&#34;getting-the-proper-priceid&#34;&gt;Getting the proper priceId&lt;/h4&gt;

&lt;p&gt;You can use the following &lt;a href=&#34;https://softlayer.github.io/python/list_packages/&#34;&gt;python example&lt;/a&gt; to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from &lt;code&gt;main.getPackage(126)&lt;/code&gt; to &lt;code&gt;main.getPackage(46)&lt;/code&gt;. The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -X POST --data @migrate.json
https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{  
   &amp;quot;parameters&amp;quot;:[  
      {  
         &amp;quot;complexType&amp;quot;:&amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;,
         &amp;quot;packageId&amp;quot;:46,
         &amp;quot;prices&amp;quot;:[  
            {  
               &amp;quot;id&amp;quot;:13899,
               &amp;quot;categories&amp;quot;:[  
                  {  
                     &amp;quot;categoryCode&amp;quot;:&amp;quot;guest_disk0&amp;quot;,
                     &amp;quot;id&amp;quot;:81,
                     &amp;quot;name&amp;quot;:&amp;quot;First Disk&amp;quot;
                  }
               ]
            }
         ],
         &amp;quot;properties&amp;quot;:[  
            {  
               &amp;quot;name&amp;quot;:&amp;quot;MAINTENANCE_WINDOW&amp;quot;,
               &amp;quot;value&amp;quot;:&amp;quot;now&amp;quot;
            }
         ],
         &amp;quot;virtualGuests&amp;quot;:[  
            {  
               &amp;quot;id&amp;quot;:25367125
            }
         ]
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://softlayer.github.io/python/order_quote_advanced/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/order_quote_advanced/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.OrderingManager(self.client)


    def orderQuote(self, quote_id):
        # If you have more than 1 server in the quote, you will need to append
        # 
        guests = {
            &#39;hostname&#39;: &#39;quotetest&#39;, 
            &#39;domain&#39;: &#39;example.com&#39;

        }
        
        quote = self.client[&#39;Billing_Order_Quote&#39;]
        quote_container = quote.getRecalculatedOrderContainer(id=quote_id)
        container = quote_container[&#39;orderContainers&#39;][0]

        container[&#39;quantity&#39;] = 1
        container[&#39;virtualGuests&#39;] = []
        container[&#39;virtualGuests&#39;].append(guests)

        # SoftLayer.exceptions.SoftLayerAPIError: SoftLayerAPIError(SoftLayer_Exception_Order_MismatchedQuantity): The number of servers (2) does not match the order quantity (1).
        # the hardware variable was getting filled out for some reason, even though there were no hardware on this quote.
        container[&#39;hardware&#39;] = None


        container[&#39;presetId&#39;] = None
        container[&#39;provisionScripts&#39;] = [&#39;https://gist.githubusercontent.com/myscript.py&#39;]
        # http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
        # The order of containers passed in needs to match the order they are assigned to either hardware or virtualGuests
        container[&#39;sshKeys&#39;] = [{&#39;sshKeyIds&#39;: [1234]} ]

        # Edit this ID to change the location of the order.
        # this is AMS03
        container[&#39;location&#39;] = 814994
        result = self.client[&#39;Product_Order&#39;].verifyOrder(container)
        pp(result)

    def getOrderContainer(self,quote_id):
        quote = self.client[&#39;Billing_Order_Quote&#39;]
        container = quote.getRecalculatedOrderContainer(id=quote_id)
        return container[&#39;orderContainers&#39;][0]


    def listQuotes(self):
        quotes = self.client[&#39;SoftLayer_Account&#39;].getActiveQuotes()
        pp(quotes)

    def listLocations(self):
        locations = self.client[&#39;SoftLayer_Location&#39;].getDatacenters()
        pp(locations)

    def listSshKeys(self):
        keys = self.client[&#39;SoftLayer_Account&#39;].getSshKeys()
        pp(keys)

if __name__ == &amp;quot;__main__&amp;quot;:
    quote_id = 1942633
    main = example()
    # main.main()
    # main.listQuotes()
    # quote = main.getOrderContainer(quote_id)
    # pp(quote)
    # main.listLocations()
    # main.listSshKeys()
    main.orderQuote(quote_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/ruby/orderlb/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/orderlb/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;rubygems&#39;
require &#39;softlayer_api&#39;

location = &#39;DALLAS06&#39;

# The id of the SoftLayer_Product_Package you wish to order.
# In this case it is a Local Load Balancer.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Every item in SoftLayer&#39;s product catalog is assigned an id. Use these ids
# to tell the SoftLayer API which options you want in your new server. Use
# the getActivePackages() method in the SoftLayer_Account API service to get
# a list of available item and price options per available package.
prices = [
   {&#39;id&#39; =&amp;gt; 2078}  # Shared Load Balancer w/ 500 VIP Connections
]

# Build a skeleton SoftLayer_Container_Product_Order object
# containing the order you wish to place.
orderTemplate = {
   &#39;location&#39; =&amp;gt; location,
   &#39;packageId&#39; =&amp;gt; packageId,
   &#39;prices&#39; =&amp;gt; prices
}

softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

# Declare the API client to use the SoftLayer_Product_Order API service
client = softlayer_client.service_named(&#39;Product_Order&#39;)


begin
 # verifyOrder() will check your order for errors. Replace this with a call to
 # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
 # that you can use for your records.
 #
 # Once your order is placed it&#39;ll go through SoftLayer&#39;s provisioning process.

 receipt = client.verifyOrder(orderTemplate)
 puts receipt
rescue Exception =&amp;gt; exception
 puts &amp;quot;There is an error in the order: #{exception}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/rest/orderlb/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/orderlb/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::verifyOrder()&lt;/code&gt;&lt;/a&gt;
Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder&#34;&gt;&lt;code&gt;SoftLayer_Product_Order::placeOrder()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Product_Order/verifyOrder
URL: SoftLayer_Product_Order/placeOrder&lt;/p&gt;

&lt;p&gt;In the following example I am ordering a Local Load Balancer 500 VIP connections (PriceId: 2078) in the Dallas 06 Datacenter (locationId: 154820).&lt;/p&gt;

&lt;p&gt;Example CURL using verifyOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example CURL using placeOrder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/placeOrder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/python/createlbpython/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/createlbpython/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a load balancer

Important manual pages:
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json


# The package to order load balancers.
packageId = 194

# Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain
# much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id
# to know what you want to order.

# Since Load Balancers can have Location Specific itemPriceId&#39;s I am using the following script to
# return just the standard (location agnostic) itemPriceId&#39;s.
# https://gist.github.com/greyhoundforty/a0b55afcab9bc758405e21a39b93c63d
# In my case I am going with &#39;Load Balancer 500 VIP Connections&#39;

prices = [
   {
       &amp;quot;id&amp;quot;: 2078
   }
]

# Declare the API client.
client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

orderData = {
   &amp;quot;prices&amp;quot;: prices,
   &amp;quot;packageId&amp;quot;: packageId,
   &amp;quot;location&amp;quot;: &amp;quot;DALLAS06&amp;quot;
}

try:
   # verifyOrder() will check your order for errors. Replace this with a call to
   # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
   # that you can use for your records.
   response = productOrderService.verifyOrder(orderData)
   print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
   # If there was an error returned from the SoftLayer API then bomb out with the
   # error message.
   print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>https://softlayer.github.io/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Modify the configuration for a Bare Metal Server.</title>
      <link>https://softlayer.github.io/python/modify_bare_metal/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/modify_bare_metal/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Upgrades a server.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/getUpgradeItemPrices
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Property
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Hardware_Server_Upgrade

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer.API
import json


def getServer(serverIp, hardwareService):
    &amp;quot;&amp;quot;&amp;quot;Get the server.
         :param string serverIp: The Ip address of the server.
         :param SoftLayer_Hardware_Server hardwareService: the SoftLayer_Hardware_Server service.
         :returns: A SoftLayer_Hardware_Server object.
    &amp;quot;&amp;quot;&amp;quot;
    try:
        objectMask = &amp;quot;mask[id]&amp;quot;
        server = hardwareService.findByIpAddress(serverIp, mask=objectMask)
        if not server:
            print(&amp;quot;There is no a server with the IP address: &amp;quot; + serverIp)
            exit(1)
    except SoftLayer.SoftLayerAPIError as e:
        print(&amp;quot;Unable to retrieve the server:&amp;quot; % (e.faultCode, e.faultString))
        exit(1)
    return server


def getUpgradeItems(server, hardwareService):
    &amp;quot;&amp;quot;&amp;quot;Get the prices of the items to upgrade in a server.
         :param SoftLayer_Hardware_Server server: The server to get the upgrade item prices.
         :param SoftLayer_Hardware_Server hardwareService: the SoftLayer_Hardware_Server service.
         :returns: A array of SoftLayer_Product_Item_Price object.
    &amp;quot;&amp;quot;&amp;quot;
    try:
        upgradeItems = hardwareService.getUpgradeItemPrices(id=server[&#39;id&#39;])
    except SoftLayer.SoftLayerAPIError as e:
        print(&amp;quot;Unable to retrieve the upgrade items:&amp;quot; % (e.faultCode, e.faultString))
        exit(1)
    return upgradeItems

# The IP address of the server we wish to modify
serverIp = &amp;quot;184.172.45.222&amp;quot;

# Specify the items to upgrade and the values.
# It uses the same names and values as the displayed
# in Softlayer&#39;s Portal.
modify = {
    &amp;quot;FIRST HARD DRIVE&amp;quot;: &amp;quot;2.00 TB SATA&amp;quot;,
    &amp;quot;SECOND HARD DRIVE&amp;quot;: &amp;quot;500 GB SATA&amp;quot;
}

# The date for the upgrade of the server.
dateForUpgrade = &amp;quot;2015-12-15T03:00:00-06:00&amp;quot;

client = SoftLayer.Client()
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]

server = getServer(serverIp, hardwareService)
pricesUpgrade = getUpgradeItems(server, hardwareService)

# Getting the item prices for the upgrade.
prices = []
for item in modify.keys():
    for price in pricesUpgrade:
        added = False
        for category in price[&#39;categories&#39;]:
            if category[&#39;name&#39;].strip().upper() == item.strip().upper() and \
               price[&#39;item&#39;][&#39;description&#39;].strip().upper() == modify[item].strip().upper():
                prices.append(price)
                added = True
                break
        if added:
            break
    if not added:
        print(&amp;quot;There is no price for the item: &amp;quot; + item + &amp;quot;- &amp;quot; + modify[item])


# Build a skeleton SoftLayer_Container_Product_Order_Property objects
properties = [
    {
        &#39;name&#39;: &#39;MAINTENANCE_WINDOW&#39;,
        &#39;value&#39;: dateForUpgrade
    },
    {
        &#39;name&#39;: &#39;MAINTENANCE_WINDOW_ID&#39;,
        &#39;value&#39;: 483
    }
]

# Build a skeleton SoftLayer_Container_Product_Order_Hardware_Server_Upgrade object
# containing the upgrade you wish to place
upgradeData = {
    &#39;hardware&#39;: [server],
    &#39;prices&#39;: prices,
    &#39;properties&#39;: properties,
    &#39;complexType&#39;: &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;
}

try:
    # When you are ready to upgrade the server
    # change veryOrder() method by placeOrder method.
    result = productOrderService.verifyOrder(upgradeData)
    print(json.dumps(result, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to upgrade bare metal server faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Place block storage (performance ISCSI) order</title>
      <link>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Order a block storage (performance ISCSI).

Important manual pages:
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package
http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItems
http://sldn.softlayer.com/reference/services/SoftLayer_Location
http://sldn.softlayer.com/reference/services/SoftLayer_Location/getDatacenters
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type
http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type/getAllObjects
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Location
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Storage_Enterprise
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price
http://sldn.softlayer.com/blog/cmporter/Location-based-Pricing-and-You
http://sldn.softlayer.com/blog/bpotter/Going-Further-SoftLayer-API-Python-Client-Part-3
http://sldn.softlayer.com/article/Object-Filters
http://sldn.softlayer.com/article/Python
http://sldn.softlayer.com/article/Object-Masks

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# Values &amp;quot;AMS01&amp;quot;, &amp;quot;AMS03&amp;quot;, &amp;quot;CHE01&amp;quot;, &amp;quot;DAL05&amp;quot;, &amp;quot;DAL06&amp;quot; &amp;quot;FRA02&amp;quot;, &amp;quot;HKG02&amp;quot;, &amp;quot;LON02&amp;quot;, etc.
location = &amp;quot;AMS01&amp;quot;

# Values &amp;quot;20&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;80&amp;quot;, &amp;quot;100&amp;quot;, etc.
storageSize = &amp;quot;40&amp;quot;

# Values between &amp;quot;100&amp;quot; and &amp;quot;6000&amp;quot; by intervals of 100.
iops = &amp;quot;100&amp;quot;

# Values &amp;quot;Hyper-V&amp;quot;, &amp;quot;Linux&amp;quot;, &amp;quot;VMWare&amp;quot;, &amp;quot;Windows 2008+&amp;quot;, &amp;quot;Windows GPT&amp;quot;, &amp;quot;Windows 2003&amp;quot;, &amp;quot;Xen&amp;quot;
os = &amp;quot;Linux&amp;quot;

PACKAGE_ID = 222

client = SoftLayer.Client()
productOrderService = client[&#39;SoftLayer_Product_Order&#39;]
packageService = client[&#39;SoftLayer_Product_Package&#39;]
locationService = client[&#39;SoftLayer_Location&#39;]
osService = client[&#39;SoftLayer_Network_Storage_Iscsi_OS_Type&#39;]

objectFilterDatacenter = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: location.lower()}}
objectFilterStorageNfs = {&amp;quot;items&amp;quot;: {&amp;quot;categories&amp;quot;: {&amp;quot;categoryCode&amp;quot;: {&amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iscsi&amp;quot;}}}}
objectFilterOsType = {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: os}}

try:
    # Getting the datacenter.
    datacenter = locationService.getDatacenters(filter=objectFilterDatacenter)
    # Getting the performance storage NFS prices.
    itemsStorageNfs = packageService.getItems(id=PACKAGE_ID, filter=objectFilterStorageNfs)
    # Getting the storage space prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_space&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesStorageSpace = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the storage space value is invalid.
    if len(pricesStorageSpace) == 0:
        raise ValueError(&#39;The storage space value: &#39; + storageSize + &#39; GB, is not valid.&#39;)
    # Getting the IOPS prices
    objectFilter = {
        &amp;quot;itemPrices&amp;quot;: {
            &amp;quot;item&amp;quot;: {
                &amp;quot;capacity&amp;quot;: {
                    &amp;quot;operation&amp;quot;: iops
                }
            },
            &amp;quot;attributes&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                    &amp;quot;operation&amp;quot;: storageSize
                }
            },
            &amp;quot;categories&amp;quot;: {
                &amp;quot;categoryCode&amp;quot;: {
                    &amp;quot;operation&amp;quot;: &amp;quot;performance_storage_iops&amp;quot;
                }
            },
            &amp;quot;locationGroupId&amp;quot;: {
                &amp;quot;operation&amp;quot;: &amp;quot;is null&amp;quot;
            }
        }
    }
    pricesIops = packageService.getItemPrices(id=PACKAGE_ID, filter=objectFilter)
    # If the prices list is empty that means that the IOPS value is invalid for the configured storage space.
    if len(pricesIops) == 0:
        raise ValueError(&#39;The IOPS value: &#39; + iops + &#39;, is not valid for the storage space: &#39; + storageSize + &#39; GB.&#39;)
    # Getting the OS.
    os = osService.getAllObjects(filter=objectFilterOsType)
    # Building the order template.
    orderData = {
        &amp;quot;complexType&amp;quot;: &amp;quot;SoftLayer_Container_Product_Order_Network_PerformanceStorage_Iscsi&amp;quot;,
        &amp;quot;packageId&amp;quot;: PACKAGE_ID,
        &amp;quot;location&amp;quot;: datacenter[0][&#39;id&#39;],
        &amp;quot;quantity&amp;quot;: 1,
        &amp;quot;prices&amp;quot;: [
            {
                &amp;quot;id&amp;quot;: itemsStorageNfs[0][&#39;prices&#39;][0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesStorageSpace[0][&#39;id&#39;]
            },
            {
                &amp;quot;id&amp;quot;: pricesIops[0][&#39;id&#39;]
            }
        ],
        &amp;quot;osFormatType&amp;quot;: os[0]
    }
    # verifyOrder() will check your order for errors. Replace this with a call to
    # placeOrder() when you&#39;re ready to order. Both calls return a receipt object
    # that you can use for your records.
    response = productOrderService.verifyOrder(orderData)
    print(json.dumps(response, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to place the order. faultCode=%s, faultString=%s&amp;quot; % (e.faultCode, e.faultString))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>https://softlayer.github.io/php/orderfirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/orderfirewalls/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();
        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices=1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function placeOrderHardwareFirewall() {
        // http://sldn.softlayer.com/blog/phil/Getting-Started-Firewalls
        // The speed of the firewall needs to match speed of the server
       
        // 3896 , HARDWARE_FIREWALL_HIGH_AVAILABILITY , Hardware Firewall (High Availability)
        // 297 , 1000MBPS_HARDWARE_FIREWALL , 1000Mbps Hardware Firewall
        // 298 , 100MBPS_HARDWARE_FIREWALL , 100Mbps Hardware Firewall
        // 1296 , 2000MBPS_HARDWARE_FIREWALL , 2000Mbps Hardware Firewall
        // 4550 , 20MBPS_HARDWARE_FIREWALL , 20Mbps Hardware Firewall
        // 299 , 10MBPS_HARDWARE_FIREWALL , 10Mbps Hardware Firewall
        // 1329 , HARDWARE_FIREWALL_DEDICATED , Hardware Firewall (Dedicated)
        // 4551 , 200MBPS_HARDWARE_FIREWALL , 200Mbps Hardware Firewall
        // $example-&amp;gt;getPackageById(0, 297 );
        // Generic Location Price
        // (
        //  [id] =&amp;gt; 408
        //  [itemId] =&amp;gt; 297
        //  [locationGroupId] =&amp;gt;
        //  [oneTimeFee] =&amp;gt; 0
        //  [recurringFee] =&amp;gt; 199
        //  [setupFee] =&amp;gt; 0
        // )
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 408;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();

        // Put your serverId here
        $serverToFirewall = new stdClass();
        $serverToFirewall-&amp;gt;id = 12345;
        $container-&amp;gt;hardware[0] = $serverToFirewall;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }


    function placeOrderFortigateAppliance() {
        // The speed of the firewall needs to match speed of the server
        // $example-&amp;gt;getPackageById(0, 4337 );
        // 4337 , FORTIGATE_SECURITY_APPLIANCE , FortiGate Security Appliance
        // 4338 , FORTIGATE_SECURITY_APPLIANCE_HIGH_AVAILABILITY , FortiGate Security Appliance (High Availability)
        // Generic Location Price
        // [id] =&amp;gt; 21514
        // [itemId] =&amp;gt; 4337
        // [locationGroupId] =&amp;gt;
        // [recurringFee] =&amp;gt; 999
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $price = new stdClass();
        $price-&amp;gt;id = 21514;

        // http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated/
        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Network_Protection_Firewall_Dedicated&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;hardware = array();
        // Put the vlan id that you want to protect here
        $container-&amp;gt;vlanId = 12345;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

}


$example = new Example();
// $example-&amp;gt;getAllPackages();
// $example-&amp;gt;getPackageById(0, 297 );
// $example-&amp;gt;placeOrderHardwareFirewall();
// $example-&amp;gt;getPackageById(0, 4337 );
// $example-&amp;gt;placeOrderFortigateAppliance();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order Server with security software</title>
      <link>https://softlayer.github.io/php/orderbaremetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/orderbaremetal/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;

class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();

        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }


    function getPackageById($id=0, $onlyShow=0, $showPrices = 1) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                if ($showPrices) {
                    print_r($item-&amp;gt;prices); 
                }
            }
        }
    }

    function getActiveRamItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveRamItems();
        print_r($items);
    }

    function getActiveServerItems($packageId = 0) {
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Package&#39;, $packageId, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $items = $client-&amp;gt;getActiveServerItems();
        print_r($items);
    }



    function placeOrder() {

        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();
        $container = new stdClass();

        $priceArray = array(
            49485, //INTEL_XEON_2650_2_00
            36253, //OS_WINDOWS_2012_R2_FULL_DC_64_BIT_2         
            49405, //RAM_16_GB
            876, //DISK_CONTROLLER_NONRAID
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            49759, //HARD_DRIVE_1_00_TB_SATA_2
            274, //1_GBPS_PUBLIC_PRIVATE_NETWORK_UPLINKS
            50261, //BANDWIDTH_20000_GB
            21, //1_IP_ADDRESS
            906, //REBOOT_KVM_OVER_IP
            420, //UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT
            56, //MONITORING_HOST_PING_AND_TCP_SERVICE
            57, //NOTIFICATION_EMAIL_AND_TICKET
            58, // response, AUTOMATED_NOTIFICATION
            418, //NESSUS_VULNERABILITY_ASSESSMENT_REPORTING
            413, //MCAFEE_HOST_INTRUSION_PROTECTION_WREPORTING
            594, //MCAFEE_VIRUSSCAN_ANTIVIRUS_WINDOWS                    
        );
        $container-&amp;gt;prices = array();
        foreach ($priceArray as $item) {
            $priceId = new stdClass();
            $priceId-&amp;gt;id = $item;
            $container-&amp;gt;prices[] = $priceId;
        }

        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Hardware_Server&amp;quot;;
        $container-&amp;gt;packageId = 273;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;location = 448994;  //DAL05
        $container-&amp;gt;serverCount = 1;

        $hardware = new stdClass();
        $hardware-&amp;gt;domain = &amp;quot;test.com&amp;quot;;
        $hardware-&amp;gt;hostname = &amp;quot;thisIsTest&amp;quot;;
        $container-&amp;gt;hardware = $hardware;

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        print_r($order);
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }
}


$example = new Example();
// $example-&amp;gt;getAllPackages();

// Your package needs to have both activeRamItems and activeServerItems to be orderable.
// $example-&amp;gt;getActiveRamItems(273);
// $example-&amp;gt;getActiveServerItems(273);

//All price ids are from this function
// $example-&amp;gt;getPackageById(273,0,1);

$example-&amp;gt;placeOrder();    

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://softlayer.github.io/php/ordersslcert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/ordersslcert/</guid>
      <description>

&lt;h4 id=&#34;generating-a-csr&#34;&gt;Generating a CSR&lt;/h4&gt;

&lt;p&gt;You will need a csr to make this request, it should be on your local file system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl genrsa -out domain.key 2048
openssl req -new -sha256 -key domain.key -out domain.csr
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
class Example
{
    function __construct() {
        $this-&amp;gt;apiUsername = &#39;&#39;;
        $this-&amp;gt;apiKey = &#39;&#39;;
    }

    /*
    * Package 0 is the &amp;quot;Everything else&amp;quot; pacakge, which contains SSL certain. But if you didn&#39;t remember that
    * this function will get you that information
    */
    function getAllPackages() {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $packages = $packageClient-&amp;gt;getAllObjects();

        print &amp;quot;ID -&amp;gt; Name \n&amp;quot;;
        foreach($packages as $package) {
            print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;;
        }
    }

    /*
    * Each package has a lot of items, so this function will show you all of those along with their prices. 
    * Search through it for the proper SSL item you want to order, and take note of its price
    */
    function getPackageById($id=0, $onlyShow=0) {
        $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $package = $packageClient-&amp;gt;getItems();
        print &amp;quot;ID, KeyName, Description \n&amp;quot;;
        foreach ($package as $item) {
            if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) {
                print $item-&amp;gt;id . &amp;quot; , &amp;quot; . $item-&amp;gt;keyName . &amp;quot; , &amp;quot; . $item-&amp;gt;description . &amp;quot;\n&amp;quot; ;
                print_r($item-&amp;gt;prices); 
            }
        }
    }


    /*
    * Change verifyOrder to placeOrder when you are actually ready to make a certificate 
    */
    function placeOrder($csrFilename=&#39;./domain.csr&#39;) {

        $csr = file_get_contents($csrFilename);
        $client = \SoftLayer\XmlRpcClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $order = new stdClass();

        $addressInfo = new stdClass();
        $addressInfo-&amp;gt;address = new stdClass();
        $addressInfo-&amp;gt;address-&amp;gt;addressLine1 = &amp;quot;1234 fleet street&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;city = &amp;quot;Houston&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;countryCode = &amp;quot;US&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;postalCode =  &amp;quot;77002&amp;quot;;
        $addressInfo-&amp;gt;address-&amp;gt;state = &amp;quot;TX&amp;quot;;
        $addressInfo-&amp;gt;emailAddress =&amp;quot;chgallo@lablayer.info&amp;quot;;
        $addressInfo-&amp;gt;firstName = &amp;quot;Christopher&amp;quot;;
        $addressInfo-&amp;gt;lastName = &amp;quot;Gallo&amp;quot;;
        $addressInfo-&amp;gt;organizationName = &amp;quot;SoftLayer&amp;quot;;
        $addressInfo-&amp;gt;phoneNumber = &amp;quot;281-123-4567&amp;quot;;
        $addressInfo-&amp;gt;title = &amp;quot;Dev&amp;quot;; 

        $price = new stdClass();
        $price-&amp;gt;id = 1836;

        $container = new stdClass();
        $container-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Security_Certificate&amp;quot;;
        $container-&amp;gt;packageId = 0;
        $container-&amp;gt;quantity = 1;
        $container-&amp;gt;serverCount = 1;
        $container-&amp;gt;serverType = &#39;apacheapachessl&#39;;
        $container-&amp;gt;prices = array($price);
        $container-&amp;gt;certificateSigningRequest = $csr;

        $container-&amp;gt;technicalContact = $addressInfo;
        $container-&amp;gt;administrativeContact = $addressInfo;
        $container-&amp;gt;organizationInformation = $addressInfo;
        $container-&amp;gt;billingContact = $addressInfo;
        # Needs to be a VERY specific email @ the domain you are registering
        # admin / administrator / hostmaster / root / webmaster / mailmaster
        $container-&amp;gt;orderApproverEmailAddress = &amp;quot;admin@lablayer.info&amp;quot;;  

        $order-&amp;gt;orderContainers = array();
        $order-&amp;gt;orderContainers[0] = $container;
        // print_r($order);
        $result = $client-&amp;gt;verifyOrder($order);
        print_r($result);
    }

    /*
    * This info is required for the serverType property. 
    */
    function getServerTypes() {
        // http://sldn.softlayer.com/reference/services/SoftLayer_Security_Certificate_Request_ServerType
        $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Security_Certificate_Request_ServerType&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey );
        $types = $client-&amp;gt;getAllObjects();
        print_r($types);
    }

}


$example = new Example();
// Figure out which package has the SSL certs
$example-&amp;gt;getAllPackages();

// Package 0, item 964 is the ssl cert we want to see the prices for.
$example-&amp;gt;getPackageById(0, 964 );

// 964 , SSL_CERTIFICATE_RAPIDSSL_1_YEAR , RapidSSL - 1 year
// [id] =&amp;gt; 1836
// [setupFee] =&amp;gt; 19

$example-&amp;gt;getServerTypes();
/*
[1] =&amp;gt; stdClass Object
    (
        [description] =&amp;gt; Apache + ApacheSSL
        [id] =&amp;gt; 2
        [name] =&amp;gt; apacheapachessl
        [value] =&amp;gt; 22
    )
*/
$example-&amp;gt;placeOrder();    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Softlayer_product_order on SoftLayer API</title>
    <link>https://softlayer.github.io/classes/softlayer_product_order/</link>
    <description>Recent content in Softlayer_product_order on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/classes/softlayer_product_order/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to order Vlans</title>
      <link>https://softlayer.github.io/rest/orderVlan/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/rest/orderVlan/</guid>
      <description>There are a few steps in preparing to order a VLAN.
Find the DC name Lets start by finding the datacenter we want to order in.
curl -u $SL_USER:$SL_APIKEY &#39;https://api.softlayer.com/rest/v3.1/SoftLayer_Product_Package/571/getRegions.json?objectMask=mask\[description,keyname\]&#39; | python -m json.tool  Keep track of the KeyName of the location you want to order from.
[{&amp;quot;description&amp;quot;: &amp;quot;HOU02 - Houston&amp;quot;, &amp;quot;keyname&amp;quot;: &amp;quot;HOUSTON02&amp;quot; }]  Find the correct router (optional) If you want the new VLAN to be behind a specific router, you need to find the ID of that router.</description>
    </item>
    
    <item>
      <title>SoftLayer_Product_Order</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/</guid>
      <description>SoftLayer_Product_Order Service Datatype   Description All orders (servers, virtual servers and services) pass through the [[SoftLayer_Product_Order]] service. This service provides the entry point for placing orders and quotes with SoftLayer. To place orders using these services, you must provide the appropriate container type as defined by [[SoftLayer_Container_Product_Order]]. For server orders, you would use [[SoftLayer_Container_Product_Order_Hardware_Server]]. For virtual server orders, you would use [[SoftLayer_Container_Product_Order_Virtual_Guest]]. For additional service orders, it will depend on the additional service (e.</description>
    </item>
    
    <item>
      <title>Ordering with KeyNames</title>
      <link>https://softlayer.github.io/python/ordering_slcli/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/ordering_slcli/</guid>
      <description>Version 5.4.0 of the Softlayer-python project introducted some managers and CLI functions that greatly simplify the ordering processes via the api.
Building a package still requires a few steps however.
1. Find the package name slcli order package-list  The most common packages are the following:
   Description Package KeyName Package Type     Additional Products ADDITIONAL_PRODUCTS ADDITIONAL_SERVICES   Cloud Server CLOUD_SERVER VIRTUAL_SERVER_INSTANCE   Network Gateway Appliance NETWORK_GATEWAY_APPLIANCE BARE_METAL_GATEWAY   Load Balancers LOAD_BALANCERS ADDITIONAL_SERVICES_LOAD_BALANCER   Bare Metal Server BARE_METAL_SERVER BARE_METAL_CPU_FAST_PROVISION   POWER8 TULETA IBM_POWER_8 BARE_METAL_POWER_CPU   Object Storage OBJECT_STORAGE ADDITIONAL_SERVICES_OBJECT_STORAGE   Firewall FIREWALL ADDITIONAL_SERVICES_FIREWALL   Storage As A Service (StaaS) STORAGE_AS_A_SERVICE_STAAS STORAGE_AS_A_SERVICE   Load Balancer As A Service (LBaaS) LBAAS LOAD_BALANCER_AS_A_SERVICE   Dedicated Host DEDICATED_HOST DEDICATED_HOST   Public Virtual Server PUBLIC_CLOUD_SERVER VIRTUAL_SERVER_INSTANCE    Once we have selected a package we need to find out where we can order this package.</description>
    </item>
    
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://softlayer.github.io/python/orderBareMetal/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.
 Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    
    <item>
      <title>Ordering Raid</title>
      <link>https://softlayer.github.io/ruby/orderingRaid/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/orderingRaid/</guid>
      <description>As a SoftLayer user, you have probably seen the beautiful RAID Configurator that greets you when you order a server on the SoftLayer website.
It allows you to do anything you like, from a straight RAID configuration involving all drives in a single disk array, to a much more intricate configuration with nearly any mix of disks and RAID types.
However beautiful and practical the interface, sometimes you want to script this process, and the SoftLayer mantra of &amp;ldquo;Anything you can do in the Web interface, you can do on the API&amp;rdquo; also rings true in this case.</description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/ruby/orderNetscaler/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/orderNetscaler/</guid>
      <description>require &#39;softlayer_api&#39; require &#39;pp&#39; client = SoftLayer::Client.new(:timeout =&amp;gt; 120) config = { &#39;orderContainers&#39; =&amp;gt; [ {&amp;quot;hardware&amp;quot; =&amp;gt; [{ &amp;quot;primaryBackendNetworkComponent&amp;quot; =&amp;gt; { # REPLACE THIS &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1211234 }, &amp;quot;primaryNetworkComponent&amp;quot; =&amp;gt; { # REPLACE THIS &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1212456 } }], # REPLACE THIS with your location &amp;quot;location&amp;quot; =&amp;gt; &amp;quot;DALLAS09&amp;quot;, &amp;quot;packageId&amp;quot; =&amp;gt; 192, &amp;quot;quantity&amp;quot; =&amp;gt; 1, # Price IDS for Netscaler and 2 IPs &amp;quot;prices&amp;quot; =&amp;gt; [ {&amp;quot;id&amp;quot; =&amp;gt; 44964}, {&amp;quot;id&amp;quot; =&amp;gt; 17238} ] }] } order = client[&#39;Product_Order&#39;].</description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/python/orderNetscaler/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderNetscaler/</guid>
      <description>import SoftLayer from pprint import pprint as pp class orderNetscaler(): def __init__(self): self.client = SoftLayer.Client() def main(self): productOrder = { &#39;orderContainers&#39;: [ {&amp;quot;hardware&amp;quot;: [{ &amp;quot;primaryBackendNetworkComponent&amp;quot;: { # REPLACE THIS &amp;quot;networkVlanId&amp;quot;: 1234 }, &amp;quot;primaryNetworkComponent&amp;quot;: { # REPLACE THIS &amp;quot;networkVlanId&amp;quot;: 456 } }], # REPLACE THIS with your location &amp;quot;location&amp;quot;: &amp;quot;DALLAS09&amp;quot;, &amp;quot;packageId&amp;quot;: 192, &amp;quot;quantity&amp;quot;: 1, # Price IDS for Netscaler and 2 IPs &amp;quot;prices&amp;quot;: [ {&amp;quot;id&amp;quot;: 44964}, {&amp;quot;id&amp;quot;: 17238} ] }] } order = self.</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/python/migratevsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/migratevsi/</guid>
      <description>You can use the following python example to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.
import SoftLayer import json # The package for Virtual Guests packageId = 46 # Our exising VSI ID virtualGuests = [ { &amp;quot;id&amp;quot;:25367125 } ] # The price item id for a 25GB Local Primary Drive.</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/ruby/migrateVsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/migrateVsi/</guid>
      <description>You can use the following ruby example to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.
require &#39;softlayer_api&#39; require &#39;pp&#39; softlayer_client = SoftLayer::Client.new(:timeout =&amp;gt; 120) client = softlayer_client.service_named(&#39;Product_Order&#39;) # The package for Virtual Guests packageId = 46 # The price item id for a 25GB Local Primary Drive.</description>
    </item>
    
    <item>
      <title>Migrating a VSI from SAN to Local Storage and vice-versa</title>
      <link>https://softlayer.github.io/rest/migrateVsiDisk/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/rest/migrateVsiDisk/</guid>
      <description>Operation: POST
Method: SoftLayer_Product_Order::placeOrder()
URL: SoftLayer_Product_Order/verifyOrder`
Getting the proper priceId You can use the following python example to get a list of all the available priceId&amp;rsquo;s for the Virtual_Guest package. You need to change the second to last line from main.getPackage(126) to main.getPackage(46). The priceId you need will depend on if you are moving to or from Local Storage and the size of the current primary drive.
Example CURL:</description>
    </item>
    
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://softlayer.github.io/python/order_quote_advanced/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/order_quote_advanced/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def orderQuote(self, quote_id, dc_id = None, image_id = None, private_vlan = None, public_vlan = None): # If you have more than 1 server in the quote, you will need to append # a copy of this for each VSI, with hostnames changed as needed guests = { &#39;hostname&#39;: &#39;quotetest&#39;, &#39;domain&#39;: &#39;example.com&#39; } if public_vlan: guests.update({ &#39;primaryNetworkComponent&#39;: { &amp;quot;networkVlan&amp;quot;: {&amp;quot;id&amp;quot;: int(public_vlan)}}}) if private_vlan: guests.</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/ruby/orderLB/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/orderLB/</guid>
      <description>require &#39;rubygems&#39; require &#39;softlayer_api&#39; location = &#39;DALLAS06&#39; # The id of the SoftLayer_Product_Package you wish to order. # In this case it is a Local Load Balancer. packageId = 194 # Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain # much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id # to know what you want to order. # Every item in SoftLayer&#39;s product catalog is assigned an id.</description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/rest/orderLB/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/rest/orderLB/</guid>
      <description>Operation: POST
Method: SoftLayer_Product_Order::verifyOrder() Method: SoftLayer_Product_Order::placeOrder()
URL: SoftLayer_Product_Order/verifyOrder URL: SoftLayer_Product_Order/placeOrder
In the following example I am ordering a Local Load Balancer 500 VIP connections (PriceId: 2078) in the Dallas 06 Datacenter (locationId: 154820).
Example CURL using verifyOrder:
curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder&amp;quot;  Example CURL using placeOrder:
curl --user &amp;quot;$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY&amp;quot; -k -X POST -d &#39;{&amp;quot;parameters&amp;quot;:[{&amp;quot;packageId&amp;quot;:194,&amp;quot;location&amp;quot;:154820,&amp;quot;quantity&amp;quot;:1,&amp;quot;prices&amp;quot;:[{&amp;quot;id&amp;quot;:2078}]}]}&#39; &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/placeOrder&amp;quot;  </description>
    </item>
    
    <item>
      <title>Order a Local Load Balancer</title>
      <link>https://softlayer.github.io/python/createLBpython/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/createLBpython/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; Order a load balancer Important manual pages: http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer import json # The package to order load balancers. packageId = 194 # Build a skeleton SoftLayer_Product_Item_Price objects. These objects contain # much more than ids, but SoftLayer&#39;s ordering system only needs the price&#39;s id # to know what you want to order. # Since Load Balancers can have Location Specific itemPriceId&#39;s I am using the following script to # return just the standard (location agnostic) itemPriceId&#39;s.</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>https://softlayer.github.io/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/upgrade_examples/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() &amp;quot;&amp;quot;&amp;quot; Prints out what can be upgraded on a server by category. &amp;quot;&amp;quot;&amp;quot; def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;): result = self.client[service].getUpgradeItemPrices(id=hardware_id) last_id = 0 for item in result: now_id = item[&#39;categories&#39;][0][&#39;id&#39;] if now_id != last_id: print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;])) last_id = now_id print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;])) &amp;quot;&amp;quot;&amp;quot; Get the available maintenance windows that exist for a server.</description>
    </item>
    
    <item>
      <title>Modify the configuration for a Bare Metal Server.</title>
      <link>https://softlayer.github.io/python/modify_bare_metal/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/modify_bare_metal/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; Upgrades a server. Important manual pages http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/getUpgradeItemPrices http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Property http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Hardware_Server_Upgrade License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer.API import json def getServer(serverIp, hardwareService): &amp;quot;&amp;quot;&amp;quot;Get the server. :param string serverIp: The Ip address of the server. :param SoftLayer_Hardware_Server hardwareService: the SoftLayer_Hardware_Server service. :returns: A SoftLayer_Hardware_Server object. &amp;quot;&amp;quot;&amp;quot; try: objectMask = &amp;quot;mask[id]&amp;quot; server = hardwareService.findByIpAddress(serverIp, mask=objectMask) if not server: print(&amp;quot;There is no a server with the IP address: &amp;quot; + serverIp) exit(1) except SoftLayer.</description>
    </item>
    
    <item>
      <title>Place block storage (performance ISCSI) order</title>
      <link>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/place_order_block_storage_performance_iscsi/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot; Order a block storage (performance ISCSI). Important manual pages: http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/verifyOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Order/placeOrder http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package http://sldn.softlayer.com/reference/services/SoftLayer_Product_Package/getItems http://sldn.softlayer.com/reference/services/SoftLayer_Location http://sldn.softlayer.com/reference/services/SoftLayer_Location/getDatacenters http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage_Iscsi_OS_Type/getAllObjects http://sldn.softlayer.com/reference/datatypes/SoftLayer_Location http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Network_Storage_Enterprise http://sldn.softlayer.com/reference/datatypes/SoftLayer_Product_Item_Price http://sldn.softlayer.com/blog/cmporter/Location-based-Pricing-and-You http://sldn.softlayer.com/blog/bpotter/Going-Further-SoftLayer-API-Python-Client-Part-3 http://sldn.softlayer.com/article/Object-Filters http://sldn.softlayer.com/article/Python http://sldn.softlayer.com/article/Object-Masks License: http://sldn.softlayer.com/article/License Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; &amp;quot;&amp;quot;&amp;quot; import SoftLayer import json # Values &amp;quot;AMS01&amp;quot;, &amp;quot;AMS03&amp;quot;, &amp;quot;CHE01&amp;quot;, &amp;quot;DAL05&amp;quot;, &amp;quot;DAL06&amp;quot; &amp;quot;FRA02&amp;quot;, &amp;quot;HKG02&amp;quot;, &amp;quot;LON02&amp;quot;, etc. location = &amp;quot;AMS01&amp;quot; # Values &amp;quot;20&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;80&amp;quot;, &amp;quot;100&amp;quot;, etc. storageSize = &amp;quot;40&amp;quot; # Values between &amp;quot;100&amp;quot; and &amp;quot;6000&amp;quot; by intervals of 100.</description>
    </item>
    
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>https://softlayer.github.io/php/orderFirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/orderFirewalls/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;quot;ID -&amp;gt; Name \n&amp;quot;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;; } } function getPackageById($id=0, $onlyShow=0, $showPrices=1) { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;quot;ID, KeyName, Description \n&amp;quot;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
    
    <item>
      <title>Order Server with security software</title>
      <link>https://softlayer.github.io/php/orderBareMetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/orderBareMetal/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;quot;ID -&amp;gt; Name \n&amp;quot;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;quot; -&amp;gt; &amp;quot; . $package-&amp;gt;name . &amp;quot;\n&amp;quot;; } } function getPackageById($id=0, $onlyShow=0, $showPrices = 1) { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;quot;ID, KeyName, Description \n&amp;quot;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://softlayer.github.io/php/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/orderSSLCert/</guid>
      <description>Generating a CSR You will need a csr to make this request, it should be on your local file system.
openssl genrsa -out domain.key 2048 openssl req -new -sha256 -key domain.key -out domain.csr  &amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &#39;&#39;; $this-&amp;gt;apiKey = &#39;&#39;; } /* * Package 0 is the &amp;quot;Everything else&amp;quot; pacakge, which contains SSL certain. But if you didn&#39;t remember that * this function will get you that information */ function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;quot;ID -&amp;gt; Name \n&amp;quot;; foreach($packages as $package) { print $package-&amp;gt;id .</description>
    </item>
    
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://softlayer.github.io/python/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/orderSSLCert/</guid>
      <description>Generating a CSR You will need a csr to make this request, it should be on your local file system.
The contents of the CSR MATTER, they need to match the information for what you are ordering. + orderApproverEmailAddress must match the Email Address of the CSR + The CSR Common name must be set and must be a part of the orderApproverEmailAddress
$ openssl genrsa -out domain.key 2048 $ openssl req -new -sha256 -key domain.</description>
    </item>
    
    <item>
      <title>Create a virtual server from an existing image template</title>
      <link>https://softlayer.github.io/ruby/create_server_from_template/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/ruby/create_server_from_template/</guid>
      <description>require &#39;softlayer_api&#39; require &#39;pp&#39; IMAGE_ID = &#39;foobar&#39; # change me. Image template global ID. # Credentials to the API are read from a configuration file by default. # See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44 SoftLayer::Client.default_client = SoftLayer::Client.new order_template = { hostname: &#39;test&#39;, domain: &#39;example.com&#39;, datacenter: &#39;hou02&#39;, cores: 2, # 2 x 2.0 GHz Cores memory: 4, # 4GB RAM private_network_only: false, dedicated_host_only: false, #os_reference_code: &#39;CENTOS_6_64&#39;, # CentOS 6.latest minimal (64 bit) image_template: SoftLayer::ImageTemplate.template_with_global_id(IMAGE_ID), use_local_disk: false, # Use a SAN disk hourly: true # Charge me for hourly use, rather than monthly.</description>
    </item>
    
    <item>
      <title>Ordering with placeOrder</title>
      <link>https://softlayer.github.io/rest/place_order/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/rest/place_order/</guid>
      <description>Operation: POST
Method: SoftLayer_Product_Order::placeOrder()
URL: SoftLayer_Product_Order/verifyOrder`
Example CURL:
curl -u userid:api_key -X POST --data @create.json https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder  Input JSON:
{ &amp;quot;parameters&amp;quot; : [ { &amp;quot;packageId&amp;quot; : 126, &amp;quot;location&amp;quot; :449494, &amp;quot;quantity&amp;quot; : 1, &amp;quot;hardware&amp;quot;: [{ &amp;quot;hostname&amp;quot;: &amp;quot;TEST&amp;quot;, &amp;quot;domain&amp;quot;: &amp;quot;test1&amp;quot; }], &amp;quot;prices&amp;quot;: [ {&amp;quot;id&amp;quot;: 13739}, {&amp;quot;id&amp;quot;: 13748}, {&amp;quot;id&amp;quot;: 1267}, {&amp;quot;id&amp;quot;: 342}, {&amp;quot;id&amp;quot;: 21141}, {&amp;quot;id&amp;quot;: 58}, {&amp;quot;id&amp;quot;: 876}, {&amp;quot;id&amp;quot;: 57}, {&amp;quot;id&amp;quot;: 55}, {&amp;quot;id&amp;quot;: 21}, {&amp;quot;id&amp;quot;: 906}, {&amp;quot;id&amp;quot;: 420}, {&amp;quot;id&amp;quot;: 418}, {&amp;quot;id&amp;quot;: 37620} ] } ] }  The Price Ids Explained Use getItemPrices to find the IDs and Items you need</description>
    </item>
    
    <item>
      <title>Order a vyatta server with placeOrder</title>
      <link>https://softlayer.github.io/php/order_vyatta/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/order_vyatta/</guid>
      <description>&amp;lt;?php require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $apiUser, $key); $template = new stdClass(); $template_extra = new stdClass(); $template-&amp;gt;packageId = 174; $template-&amp;gt;location = 224092; $template-&amp;gt;quantity = 1; $template_extra-&amp;gt;os = 21; //vyatta $template_extra-&amp;gt;hostname = &#39;foo-vga-small&#39;; $template_extra-&amp;gt;domain = &#39;softlayer-singapore-test.com&#39;; //These might be invalid now, please double check on ordering $template_extra-&amp;gt;price_id = array(13739, // Single Quad Xeon 1270 3.4G 8M 21010, // 4G 878, // Raid //31693, // Raid 1 1267, // 500G 274, // 1GbE 342, // 20T // 21, // 1IP 56, // Ping/TCP Mon 57, // Notification ); $my_template = new stdClass(); for ($cnt = 0; $cnt &amp;lt; $template-&amp;gt;quantity; $cnt++) { $domain = new stdClass(); $domain-&amp;gt;hostname = &amp;quot;$template_extra-&amp;gt;hostname-$cnt&amp;quot;; $domain-&amp;gt;domain = $template_extra-&amp;gt;domain; $template-&amp;gt;hardware[] = $domain; } if (empty($template-&amp;gt;imageTemplateGlobalIdentifier)) { $template_extra-&amp;gt;price_id[] = $template_extra-&amp;gt;os; } foreach ($template_extra-&amp;gt;price_id as $id) { $price = new stdClass(); $price-&amp;gt;id = $id; $template-&amp;gt;prices[] = $price; } $my_template-&amp;gt;orderContainers = array(); $my_template-&amp;gt;orderContainers[0]-&amp;gt;prices = $template-&amp;gt;prices; $my_template-&amp;gt;orderContainers[0]-&amp;gt;hardware = $template-&amp;gt;hardware; $my_template-&amp;gt;orderContainers[0]-&amp;gt;quantity = $template-&amp;gt;quantity; $my_template-&amp;gt;orderContainers[0]-&amp;gt;location = $template-&amp;gt;location; $my_template-&amp;gt;orderContainers[0]-&amp;gt;packageId = $template-&amp;gt;packageId; print_r($my_template); $result = $client-&amp;gt;verifyOrder($my_template); print_r($result);  </description>
    </item>
    
    <item>
      <title>Upgrade virtual guest</title>
      <link>https://softlayer.github.io/php/upgrade_virtual_guest/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/php/upgrade_virtual_guest/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &#39;./vendor/autoload.php&#39;; $apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;); $apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;); $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Order&#39;, null, $apiUsername, $apiKey); //The price of the item you want to upgrade to $price1 = new \stdClass(); $price1-&amp;gt;id = 1641; //The virtual guest you want to upgrade $guest = new \stdClass(); $guest-&amp;gt;id = 22983449; $priceClient = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Product_Package&#39;, 46, $apiUsername, $apiKey); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;description; $objectMask-&amp;gt;capacity; $objectMask-&amp;gt;prices-&amp;gt;id; $objectMask-&amp;gt;categories-&amp;gt;id; $priceClient-&amp;gt;setObjectMask($objectMask); $items = $priceClient-&amp;gt;getObject(); //Shows you what prices are available to select from print_r($items); $upgrade = new \stdClass(); $upgrade-&amp;gt;complexType = &amp;quot;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;quot;; $upgrade-&amp;gt;prices = array($price1); $upgrade-&amp;gt;properties = new \stdClass(); $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow; $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;name = &amp;quot;MAINTENANCE_WINDOW&amp;quot;; $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;value = &amp;quot;now&amp;quot;; $upgrade-&amp;gt;virtualGuests = array($guest); print_r($upgrade); //change to placeOrder($upgrade) to actually make it happen $response = $client-&amp;gt;placeOrder($upgrade); print_r($response); ?</description>
    </item>
    
    <item>
      <title>Create a virtual server from an existing image template</title>
      <link>https://softlayer.github.io/python/create_server_from_template/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/create_server_from_template/</guid>
      <description>getPrivateBlockDeviceTemplateGroups will return a list of all the templates that you have created on your account. Use this method to find the id of the template you want to create a server from.
import SoftLayer from pprint import pprint as pp templateId = 12345 client = SoftLayer.Client() mask = &amp;quot;mask[id,name,note]&amp;quot; imageTemplates = client[&#39;SoftLayer_Account&#39;].getPrivateBlockDeviceTemplateGroups(mask=mask) print(&amp;quot;ID - Name - Note&amp;quot;) for template in imageTemplates: try: print(&amp;quot;%s - %s - %s&amp;quot; % (template[&#39;id&#39;], template[&#39;name&#39;], template[&#39;note&#39;])) except KeyError: print(&amp;quot;%s - %s - %s&amp;quot; % (template[&#39;id&#39;], template[&#39;name&#39;], &#39;None&#39;)) order = { &#39;complexType&#39;: &#39;SoftLayer_Container_Product_Order_Virtual_Guest&#39;, &#39;quantity&#39;: 1, &#39;virtualGuests&#39;: [ {&#39;hostname&#39;: &#39;test-template&#39;, &#39;domain&#39;: &#39;example.</description>
    </item>
    
    <item>
      <title>checkItemAvailability</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/checkItemAvailability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/checkItemAvailability/</guid>
      <description>SoftLayer_Product_Order::checkItemAvailability Overview Parameters    Name Type Description     itemPrices SoftLayer_Product_Item_Price[]  Item prices to be checked.   accountId integer The account number for which to check for a restricted item price.   availabilityTypeKeyNames array of strings An array of keynames for which to check for item availability types.    Required Headers  authenticate  Optional Headers Return Values boolean</description>
    </item>
    
    <item>
      <title>checkItemAvailabilityForImageTemplate</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/checkItemAvailabilityForImageTemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/checkItemAvailabilityForImageTemplate/</guid>
      <description>SoftLayer_Product_Order::checkItemAvailabilityForImageTemplate Overview Parameters    Name Type Description     imageTemplateId integer The image template id for which to check the availability of items.   accountId integer The account number for which to check for a restricted item price.   packageId integer The package id of the package to which the template will be deployed.   availabilityTypeKeyNames array of strings An array of keynames for which to check for item availability types.</description>
    </item>
    
    <item>
      <title>checkItemConflicts</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/checkItemConflicts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/checkItemConflicts/</guid>
      <description>SoftLayer_Product_Order::checkItemConflicts Check order items for conflicts
Overview Check order items for conflicts
Parameters    Name Type Description     itemPrices SoftLayer_Product_Item_Price[]  Item prices to be ordered.    Required Headers  authenticate  Optional Headers Return Values boolean</description>
    </item>
    
    <item>
      <title>getExternalPaymentAuthorizationReceipt</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getExternalPaymentAuthorizationReceipt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getExternalPaymentAuthorizationReceipt/</guid>
      <description>SoftLayer_Product_Order::getExternalPaymentAuthorizationReceipt Returns an order receipt for a completed external (PayPal) payment authorization.
Overview This method simply returns a receipt for a previously finalized payment authorization from PayPal. The response matches the response returned from placeOrder when the order was originally placed with PayPal as the payment type.
Parameters    Name Type Description     token string The token from PayPal   payerId string The PayerID from PayPal    Required Headers  authenticate  Optional Headers Return Values SoftLayer_Container_Product_Order_Receipt</description>
    </item>
    
    <item>
      <title>getNetworks</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getNetworks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getNetworks/</guid>
      <description>SoftLayer_Product_Order::getNetworks Retrieve the networks that are available during ordering.
Overview This method returns a collection of [[SoftLayer_Container_Product_Order_Network]] objects. This will contain the available networks that can be used when ordering services.
If a location id is supplied, the list of networks will be trimmed down to only those that are available at that particular datacenter.
If a package id is supplied, the list of public VLANs and subnets will be trimmed down to those that are available for that particular package.</description>
    </item>
    
    <item>
      <title>getResellerOrder</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getResellerOrder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getResellerOrder/</guid>
      <description>SoftLayer_Product_Order::getResellerOrder Get External Reseller pricing where applicable
Overview When the account is on an external reseller brand, this service will provide a SoftLayer_Product_Order with the the pricing adjusted by the external reseller.
Parameters    Name Type Description     orderContainer SoftLayer_Container_Product_Order      Required Headers  authenticate  Optional Headers Return Values SoftLayer_Container_Product_Order</description>
    </item>
    
    <item>
      <title>getTaxCalculationResult</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getTaxCalculationResult/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getTaxCalculationResult/</guid>
      <description>SoftLayer_Product_Order::getTaxCalculationResult Get the results of a tax calculation.
Overview Sometimes taxes cannot be calculated immediately, so we start the calculations and let them run in the background. This method will return the current progress and information related to a specific tax calculation, which allows real-time progress updates on tax calculations.
Parameters    Name Type Description     orderHash string &amp;lt;&amp;lt;&amp;lt; EOT    Required Headers  authenticate  Optional Headers Return Values SoftLayer_Container_Tax_Cache</description>
    </item>
    
    <item>
      <title>getVlans</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getVlans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/getVlans/</guid>
      <description>SoftLayer_Product_Order::getVlans Get the VLANs that are available during ordering
Overview Return collections of public and private VLANs that are available during ordering. If a location ID is provided, the resulting VLANs will be limited to that location. If the Virtual Server package id (46) is provided, the VLANs will be narrowed down to those locations that contain routers with the VIRTUAL_IMAGE_STORE data attribute.
For the selectedItems parameter, this is a comma-separated string of category codes and item values.</description>
    </item>
    
    <item>
      <title>placeOrder</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/placeOrder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/placeOrder/</guid>
      <description>SoftLayer_Product_Order::placeOrder Place an order using the [[SoftLayer_Container_Product_Order]] data type.
Overview Use this method to place bare metal server, virtual server and additional service orders with SoftLayer. Upon success, your credit card or PayPal account will incur charges for the monthly order total (or prorated value if ordered mid billing cycle). If all products on the order are only billed hourly, you will be charged on your billing anniversary date, which occurs monthly on the day you ordered your first service with SoftLayer.</description>
    </item>
    
    <item>
      <title>placeQuote</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/placeQuote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/placeQuote/</guid>
      <description>SoftLayer_Product_Order::placeQuote Place a quote
Overview Use this method for placing server quotes and additional services quotes. The same applies for this as with verifyOrder. Send in the SoftLayer_Container_Product_Order_Hardware_Server for server quotes. After placing the quote, you must go to this URL to finish the order process. After going to this URL, it will direct you back to a SoftLayer webpage that tells us you have finished the process. After this, it will go to sales for final approval.</description>
    </item>
    
    <item>
      <title>processExternalPaymentAuthorization</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/processExternalPaymentAuthorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/processExternalPaymentAuthorization/</guid>
      <description>SoftLayer_Product_Order::processExternalPaymentAuthorization Process an external (PayPal) payment authorization.
Overview This method simply finalizes an authorization from PayPal. It tells SoftLayer that the customer has completed the PayPal process. This is ONLY needed if you, the customer, have your own API into PayPal and wish to automate authorizations from PayPal and our system. For most, this method will not be needed. Once an order is placed using placeOrder() for PayPal customers, a URL is given back to the customer.</description>
    </item>
    
    <item>
      <title>requiredItems</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/requiredItems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/requiredItems/</guid>
      <description>SoftLayer_Product_Order::requiredItems Get list of items that are required with the item prices provided
Overview Get list of items that are required with the item prices provided
Parameters    Name Type Description     itemPrices SoftLayer_Product_Item_Price[]  Item prices to be ordered.    Required Headers  authenticate  Optional Headers Return Values SoftLayer_Product_Item[]</description>
    </item>
    
    <item>
      <title>verifyOrder</title>
      <link>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/verifyOrder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/services/SoftLayer_Product_Order/verifyOrder/</guid>
      <description>SoftLayer_Product_Order::verifyOrder Verify that an order may be successfully placed with the details provided.
Overview This service is used to verify that an order meets all the necessary requirements to purchase a server, virtual server or service from SoftLayer. It will verify that the products requested do not conflict. For example, you cannot order a Windows firewall with a Linux operating system. It will also check to make sure you have provided all the products that are required for the [[SoftLayer_Product_Package_Order_Configuration (type)|package configuration]] associated with the [[SoftLayer_Product_Package|package id]] on each of the [[SoftLayer_Container_Product_Order (type)|order containers]] specified.</description>
    </item>
    
  </channel>
</rss>
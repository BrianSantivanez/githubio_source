<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_account on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/classes/softlayer_account/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 18 Nov 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Get a list of Virtual Guests and Bare Metal servers per Pod in a Datacenter</title>
      <link>https://softlayer.github.io/python/listByPod/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/listByPod/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
import pprint
from prettytable import PrettyTable

client = SoftLayer.Client()

# Define datacenter e.g: dal05, dal09, ams01, sao01, etc
datacenter = &#39;dal10&#39;

# Declare a new API service objects for SoftLayer_Account
accountClient = client[&#39;SoftLayer_Account&#39;]

# Define objectMask and objectFilters to get additional information
objectMask = &#39;mask[primaryNetworkComponent[router[hostname]]]&#39;
objectFilterBms = {&amp;quot;hardware&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}}
objectFilterVsi = {&amp;quot;virtualGuests&amp;quot;: {&amp;quot;datacenter&amp;quot;: {&amp;quot;name&amp;quot;: {&amp;quot;operation&amp;quot;: datacenter}}}}

# Define array to add pods
pods = []

try:
    # Getting servers and vsis
    servers = accountClient.getHardware(mask=objectMask, filter=objectFilterBms)
    vsis = accountClient.getVirtualGuests(mask=objectMask, filter=objectFilterVsi)

    # Getting pods from servers
    for server in servers:
        if server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;] not in pods:
            pods.append(server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;])
    for vsi in vsis:
        if vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;] not in pods:
            pods.append(vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;])
    # Printing servers according pods
    for pod in pods:
        table = []
        tableDetails = PrettyTable([&#39;POD&#39;, &#39;Server Id&#39;, &#39;Hostname&#39;, &#39;Domain&#39;, &#39;Type&#39;])
        print(&amp;quot;POD: %s &amp;quot; % pod)
        for server in servers:
            if pod in server[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;]:
                tableDetails.add_row([pod, server[&#39;id&#39;], server[&#39;hostname&#39;], server[&#39;domain&#39;], &#39;Hardware&#39;])
        for vsi in vsis:
            if pod in vsi[&#39;primaryNetworkComponent&#39;][&#39;router&#39;][&#39;hostname&#39;]:
                tableDetails.add_row([pod, vsi[&#39;id&#39;], vsi[&#39;hostname&#39;], vsi[&#39;domain&#39;], &#39;Virtual Guest&#39;])
        print(tableDetails)

except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Error. &amp;quot; % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POD: fcr01a.dal10
+--------------+-----------+-----------------+------------------------------+---------------+
|     POD      | Server Id |     Hostname    |            Domain            |      Type     |
+--------------+-----------+-----------------+------------------------------+---------------+
| fcr01a.dal10 |  xxxxxxx  | foundationtest0 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest1 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest2 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  | foundationtest3 |         vmonic.local         |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |   sethjannygpu  |         example.com          |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |  vayatta-tester |         example.com          |    Hardware   |
| fcr01a.dal10 |  xxxxxxx  |  foundationtVW  | foundationtest.vsphere.local | Virtual Guest |
| fcr01a.dal10 |  xxxxxxx  |     jrh-oel     |         example.com          | Virtual Guest |
| fcr01a.dal10 |  xxxxxxx  |   sa.blmx.cli   |         example.com          | Virtual Guest |
+--------------+-----------+-----------------+------------------------------+---------------+
POD: fcr02a.dal10
+--------------+-----------+--------------+--------------------+---------------+
|     POD      | Server Id |   Hostname   |       Domain       |      Type     |
+--------------+-----------+--------------+--------------------+---------------+
| fcr02a.dal10 |  xxxxxxx  |  jrh-quanta  |      example.com   |    Hardware   |
| fcr02a.dal10 |  xxxxxxx  | msebastian1  |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  |  privdal10   |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  |   pubdal10   |      example.com   | Virtual Guest |
| fcr02a.dal10 |  xxxxxxx  | userdatatest |      example.com   | Virtual Guest |
+--------------+-----------+--------------+--------------------+---------------+
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Listing Virtual Guests</title>
      <link>https://softlayer.github.io/go/listvsis/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/listvsis/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

func main() {

          sess := session.New()
          doListAccountVMsTest(sess)
}

func doListAccountVMsTest(sess *session.Session) {
    // Get the Account service
    service := services.GetAccountService(sess)

    // List VMs
    vms, err := service.Mask(&amp;quot;id;hostname;domain&amp;quot;).Limit(10).GetVirtualGuests()
    if err != nil {
        fmt.Printf(&amp;quot;Error retrieving Virtual Guests from Account: %s\n&amp;quot;, err)
        return
    } else {
        fmt.Println(&amp;quot;VMs under Account:&amp;quot;)
    }

    for _, vm := range vms {
        fmt.Printf(&amp;quot;\t[%d]%s.%s\n&amp;quot;, *vm.Id, *vm.Hostname, *vm.Domain)
    }
}

func handleError(err error) {
    apiErr := err.(sl.Error)
    fmt.Printf(
        &amp;quot;Exception: %s\nMessage: %s\nHTTP Status Code: %d\n&amp;quot;,
        apiErr.Exception,
        apiErr.Message,
        apiErr.StatusCode)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://softlayer.github.io/python/order_quote_advanced/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/order_quote_advanced/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.OrderingManager(self.client)


    def orderQuote(self, quote_id):
        # If you have more than 1 server in the quote, you will need to append
        # 
        guests = {
            &#39;hostname&#39;: &#39;quotetest&#39;, 
            &#39;domain&#39;: &#39;example.com&#39;

        }
        
        quote = self.client[&#39;Billing_Order_Quote&#39;]
        quote_container = quote.getRecalculatedOrderContainer(id=quote_id)
        container = quote_container[&#39;orderContainers&#39;][0]

        container[&#39;quantity&#39;] = 1
        container[&#39;virtualGuests&#39;] = []
        container[&#39;virtualGuests&#39;].append(guests)

        # SoftLayer.exceptions.SoftLayerAPIError: SoftLayerAPIError(SoftLayer_Exception_Order_MismatchedQuantity): The number of servers (2) does not match the order quantity (1).
        # the hardware variable was getting filled out for some reason, even though there were no hardware on this quote.
        container[&#39;hardware&#39;] = None


        container[&#39;presetId&#39;] = None
        container[&#39;provisionScripts&#39;] = [&#39;https://gist.githubusercontent.com/myscript.py&#39;]
        # http://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order
        # The order of containers passed in needs to match the order they are assigned to either hardware or virtualGuests
        container[&#39;sshKeys&#39;] = [{&#39;sshKeyIds&#39;: [1234]} ]

        # Edit this ID to change the location of the order.
        # this is AMS03
        container[&#39;location&#39;] = 814994
        result = self.client[&#39;Product_Order&#39;].verifyOrder(container)
        pp(result)

    def getOrderContainer(self,quote_id):
        quote = self.client[&#39;Billing_Order_Quote&#39;]
        container = quote.getRecalculatedOrderContainer(id=quote_id)
        return container[&#39;orderContainers&#39;][0]


    def listQuotes(self):
        quotes = self.client[&#39;SoftLayer_Account&#39;].getActiveQuotes()
        pp(quotes)

    def listLocations(self):
        locations = self.client[&#39;SoftLayer_Location&#39;].getDatacenters()
        pp(locations)

    def listSshKeys(self):
        keys = self.client[&#39;SoftLayer_Account&#39;].getSshKeys()
        pp(keys)

if __name__ == &amp;quot;__main__&amp;quot;:
    quote_id = 1942633
    main = example()
    # main.main()
    # main.listQuotes()
    # quote = main.getOrderContainer(quote_id)
    # pp(quote)
    # main.listLocations()
    # main.listSshKeys()
    main.orderQuote(quote_id)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get IPMI info for BMS</title>
      <link>https://softlayer.github.io/ruby/get_ipmi/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/get_ipmi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

object_mask = &#39;mask[networkManagementIpAddress,remoteManagementAccounts[username,password],id,fullyQualifiedDomainName]&#39;

item = client[&#39;SoftLayer_Account&#39;]
getIPMI = item.object_mask(object_mask).getHardware

pp getIPMI
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get IPMI info for Bare Metal Server</title>
      <link>https://softlayer.github.io/php/get_ipmi/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/get_ipmi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$server_id = 882187;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, $server_id, $apiUsername, $apiKey);
  $objectMask = new \SoftLayer\Common\ObjectMask();
  $objectMask-&amp;gt;networkManagementIpAddress;
  $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;username;
  $objectMask-&amp;gt;remoteManagementAccounts-&amp;gt;password;
  $objectMask-&amp;gt;id;
  $objectMask-&amp;gt;fullyQualifiedDomainName;
  $client-&amp;gt;setObjectMask($objectMask);
  $response = $client-&amp;gt;getHardware($objectMask);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find out which user placed an order</title>
      <link>https://softlayer.github.io/rest/which_user_placed_order/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/which_user_placed_order/</guid>
      <description>

&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/getOrders&#34;&gt;&lt;code&gt;SoftLayer_Account::getOrders()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Account/getOrders&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Account/getOrders?objectMask=mask\[userRecord\[username\]\]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
        &amp;quot;accountId&amp;quot;: 1234,
        &amp;quot;createDate&amp;quot;: &amp;quot;2014-02-04T11:45:47-06:00&amp;quot;,
        &amp;quot;id&amp;quot;: 99999999,
        &amp;quot;impersonatingUserRecordId&amp;quot;: null,
        &amp;quot;modifyDate&amp;quot;: &amp;quot;2014-02-04T11:45:53-06:00&amp;quot;,
        &amp;quot;orderQuoteId&amp;quot;: null,
        &amp;quot;orderTypeId&amp;quot;: 7,
        &amp;quot;presaleEventId&amp;quot;: null,
        &amp;quot;privateCloudOrderFlag&amp;quot;: false,
        &amp;quot;status&amp;quot;: &amp;quot;APPROVED&amp;quot;,
        &amp;quot;userRecord&amp;quot;: {
            &amp;quot;username&amp;quot;: &amp;quot;SL1234&amp;quot;
        },
        &amp;quot;userRecordId&amp;quot;: 111111
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Billing_Order/getObject&#34;&gt;&lt;code&gt;SoftLayer_Billing_Order::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Billing_Order/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Billing_Order/99999999/getObject?objectMask=mask\[userRecord\[username\]\]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
        &amp;quot;accountId&amp;quot;: 1234,
        &amp;quot;createDate&amp;quot;: &amp;quot;2014-02-04T11:45:47-06:00&amp;quot;,
        &amp;quot;id&amp;quot;: 99999999,
        &amp;quot;impersonatingUserRecordId&amp;quot;: null,
        &amp;quot;modifyDate&amp;quot;: &amp;quot;2014-02-04T11:45:53-06:00&amp;quot;,
        &amp;quot;orderQuoteId&amp;quot;: null,
        &amp;quot;orderTypeId&amp;quot;: 7,
        &amp;quot;presaleEventId&amp;quot;: null,
        &amp;quot;privateCloudOrderFlag&amp;quot;: false,
        &amp;quot;status&amp;quot;: &amp;quot;APPROVED&amp;quot;,
        &amp;quot;userRecord&amp;quot;: {
            &amp;quot;username&amp;quot;: &amp;quot;SL1234&amp;quot;
        },
        &amp;quot;userRecordId&amp;quot;: 111111
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;note:d3bdcdfb07e4d6ee7a9ef4799cffabde&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;specifying &amp;ldquo;userRecord[username]&amp;rdquo; in the objectMask will make the API call ONLY get the username for each order. The userRecord relational property pulls in quite a bit of additional data, so this lets the API skip getting that additional data, and can help speed up the API call. If additional properties are needed, they can be selected from the &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_User_Customer&#34;&gt;SoftLayer_User_Customer&lt;/a&gt; datatype.&lt;/p&gt;

&lt;p&gt;Getting all of the users for all of the orders on accounts with many orders may take a while. If you know the order ID using the above REST call might be helpful&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manage Users</title>
      <link>https://softlayer.github.io/python/manageUsers/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/manageUsers/</guid>
      <description>&lt;p&gt;Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp


def create_user(username, password):
    user_template = {
        &#39;username&#39;: username,
        &#39;firstName&#39;: &#39;API&#39;,
        &#39;lastName&#39;: &#39;Learner&#39;,
        &#39;email&#39;: &#39;someone@somewhere.com&#39;,
        &#39;companyName&#39;: &#39;IBM&#39;,
        &#39;address1&#39;: &#39;123 api road&#39;,
        &#39;city&#39;: &#39;Houston&#39;,
        &#39;country&#39;: &#39;US&#39;,
        &#39;postalCode&#39;: &#39;TX 77002&#39;,
        &#39;userStatusId&#39;: 1001,
        &#39;timezoneId&#39;: 107
    }
    created_user = client[&#39;User_Customer&#39;].createObject(
        user_template,
        password,
        password)
    return created_user

def get_permissions(_id):
    permissions = client[&#39;User_Customer&#39;].getPermissions(id=_id)
    return permissions

def set_permissions(_id, permissions):
    &amp;quot;&amp;quot;&amp;quot;
    To get permissions correct, I take the existing permissions of a user
    that I already have, and set my new user&#39;s permissions to be the same
    with addBulkPortalPermission
    &amp;quot;&amp;quot;&amp;quot;
    return client[&#39;User_Customer&#39;].addBulkPortalPermission(
        permissions, id=_id)

def fix_permissions(user,permissions):
    # I only want users to have access to this one host
    virtualGuestId = 22334455
    t = user[&#39;id&#39;]
    set_permissions(user[&#39;id&#39;], permissions)
    client[&#39;User_Customer&#39;].removeAllVirtualAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].removeAllHardwareAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=t)
    client[&#39;User_Customer&#39;].addVirtualGuestAccess(virtualGuestId,id=t)

def orderUserServer(user, apiKey):
    &amp;quot;&amp;quot;&amp;quot;
    Orders a server as the newly created user. 
    &amp;quot;&amp;quot;&amp;quot;
    hostname = user + &amp;quot;-lab-server&amp;quot;
    guest = {}
    guest[&#39;startCpus&#39;] = 1
    guest[&#39;maxMemory&#39;] = 1024
    guest[&#39;localDiskFlag&#39;] = False
    guest[&#39;hostname&#39;] = hostname
    guest[&#39;domain&#39;] = user + &amp;quot;.lablayer.info&amp;quot;
    guest[&#39;hourlyBillingFlag&#39;] = True
    guest[&#39;datacenter&#39;] = {}
    guest[&#39;datacenter&#39;][&#39;name&#39;] = &#39;tok02&#39;
    guest[&#39;blockDeviceTemplateGroup&#39;] = {&#39;globalIdentifier&#39;: &amp;quot;6c64f59a-edeb-4ba4-b992-d04972597357&amp;quot;}
    userClient = SoftLayer.Client(
        username = user,
        api_key = apiKey )
    result = userClient[&#39;Virtual_Guest&#39;].createObject(guest)
    print &amp;quot;Added server id: %s  ( %s )&amp;quot; % (result[&#39;id&#39;],result[&#39;fullyQualifiedDomainName&#39;]) 
    return
   

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--num-users&#39;, dest=&#39;num_users&#39;, type=int,
                           help=&#39;Number of users to provision.&#39;)
    argsparse.add_argument(&#39;--offset&#39;, dest=&amp;quot;offset&amp;quot;, type=int,
                           default=1, help=&#39;Username offset&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    args = argsparse.parse_args()

    ##### CHANGE THESE ##########
    template_user_id = 123456
    password = &#39;APAsswordGoes!!!H3r3&#39; 

    client = SoftLayer.Client()
    
    userPerms = client[&#39;User_Customer&#39;].getPermissions(id=template_user_id)
   
    start_user_num = args.offset

    for i in range(args.num_users):
        target_username = &#39;%s-%s&#39; % (args.prefix,start_user_num)
        try:
            new_user = create_user(target_username,password)
            fix_permissions(new_user,userPerms)
            client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=new_user[&#39;id&#39;])

        except SoftLayer.exceptions.SoftLayerAPIError as error:
            &amp;quot;&amp;quot;&amp;quot;
            If the user already exists, an exception is thrown. 
            Just reset their permissions and continue on.
            &amp;quot;&amp;quot;&amp;quot;
            oFilter = {}
            oFilter[&#39;users&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;][&#39;operation&#39;] = target_username
            new_user = client[&#39;Account&#39;].getUsers(filter=oFilter)[0]
            fix_permissions(new_user,userPerms)

        newApiKey = client[&#39;User_Customer&#39;].getApiAuthenticationKeys(id=new_user[&#39;id&#39;])
        print &amp;quot;username = %s&amp;quot; % (newApiKey[0][&#39;user&#39;][&#39;username&#39;])
        print &amp;quot;api_key =  %s&amp;quot; % (newApiKey[0][&#39;authenticationKey&#39;])
        orderUserServer(newApiKey[0][&#39;user&#39;][&#39;username&#39;],newApiKey[0][&#39;authenticationKey&#39;])
        start_user_num = start_user_num + 1


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disable user, changes their password, cancels their servers, and removes any sshKeys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp

def get_target_users(prefix):
    _filter = {
        &#39;users&#39;: {
            &#39;username&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }
    _mask = &amp;quot;mask[id,username]&amp;quot;
    _users = client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask)
    return _users

def get_target_keys(prefix):
    _filter = {
        &#39;sshKeys&#39;: {
            &#39;label&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }

    _mask = &amp;quot;mask[id,label]&amp;quot;
    _users = client[&#39;Account&#39;].getSshKeys(filter=_filter, mask=_mask)
    return _users

def print_result(result, thing):
    if result == True:
        print &amp;quot;OK&amp;quot;
    else:
        print &amp;quot;ERROR: &amp;quot;
        pp(thing)
    return

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    argsparse.add_argument(&#39;--password&#39;,
                           help=&#39;New Password&#39;, default=False)
 
    args = argsparse.parse_args()

    client = SoftLayer.Client()
  
    users = get_target_users(args.prefix)

    for user in users:
        password =  args.password
        print &#39;User: &#39; + user[&#39;username&#39;] + &#39; Password: &#39; + password 
        # status 1021 disables the user
        template = {
            &#39;id&#39;: user[&#39;id&#39;],
            &#39;userStatusId&#39;: 1021
        }

        # Cancel any servers the user created
        servers = client[&#39;User_Customer&#39;].getVirtualGuests(id=user[&#39;id&#39;])
        result = True
        for virt in servers: 
            # the &amp;quot;,&amp;quot; and the end of print removes the automatic newline
            print(&amp;quot;\tCanceling host... &amp;quot; + virt[&#39;fullyQualifiedDomainName&#39;] + &amp;quot; (&amp;quot; + str(virt[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
            try:
                result = client[&#39;Virtual_Guest&#39;].deleteObject(id=virt[&#39;id&#39;])
                print_result(result,virt)
            except SoftLayer.exceptions.SoftLayerAPIError as error:
                print(&amp;quot;\tException, host might already be canceling...&amp;quot;)
                pp(error)

        print(&amp;quot;\tChanging password for...&amp;quot; + user[&#39;username&#39;] + &amp;quot; (&amp;quot; + str(user[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;User_Customer&#39;].updatePassword(password, id=user[&#39;id&#39;])
        print_result(result,user)
 
    sshkeys = get_target_keys(args.prefix)
    print &#39;SSH Key Removal&#39;
    for key in sshkeys:
        print(&amp;quot;Deleting key... &amp;quot; + key[&#39;label&#39;] + &amp;quot; (&amp;quot; + str(key[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;SoftLayer_Security_Ssh_Key&#39;].deleteObject(id=key[&#39;id&#39;])
        print_result(result,key)

    print &#39;Complete&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/ticket_filter/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp
import logging

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        theDate = &amp;quot;02/25/2016 01:00:00&amp;quot;
        endDate = &amp;quot;02/29/2016 01:00:00&amp;quot;

        mask = &amp;quot;mask[updates,group[name]]&amp;quot;


        theFilter1 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;betweenDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [theDate]},
                        {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]}
                    ]
                }
            }
        }

        theFilter2 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;greaterThanDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]}
                    ]
                },
                &#39;group&#39; : {
                    &#39;name&#39;: {
                        &#39;operation&#39;: &#39;Cancellations&#39;
                    }
                    
                }
            }
        }

        result = self.client[&#39;SoftLayer_Account&#39;].getTickets(filter=theFilter2, mask=mask)
        for ticket in result:
            print(&amp;quot;===============&amp;quot;)
            print(&amp;quot;%s - %s (%s)&amp;quot; % (ticket[&#39;createDate&#39;], ticket[&#39;title&#39;], ticket[&#39;group&#39;][&#39;name&#39;]))
            for update in ticket[&#39;updates&#39;]:
                print(&amp;quot;===============%s=============== &amp;quot; % (update[&#39;createDate&#39;]))
                print(&amp;quot;%s&amp;quot; % update[&#39;entry&#39;])
                print(&amp;quot;===============&amp;quot;)

        # pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/python/nextinvoice/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/nextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
nextInvoiceAmount = client[&#39;SoftLayer_Account&#39;].getNextInvoiceTotalAmount()
pp(nextInvoiceAmount)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/php/getnextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/getnextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey);

try {
    $nextinvoice = $client-&amp;gt;getNextInvoiceTotalAmount();
    print_r($nextinvoice);
}  catch (\Exception $e) {
    die(&#39;Unable to get next invoice: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/ruby/nextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/nextinvoice/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# SoftLayer library will look to see if these global variables are set when making a connection
# more information here: https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L58

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new

total_amount = client[&#39;Account&#39;].getNextInvoiceTotalAmount
puts &amp;quot;Next invoice total amount: #{total_amount}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:5b3b7b946e37497a1fd07dfb3f249be6&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Next invoice total amount: 250.26
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve the amount of your next invoice</title>
      <link>https://softlayer.github.io/perl/nextbilling/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/perl/nextbilling/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use lib &amp;quot;./softlayer-api-perl-client/&amp;quot;;
use SoftLayer::API::SOAP;
use Data::Dumper;

my $api_username = &amp;quot;x&amp;quot;;
my $api_key = &amp;quot;a&amp;quot;;
my $client = SoftLayer::API::SOAP-&amp;gt;new(&#39;SoftLayer_Account&#39;, undef, $api_username, $api_key);


my $result;
$result = $client-&amp;gt;getNextInvoiceTotalAmount();
print &amp;quot;Next Invoice Total: &amp;quot; . $result-&amp;gt;result . &amp;quot;\$\n&amp;quot; ;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/rest/next_bill/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/next_bill/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/getNextInvoiceTotalAmount&#34;&gt;&lt;code&gt;SoftLayer_Account::getNextInvoiceTotalAmount()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Account/getNextInvoiceTotalAmount&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Account/getNextInvoiceTotalAmount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;250.26
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Edit IP address note</title>
      <link>https://softlayer.github.io/python/edit_ip_note/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/edit_ip_note/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def getSubnets(self):
        subnets = self.client[&#39;SoftLayer_Account&#39;].getSubnets()
        for subnet in subnets:
            print(&amp;quot;%s - %s/%s - %s&amp;quot; % 
                (   subnet[&#39;id&#39;],
                    subnet[&#39;gateway&#39;],
                    subnet[&#39;cidr&#39;],
                    subnet[&#39;networkVlanId&#39;]
                )
            )

    def getIpInSubnet(self, subnet_id):
        mask = &amp;quot;mask[virtualGuest,hardware]&amp;quot;
        subnet = self.client[&#39;SoftLayer_Network_Subnet&#39;]
        ips = subnet.getIpAddresses(id=subnet_id,mask=mask)
        for ip in ips:
            status = &amp;quot;Free&amp;quot;
            if ip[&#39;subnet&#39;][&#39;subnetType&#39;] == &amp;quot;PRIMARY&amp;quot;:
                status = &amp;quot;Reserved&amp;quot;
            elif ip[&#39;isNetwork&#39;]:
                status = &amp;quot;Network Ip&amp;quot;
            elif ip[&#39;isGateway&#39;]:
                status = &amp;quot;Gateway Ip&amp;quot;
            try: 
                status = ip[&#39;virtualGuest&#39;][&#39;fullyQualifiedDomainName&#39;]
            except KeyError:
                pass
            try:
                status = ip[&#39;hardware&#39;][&#39;fullyQualifiedDomainName&#39;]
            except KeyError:
                pass

            try:
                note = ip[&#39;note&#39;]
            except KeyError:
                note = &amp;quot;none&amp;quot;
            print(&amp;quot;%s: %s - %s - %s&amp;quot; % (ip[&#39;id&#39;],ip[&#39;ipAddress&#39;],status, note))

    def editNote(self, ip_id, note):
        &amp;quot;&amp;quot;&amp;quot;
            With editObject on SoftLayer_Network_Subnet_IpAddress you can only 
            edit the note, everything else will get ignored silently.
        &amp;quot;&amp;quot;&amp;quot;
        ip = {
            &#39;id&#39;: ip_id,
            &#39;note&#39;: note,
        }
        self.client[&#39;SoftLayer_Network_Subnet_IpAddress&#39;].editObject(ip,id=ip_id)

if __name__ == &amp;quot;__main__&amp;quot;:
    # CHANGE ME
    subnet_ip = 1234
    # CHANGE ME
    ip_id = 4567
    main = example()
    # List all subnets, find the ID of the one you want to work with
    main.getSubnets()
    # List all the IPs and their notes, find the id of the one you want to edit
    main.getIpInSubnet(subnet_ip)
    # Edit the note
    main.editNote(ip_id,&amp;quot;Hello World22&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Password Auth</title>
      <link>https://softlayer.github.io/ruby/token_auth/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/token_auth/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2

# Create a client
client = SoftLayer::Client.with_password(
    username: &#39;change me&#39;, password: &#39;change me&#39;)

# Test our client
puts client[&#39;Account&#39;].object_mask(&#39;mask[id, apiAuthenticationKeys]&#39;).
    getCurrentUser
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
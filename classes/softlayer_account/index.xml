<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_account on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/classes/softlayer_account/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 26 Feb 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/ticket_filter/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp
import logging

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):

        # logger = logging.getLogger()
        # logger.addHandler(logging.StreamHandler())
        # logger.setLevel(3)
        theDate = &amp;quot;02/25/2016 01:00:00&amp;quot;
        endDate = &amp;quot;02/29/2016 01:00:00&amp;quot;

        mask = &amp;quot;mask[updates,group[name]]&amp;quot;


        theFilter1 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;betweenDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;startDate&#39;, &#39;value&#39;: [theDate]},
                        {&#39;name&#39;: &#39;endDate&#39;, &#39;value&#39;: [endDate]}
                    ]
                }
            }
        }

        theFilter2 = {
            &#39;tickets&#39;: {
                &#39;createDate&#39;: {
                    &#39;operation&#39;: &#39;greaterThanDate&#39;,
                    &#39;options&#39;: [
                        {&#39;name&#39;: &#39;date&#39;, &#39;value&#39;: [theDate]}
                    ]
                },
                &#39;group&#39; : {
                    &#39;name&#39;: {
                        &#39;operation&#39;: &#39;Cancellations&#39;
                    }
                    
                }
            }
        }

        result = self.client[&#39;SoftLayer_Account&#39;].getTickets(filter=theFilter2, mask=mask)
        for ticket in result:
            print(&amp;quot;===============&amp;quot;)
            print(&amp;quot;%s - %s (%s)&amp;quot; % (ticket[&#39;createDate&#39;], ticket[&#39;title&#39;], ticket[&#39;group&#39;][&#39;name&#39;]))
            for update in ticket[&#39;updates&#39;]:
                print(&amp;quot;===============%s=============== &amp;quot; % (update[&#39;createDate&#39;]))
                print(&amp;quot;%s&amp;quot; % update[&#39;entry&#39;])
                print(&amp;quot;===============&amp;quot;)

        # pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/python/nextinvoice/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/nextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()
nextInvoiceAmount = client[&#39;SoftLayer_Account&#39;].getNextInvoiceTotalAmount()
pp(nextInvoiceAmount)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/php/getnextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/getnextinvoice/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = &#39;&#39;;
$apiKey = &#39;&#39;;

$client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUsername, $apiKey);

try {
    $nextinvoice = $client-&amp;gt;getNextInvoiceTotalAmount();
    print_r($nextinvoice);
}  catch (\Exception $e) {
    die(&#39;Unable to get next invoice: &#39; . $e-&amp;gt;getMessage());
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/ruby/nextinvoice/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/nextinvoice/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# SoftLayer library will look to see if these global variables are set when making a connection
# more information here: https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L58

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new

total_amount = client[&#39;Account&#39;].getNextInvoiceTotalAmount
puts &amp;quot;Next invoice total amount: #{total_amount}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-output:5b3b7b946e37497a1fd07dfb3f249be6&#34;&gt;Example Output&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Next invoice total amount: 250.26
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve the amount of your next invoice</title>
      <link>https://softlayer.github.io/perl/nextbilling/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/perl/nextbilling/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use lib &amp;quot;./softlayer-api-perl-client/&amp;quot;;
use SoftLayer::API::SOAP;
use Data::Dumper;

my $api_username = &amp;quot;x&amp;quot;;
my $api_key = &amp;quot;a&amp;quot;;
my $client = SoftLayer::API::SOAP-&amp;gt;new(&#39;SoftLayer_Account&#39;, undef, $api_username, $api_key);


my $result;
$result = $client-&amp;gt;getNextInvoiceTotalAmount();
print &amp;quot;Next Invoice Total: &amp;quot; . $result-&amp;gt;result . &amp;quot;\$\n&amp;quot; ;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining your next bill</title>
      <link>https://softlayer.github.io/rest/next_bill/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/next_bill/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/getNextInvoiceTotalAmount&#34;&gt;&lt;code&gt;SoftLayer_Account::getNextInvoiceTotalAmount()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Account/getNextInvoiceTotalAmount&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Account/getNextInvoiceTotalAmount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;250.26
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Edit IP address note</title>
      <link>https://softlayer.github.io/python/edit_ip_note/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/edit_ip_note/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    def getSubnets(self):
        subnets = self.client[&#39;SoftLayer_Account&#39;].getSubnets()
        for subnet in subnets:
            print(&amp;quot;%s - %s/%s - %s&amp;quot; % 
                (   subnet[&#39;id&#39;],
                    subnet[&#39;gateway&#39;],
                    subnet[&#39;cidr&#39;],
                    subnet[&#39;networkVlanId&#39;]
                )
            )

    def getIpInSubnet(self, subnet_id):
        mask = &amp;quot;mask[virtualGuest,hardware]&amp;quot;
        subnet = self.client[&#39;SoftLayer_Network_Subnet&#39;]
        ips = subnet.getIpAddresses(id=subnet_id,mask=mask)
        for ip in ips:
            status = &amp;quot;Free&amp;quot;
            if ip[&#39;subnet&#39;][&#39;subnetType&#39;] == &amp;quot;PRIMARY&amp;quot;:
                status = &amp;quot;Reserved&amp;quot;
            elif ip[&#39;isNetwork&#39;]:
                status = &amp;quot;Network Ip&amp;quot;
            elif ip[&#39;isGateway&#39;]:
                status = &amp;quot;Gateway Ip&amp;quot;
            try: 
                status = ip[&#39;virtualGuest&#39;][&#39;fullyQualifiedDomainName&#39;]
            except KeyError:
                pass
            try:
                status = ip[&#39;hardware&#39;][&#39;fullyQualifiedDomainName&#39;]
            except KeyError:
                pass

            try:
                note = ip[&#39;note&#39;]
            except KeyError:
                note = &amp;quot;none&amp;quot;
            print(&amp;quot;%s: %s - %s - %s&amp;quot; % (ip[&#39;id&#39;],ip[&#39;ipAddress&#39;],status, note))

    def editNote(self, ip_id, note):
        &amp;quot;&amp;quot;&amp;quot;
            With editObject on SoftLayer_Network_Subnet_IpAddress you can only 
            edit the note, everything else will get ignored silently.
        &amp;quot;&amp;quot;&amp;quot;
        ip = {
            &#39;id&#39;: ip_id,
            &#39;note&#39;: note,
        }
        self.client[&#39;SoftLayer_Network_Subnet_IpAddress&#39;].editObject(ip,id=ip_id)

if __name__ == &amp;quot;__main__&amp;quot;:
    # CHANGE ME
    subnet_ip = 1234
    # CHANGE ME
    ip_id = 4567
    main = example()
    # List all subnets, find the ID of the one you want to work with
    main.getSubnets()
    # List all the IPs and their notes, find the id of the one you want to edit
    main.getIpInSubnet(subnet_ip)
    # Edit the note
    main.editNote(ip_id,&amp;quot;Hello World22&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Password Auth</title>
      <link>https://softlayer.github.io/ruby/token_auth/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/token_auth/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39; # Requires softlayer_api &amp;gt;= 3.2

# Create a client
client = SoftLayer::Client.with_password(
    username: &#39;change me&#39;, password: &#39;change me&#39;)

# Test our client
puts client[&#39;Account&#39;].object_mask(&#39;mask[id, apiAuthenticationKeys]&#39;).
    getCurrentUser
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find active VMs of specified creator</title>
      <link>https://softlayer.github.io/ruby/find_my_vms/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/find_my_vms/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Code example of how to list virtual instances from a SoftLayer account.
# You can call the script from the command and provide the username you
# want to filter on. The script expects that you have the SoftLayer gem
# installed and have it configured with the credentials you&#39;d like
# to use with SoftLayer.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44.
#
# You can run the script with the username you&#39;d like to check under
# the account you have configured:
# find_my_active_vms userid
#
# The output of the script is in a csv format with commas as the
# column separator.
require &#39;softlayer_api&#39;
require &#39;vine&#39;
require &#39;csv&#39;

client = SoftLayer::Client.new
account_service = client[&#39;Account&#39;]
object_mask = &#39;mask[id,fullyQualifiedDomainName,primaryIpAddress,createDate,billingItem[orderItem[description,order[userRecord[username],id]]]]&#39;

USER_ID = ARGV[0] || client.username

vms = account_service.object_mask(object_mask).getVirtualGuests

csv_string = CSV.generate do |csv|
  csv &amp;lt;&amp;lt; [&#39;VM ID&#39;, &#39;Host&#39;, &#39;Public IP&#39;, &#39;Create Date&#39;] # table headers
  vms.each do |vm|
    creator = vm.access(&#39;billingItem.orderItem.order.userRecord.username&#39;)
    next unless creator == USER_ID
    csv &amp;lt;&amp;lt; [vm[&#39;id&#39;], vm[&#39;fullyQualifiedDomainName&#39;], vm[&#39;primaryIpAddress&#39;], vm[&#39;createDate&#39;]]
  end
end

puts csv_string
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determining SoftLayer Device Owners</title>
      <link>https://softlayer.github.io/ruby/determining_device_owners/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/determining_device_owners/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;vine&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new

billing = client[&#39;Account&#39;]

object_mask = &#39;mask[fullyQualifiedDomainName,billingItem[categoryCode,description,createDate,orderItem[order[userRecord[username]]]]]&#39;

hardware_list = billing.object_mask(object_mask).getHardware
virtual_guest_list = billing.object_mask(object_mask).getVirtualGuests

def describe(item)
  domain_name = item.access(&#39;fullyQualifiedDomainName&#39;) || &#39;no fullyQualifiedDomainName&#39;
  category_code = item.access(&#39;billingItem.categoryCode&#39;) || &#39;no categoryCode&#39;
  description = item.access(&#39;billingItem.description&#39;) || &#39;no description&#39;
  create_date = item.access(&#39;billingItem.createDate&#39;) || &#39;no createDate&#39;
  user_name = item.access(&#39;billingItem.orderItem.order.userRecord.username&#39;) || &#39;no username&#39;

  return &amp;quot;&#39;#{domain_name}&#39;, category code: &#39;#{category_code}&#39;, &amp;quot;\
         &amp;quot;description: &#39;#{description}&#39;, was created by: &#39;#{user_name}&#39; &amp;quot;\
         &amp;quot;on &#39;#{create_date}&#39;&amp;quot;
end

for item in hardware_list do
  puts &amp;quot;Hardware &amp;quot; + describe(item)
end

for item in virtual_guest_list do
  puts &amp;quot;Virtual Guest &amp;quot; + describe(item)
end

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Hardware hostnames</title>
      <link>https://softlayer.github.io/rest/get_hardware_hostname/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/get_hardware_hostname/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/getObject&#34;&gt;&lt;code&gt;SoftLayer_Account::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Account/getObject?objectMask=mask[companyName,hardware[hostname]]&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -u username:api_key &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Account/getObject?objectMask=mask[companyName,hardware[hostname]]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;companyName&amp;quot;: &amp;quot;SoftLayer Internal - Development Community&amp;quot;,
    &amp;quot;hardware&amp;quot;: [
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;bsdal5167180245106688&amp;quot;
        },
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;db-server&amp;quot;
        },
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;db-server&amp;quot;
        },
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;deleteme&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get hostnames</title>
      <link>https://softlayer.github.io/rest/get_hostnames/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/get_hostnames/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/getObject&#34;&gt;&lt;code&gt;SoftLayer_Account::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Account/getObject?objectMask=mask[hardware.hostname,hourlyVirtualGuests[hostname,domain]]&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -u username:api_key &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Account/getObject?objectMask=mask[hardware.hostname,hourlyVirtualGuests[hostname,domain]]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;accountManagedResourcesFlag&amp;quot;: false,
    &amp;quot;accountStatusId&amp;quot;: 1001,
    &amp;quot;address1&amp;quot;: &amp;quot;4849 Alpha Rd&amp;quot;,
    &amp;quot;allowedPptpVpnQuantity&amp;quot;: 1,
    &amp;quot;brandId&amp;quot;: 2,
    &amp;quot;city&amp;quot;: &amp;quot;Dallas&amp;quot;,
    &amp;quot;claimedTaxExemptTxFlag&amp;quot;: false,
    &amp;quot;companyName&amp;quot;: &amp;quot;SoftLayer Internal - Development Community&amp;quot;,
    &amp;quot;country&amp;quot;: &amp;quot;US&amp;quot;,
    &amp;quot;createDate&amp;quot;: &amp;quot;2014-02-04T10:33:56-06:00&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;asd@softlayer.com&amp;quot;,
    &amp;quot;firstName&amp;quot;: &amp;quot;Phil&amp;quot;,
    &amp;quot;hardware&amp;quot;: [
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;bsdal5167180245106688&amp;quot;
        },
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;db-server&amp;quot;
        },
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;db-server&amp;quot;
        },
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;deleteme&amp;quot;
        },
        {
            &amp;quot;hostname&amp;quot;: &amp;quot;pjacksontestorder&amp;quot;
        }
    ],
    &amp;quot;hourlyVirtualGuests&amp;quot;: [
        {
            &amp;quot;domain&amp;quot;: &amp;quot;lablayer.info&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;api-lab&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;sec.ibm.com&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;dal09-tst-eos-01a&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;example.com&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;host1&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;test.com&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;hostnametest-44ea&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;test.com&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;hostnametest-6f6a&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;test.com&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;hostnametest-709f&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;test.com&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;hostnametest-7c92&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;oeg.dal.slcommunity.org&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;oeg-es1&amp;quot;
        },
        {
            &amp;quot;domain&amp;quot;: &amp;quot;oeg.dal.slcommunity.org&amp;quot;,
            &amp;quot;hostname&amp;quot;: &amp;quot;oeg-es2&amp;quot;
        }
    ],
    &amp;quot;id&amp;quot;: 307608,
    &amp;quot;isReseller&amp;quot;: 0,
    &amp;quot;lastName&amp;quot;: &amp;quot;Asd&amp;quot;,
    &amp;quot;lateFeeProtectionFlag&amp;quot;: true,
    &amp;quot;modifyDate&amp;quot;: &amp;quot;2014-02-04T10:34:18-06:00&amp;quot;,
    &amp;quot;officePhone&amp;quot;: &amp;quot;281.714.1234&amp;quot;,
    &amp;quot;postalCode&amp;quot;: &amp;quot;75244-4608&amp;quot;,
    &amp;quot;state&amp;quot;: &amp;quot;TX&amp;quot;,
    &amp;quot;statusDate&amp;quot;: null
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GetHardware with network components</title>
      <link>https://softlayer.github.io/rest/get_hardware_components/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/get_hardware_components/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Account/getHardware&#34;&gt;&lt;code&gt;SoftLayer_Account::getHardware()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;SoftLayer_Account/getHardware&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parameters &lt;code&gt;objectMask=mask[id,fullyQualifiedDomainName,networkComponents[name,networkHardware[hostname],uplinkComponent[name,status]]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -u username:api_key -G --data &amp;quot;objectMask=mask[id,fullyQualifiedDomainName,networkComponents[name,networkHardware[hostname],uplinkComponent[name,status]]]&amp;quot;  &amp;quot;https://api.softlayer.com/rest/v3/SoftLayer_Account/getHardware&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;fullyQualifiedDomainName&amp;quot;: &amp;quot;bsdal5167180245106688.bsd.citrix.dc&amp;quot;,
        &amp;quot;id&amp;quot;: 115628,
        &amp;quot;networkComponents&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;mgmt&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bms173.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03b.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03a.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08a.sr03.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;Ethernet1&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03b.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03a.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet1/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcs173a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fas08a.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03a.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03b.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet1/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcs173b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bas08b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03b.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;bcr03a.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet2/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;DISABLED&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;eth&amp;quot;,
                &amp;quot;networkHardware&amp;quot;: [
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcs173b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fas08b.sr03.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03a.dal05&amp;quot;
                    },
                    {
                        &amp;quot;hostname&amp;quot;: &amp;quot;fcr03b.dal05&amp;quot;
                    }
                ],
                &amp;quot;uplinkComponent&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;GigabitEthernet2/0&amp;quot;,
                    &amp;quot;status&amp;quot;: &amp;quot;DISABLED&amp;quot;
                }
            }
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://softlayer.github.io/php/ticket_filter/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/ticket_filter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

require_once &#39;./SoftLayer/SoapClient.class.php&#39;;
$apiUser = &#39;&#39;;
$key = &#39;&#39;;

$startDate = new DateTime(&#39;2015-05-28T10:05:25-06:00&#39;);

$ticketClient = SoftLayer_SoapClient::getClient(&#39;SoftLayer_Account&#39;, null, $apiUser, $key);
$filter = new stdClass();
$filter-&amp;gt;tickets = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;operation = &#39;greaterThanDate&#39;;
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options = array();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0] = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &#39;date&#39;;
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&#39;m/d/Y H:i:s&#39;));
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType = new stdClass();
$filter-&amp;gt;tickets-&amp;gt;updates-&amp;gt;editorType-&amp;gt;operation = &#39;EMPLOYEE&#39;;

$mask = new SoftLayer_ObjectMask();
$mask-&amp;gt;tickets-&amp;gt;updates;

$ticketClient-&amp;gt;setObjectMask($mask);
$ticketClient-&amp;gt;setObjectFilter($filter);
$updates = $ticketClient-&amp;gt;getTickets();

print_r($updates);

//prints out some SOAP debugging
print_r($ticketClient-&amp;gt;__getLastRequest());
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find active VMs by creator</title>
      <link>https://softlayer.github.io/python/find_my_vms/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/find_my_vms/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;&#39;&#39;
Code example of how to list virtual instances from a SoftLayer account
You can call the script from the command and provide the user ID you
want to check. The script expects that you have the SoftLayer CLI
installed and have it configured with the credentials you&#39;d like
to use with SoftLayer.

You can run the script with the user ID you&#39;d like to check under
the account you have configured:
find_my_active_vms userid

The output of the script is in a csv format with tabs as the
column separator.
&#39;&#39;&#39;
from __future__ import print_function
import sys
import SoftLayer


def list_my_vms(creator_id=None):
    &amp;quot;&amp;quot;&amp;quot;
    Get the list of active VMs based on the creator ID

    Keyword arguments:
    creator_id -- the SoftLayer ID of the VM&#39;s creator (default: None)
    &amp;quot;&amp;quot;&amp;quot;

    # create a client to the SoftLayer_Account API service.
    client = SoftLayer.Client()

    # number of results that we expect at a time
    chunk = 200
    mask = &amp;quot;id,fullyQualifiedDomainName,primaryIpAddress,createDate,billingItem[orderItem[description, order[userRecord[username], id]]]&amp;quot;

    # get the data from the SoftLayer APIs
    vms = client.iter_call(&amp;quot;Account&amp;quot;, &amp;quot;getVirtualGuests&amp;quot;, chunk=chunk, mask=mask)
    if creator_id is None:
        # if the creator wasn&#39;t provided use the
        # user provided to the API call as the creator
        creator_id = client.auth.username

    # add table header
    print(&#39;VM ID&#39;, &#39;\t&#39;, &#39;Host&#39;, &#39;\t&#39;, &#39;Public IP&#39;, &#39;\t&#39;, &#39;Create Date&#39;)
    for vsi in vms:
        # navigate to the creator property under the VMs billing item
        if &#39;billingItem&#39; in vsi.keys():
            billing_item = vsi[&#39;billingItem&#39;]
            if &#39;orderItem&#39; in billing_item.keys():
                vm_creator_userid = billing_item[&#39;orderItem&#39;][&#39;order&#39;][&#39;userRecord&#39;][&#39;username&#39;]
                if creator_id == vm_creator_userid:
                    print(str(vsi[&#39;id&#39;]), &#39;\t&#39;,
                          vsi[&#39;fullyQualifiedDomainName&#39;], &#39;\t&#39;,
                          vsi.get(&#39;primaryIpAddress&#39;, &#39;N/A&#39;), &#39;\t&#39;, vsi[&#39;createDate&#39;])

if __name__ == &#39;__main__&#39;:
    if len(sys.argv) == 1:
        list_my_vms()
    else:
        list_my_vms(sys.argv[1])

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
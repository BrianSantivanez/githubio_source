<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_user_customer on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/classes/softlayer_user_customer/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 09 Jun 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Get bills by user</title>
      <link>https://softlayer.github.io/python/billsbyuser/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/billsbyuser/</guid>
      <description>&lt;p&gt;This is a rough script, it doesn&amp;rsquo;t include some of the tax fees and some of the other one off fee fields that you will find in &lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item&#34;&gt;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example Output for billsByUser()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chris-cde - 840.0
    123.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $345.0
    234.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $495.0
    chris.testing.com : 2 x 2.0 GHz Cores $0.0
    4 Portable Private IP Addresses - $0.0
    8 Portable Private IP Addresses - $0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Output of upcoming_hourly()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ItemID  Info    Host    Domain  Hours   Hourly Cost Cost
143131173   Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) jd-cos-testing-sjc03    secore.com  489 .309    151.101
==&amp;gt; 143131179   64 GB RAM   291.933
==&amp;gt; 143131183   1.00 TB SATA    17.604
==&amp;gt; 143131185   1.00 TB SATA    17.604
==&amp;gt; 143131189   10 Gbps Dual Public &amp;amp; Private Network Uplinks (Unbonded)    147.189
TOTAL: 625.431
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Christopher Gallo
Goes through the next invoice. Collections billing items by the user that orderd them.
Prints out each user and how much they caused in billing, along with what they ordered.
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

class bills():

    def __init__(self):

        self.client = SoftLayer.Client()
        self.mgr = SoftLayer.VSManager(self.client)

    def billsByUser(self):

        &amp;quot;&amp;quot;&amp;quot;
        Not all billing items have a user record, these are collected under the master account
        http://sldn.softlayer.com/reference/services/SoftLayer_Account/getNextInvoiceTopLevelBillingItems returns
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item -&amp;gt; taps orderItem for
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Order_Item -&amp;gt; taps order for 
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Order -&amp;gt; taps userRecord for
        http://sldn.softlayer.com/reference/datatypes/SoftLayer_User_Customer
        &amp;quot;&amp;quot;&amp;quot;
        mask=&amp;quot;mask[orderItem[order[id,userRecord[displayName,username]]]]&amp;quot;
        billingItems = self.client[&#39;SoftLayer_Account&#39;].getNextInvoiceTopLevelBillingItems(mask=mask)

        users = {&#39;masterUser&#39;: []}
        for item in billingItems:
            if &#39;orderItem&#39; in item:
                username = item[&#39;orderItem&#39;][&#39;order&#39;][&#39;userRecord&#39;][&#39;username&#39;]
                del item[&#39;orderItem&#39;]
                if username not in users:
                    users[username] = []
                users[username].append(item)
            else:
                users[&#39;masterUser&#39;].append(item)


        # prints everything out, and finds the sum of items.
        for user in users:
            servers = []
            everything_else = []
            total_cost = 0

            for item in users[user]:

                # this doens&#39;t include Tax fees, or setup fees because I&#39;m lazy
                cost = float(item[&#39;recurringFee&#39;]) + float(item[&#39;oneTimeFee&#39;])
                if &#39;hostName&#39; in item:
                    fqdn = &amp;quot;%s.%s : %s $%s&amp;quot; % (item[&#39;hostName&#39;], item[&#39;domainName&#39;], item[&#39;description&#39;], cost)
                    servers.append(fqdn)
                else:
                    item = &amp;quot;%s - $%s&amp;quot; % (item[&#39;description&#39;], cost)
                    everything_else.append(item)
                total_cost = total_cost + cost
            print(&amp;quot;%s - %s&amp;quot; % (user , total_cost))
            for server in servers:
                print(&amp;quot;\t%s&amp;quot; % server)
            for thing in everything_else:
                print(&amp;quot;\t%s&amp;quot; % thing)


    def upcoming_hourly(self):
    &amp;quot;&amp;quot;&amp;quot;
    Filters upcoming billing items for only hourly WITH a hostname that contains the string &#39;test&#39;
    Each hourly server will also have some children that need to be added for the total cost, those are included with the nonZeroNextInvoiceChildren property
    NOTE: 
    ObjectMask starts at http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_item
    ObjectFilter starts at http://sldn.softlayer.com/reference/datatypes/SoftLayer_Account
    hourlyFlag needs to be 1 or 0.

    &amp;quot;&amp;quot;&amp;quot;
        mask=&amp;quot;mask[hourlyFlag,nonZeroNextInvoiceChildren]&amp;quot;
        objectFilter =  {
            &#39;nextInvoiceTopLevelBillingItems&#39;: {
                &#39;hourlyFlag&#39;: {&#39;operation&#39;: 1},
                &#39;hostName&#39;: {&#39;operation&#39;: &#39;*= test&#39;}
            }
        }
        billingItems = self.client[&#39;SoftLayer_Account&#39;].getNextInvoiceTopLevelBillingItems(mask=mask, filter=objectFilter)
        print(&amp;quot;ItemID\tInfo\tHost\tDomain\tHours\tHourly Cost\tCost&amp;quot;)
        for item in billingItems:
            itemId = item[&#39;id&#39;]
            hostName = item[&#39;hostName&#39;]
            domainName = item[&#39;domainName&#39;]
            description = item[&#39;description&#39;]
            hours = item[&#39;hoursUsed&#39;]
            hourly_cost = item[&#39;hourlyRecurringFee&#39;]
            cost = int(hours) * float(hourly_cost)
            total_cost = cost
            print(&amp;quot;%s\t%s\t%s\t%s\t%s\t%s\t%s&amp;quot; % (itemId, description, hostName,domainName, hours, hourly_cost, cost ))
            for child in item[&#39;nonZeroNextInvoiceChildren&#39;]:
                childId = child[&#39;id&#39;]
                childDesc = child[&#39;description&#39;]
                childCost = int(child[&#39;hoursUsed&#39;]) * float(child[&#39;hourlyRecurringFee&#39;])
                total_cost = total_cost + childCost
                print(&amp;quot;==&amp;gt; %s\t%s\t%s&amp;quot; % (childId,childDesc,childCost))
            print(&amp;quot;TOTAL: %s&amp;quot; % (total_cost))


if __name__ == &amp;quot;__main__&amp;quot;:
    main = bills()
    main.billsByUser()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Use IBMid to get SL api key</title>
      <link>https://softlayer.github.io/rest/ibmidtoslkey/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/ibmidtoslkey/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#!/bin/bash
# Parameters: &amp;lt;IBMid username&amp;gt; &amp;lt;IBMid password&amp;gt; &amp;lt;SL Account number (optional)&amp;gt;
# Requires: curl, jq and xmllint installed
creds=$(curl -s -u &#39;bx:bx&#39; -k -X POST --header &#39;Content-Type: application/x-www-form-urlencoded&#39; --header &#39;Accept: application/json&#39; -d &amp;quot;grant_type=password&amp;amp;response_type=cloud_iam,ims_portal&amp;amp;username=${1}&amp;amp;password=${2}&amp;amp;ims_account=${3}&amp;quot; https://iam.ng.bluemix.net/oidc/token)

ims_token=$(echo $creds | jq -r &#39;.ims_token&#39;)
ims_user_id=$(echo $creds | jq -r &#39;.ims_user_id&#39;)
echo $creds &amp;gt; creds.json

# Get api key over xmlrpc
curl -s -X POST -d &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;
&amp;lt;methodCall&amp;gt;
  &amp;lt;methodName&amp;gt;getObject&amp;lt;/methodName&amp;gt;
  &amp;lt;params&amp;gt;
    &amp;lt;param&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;struct&amp;gt;
          &amp;lt;member&amp;gt;
            &amp;lt;name&amp;gt;headers&amp;lt;/name&amp;gt;
            &amp;lt;value&amp;gt;
              &amp;lt;struct&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;authenticate&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;userId&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;int&amp;gt;$ims_user_id&amp;lt;/int&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;complexType&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;PortalLoginToken&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;authToken&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;$ims_token&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;SoftLayer_User_CustomerInitParameters&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;id&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;int&amp;gt;$ims_user_id&amp;lt;/int&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
                &amp;lt;member&amp;gt;
                  &amp;lt;name&amp;gt;SoftLayer_ObjectMask&amp;lt;/name&amp;gt;
                  &amp;lt;value&amp;gt;
                    &amp;lt;struct&amp;gt;
                      &amp;lt;member&amp;gt;
                        &amp;lt;name&amp;gt;mask&amp;lt;/name&amp;gt;
                        &amp;lt;value&amp;gt;
                          &amp;lt;string&amp;gt;mask[username;apiAuthenticationKeys.authenticationKey]&amp;lt;/string&amp;gt;
                        &amp;lt;/value&amp;gt;
                      &amp;lt;/member&amp;gt;
                    &amp;lt;/struct&amp;gt;
                  &amp;lt;/value&amp;gt;
                &amp;lt;/member&amp;gt;
              &amp;lt;/struct&amp;gt;
            &amp;lt;/value&amp;gt;
          &amp;lt;/member&amp;gt;
        &amp;lt;/struct&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/param&amp;gt;
  &amp;lt;/params&amp;gt;
&amp;lt;/methodCall&amp;gt;&amp;quot; https://api.softlayer.com/xmlrpc/v3/SoftLayer_User_Customer &amp;gt; response.xml
export SL_USERNAME=$(cat response.xml | xmllint --xpath &#39;(//params/param/value/struct/member/value/string/text())[1]&#39; -)
export SL_API_KEY=$(cat response.xml | xmllint --xpath &#39;(//params/param/value/struct/member/value/array/data/value/struct/member/value/string/text())[1]&#39; -)

echo &amp;quot;SL_USERNAME: $SL_USERNAME&amp;quot;
echo &amp;quot;SL_API_KEY: $SL_API_KEY&amp;quot;

rm -f creds.json response.xml # comment out to debug
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Manage Users</title>
      <link>https://softlayer.github.io/python/manageusers/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/manageusers/</guid>
      <description>&lt;p&gt;Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp


def create_user(username, password):
    user_template = {
        &#39;username&#39;: username,
        &#39;firstName&#39;: &#39;API&#39;,
        &#39;lastName&#39;: &#39;Learner&#39;,
        &#39;email&#39;: &#39;someone@somewhere.com&#39;,
        &#39;companyName&#39;: &#39;IBM&#39;,
        &#39;address1&#39;: &#39;123 api road&#39;,
        &#39;city&#39;: &#39;Houston&#39;,
        &#39;country&#39;: &#39;US&#39;,
        &#39;postalCode&#39;: &#39;TX 77002&#39;,
        &#39;userStatusId&#39;: 1001,
        &#39;timezoneId&#39;: 107
    }
    created_user = client[&#39;User_Customer&#39;].createObject(
        user_template,
        password,
        password)
    return created_user

def get_permissions(_id):
    permissions = client[&#39;User_Customer&#39;].getPermissions(id=_id)
    return permissions

def set_permissions(_id, permissions):
    &amp;quot;&amp;quot;&amp;quot;
    To get permissions correct, I take the existing permissions of a user
    that I already have, and set my new user&#39;s permissions to be the same
    with addBulkPortalPermission
    &amp;quot;&amp;quot;&amp;quot;
    return client[&#39;User_Customer&#39;].addBulkPortalPermission(
        permissions, id=_id)

def fix_permissions(user,permissions):
    # I only want users to have access to this one host
    virtualGuestId = 22334455
    t = user[&#39;id&#39;]
    set_permissions(user[&#39;id&#39;], permissions)
    client[&#39;User_Customer&#39;].removeAllVirtualAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].removeAllHardwareAccessForThisUser(id=t)
    client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=t)
    client[&#39;User_Customer&#39;].addVirtualGuestAccess(virtualGuestId,id=t)

def orderUserServer(user, apiKey):
    &amp;quot;&amp;quot;&amp;quot;
    Orders a server as the newly created user. 
    &amp;quot;&amp;quot;&amp;quot;
    hostname = user + &amp;quot;-lab-server&amp;quot;
    guest = {}
    guest[&#39;startCpus&#39;] = 1
    guest[&#39;maxMemory&#39;] = 1024
    guest[&#39;localDiskFlag&#39;] = False
    guest[&#39;hostname&#39;] = hostname
    guest[&#39;domain&#39;] = user + &amp;quot;.lablayer.info&amp;quot;
    guest[&#39;hourlyBillingFlag&#39;] = True
    guest[&#39;datacenter&#39;] = {}
    guest[&#39;datacenter&#39;][&#39;name&#39;] = &#39;tok02&#39;
    guest[&#39;blockDeviceTemplateGroup&#39;] = {&#39;globalIdentifier&#39;: &amp;quot;6c64f59a-edeb-4ba4-b992-d04972597357&amp;quot;}
    userClient = SoftLayer.Client(
        username = user,
        api_key = apiKey )
    result = userClient[&#39;Virtual_Guest&#39;].createObject(guest)
    print &amp;quot;Added server id: %s  ( %s )&amp;quot; % (result[&#39;id&#39;],result[&#39;fullyQualifiedDomainName&#39;]) 
    return
   

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--num-users&#39;, dest=&#39;num_users&#39;, type=int,
                           help=&#39;Number of users to provision.&#39;)
    argsparse.add_argument(&#39;--offset&#39;, dest=&amp;quot;offset&amp;quot;, type=int,
                           default=1, help=&#39;Username offset&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    args = argsparse.parse_args()

    ##### CHANGE THESE ##########
    template_user_id = 123456
    password = &#39;APAsswordGoes!!!H3r3&#39; 

    client = SoftLayer.Client()
    
    userPerms = client[&#39;User_Customer&#39;].getPermissions(id=template_user_id)
   
    start_user_num = args.offset

    for i in range(args.num_users):
        target_username = &#39;%s-%s&#39; % (args.prefix,start_user_num)
        try:
            new_user = create_user(target_username,password)
            fix_permissions(new_user,userPerms)
            client[&#39;User_Customer&#39;].addApiAuthenticationKey(id=new_user[&#39;id&#39;])

        except SoftLayer.exceptions.SoftLayerAPIError as error:
            &amp;quot;&amp;quot;&amp;quot;
            If the user already exists, an exception is thrown. 
            Just reset their permissions and continue on.
            &amp;quot;&amp;quot;&amp;quot;
            oFilter = {}
            oFilter[&#39;users&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;] = {}
            oFilter[&#39;users&#39;][&#39;username&#39;][&#39;operation&#39;] = target_username
            new_user = client[&#39;Account&#39;].getUsers(filter=oFilter)[0]
            fix_permissions(new_user,userPerms)

        newApiKey = client[&#39;User_Customer&#39;].getApiAuthenticationKeys(id=new_user[&#39;id&#39;])
        print &amp;quot;username = %s&amp;quot; % (newApiKey[0][&#39;user&#39;][&#39;username&#39;])
        print &amp;quot;api_key =  %s&amp;quot; % (newApiKey[0][&#39;authenticationKey&#39;])
        orderUserServer(newApiKey[0][&#39;user&#39;][&#39;username&#39;],newApiKey[0][&#39;authenticationKey&#39;])
        start_user_num = start_user_num + 1


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disable user, changes their password, cancels their servers, and removes any sshKeys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import SoftLayer.API
from pprint import pprint as pp

def get_target_users(prefix):
    _filter = {
        &#39;users&#39;: {
            &#39;username&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }
    _mask = &amp;quot;mask[id,username]&amp;quot;
    _users = client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask)
    return _users

def get_target_keys(prefix):
    _filter = {
        &#39;sshKeys&#39;: {
            &#39;label&#39;: {
                &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
            }
        }
    }

    _mask = &amp;quot;mask[id,label]&amp;quot;
    _users = client[&#39;Account&#39;].getSshKeys(filter=_filter, mask=_mask)
    return _users

def print_result(result, thing):
    if result == True:
        print &amp;quot;OK&amp;quot;
    else:
        print &amp;quot;ERROR: &amp;quot;
        pp(thing)
    return

if __name__ == &amp;quot;__main__&amp;quot;:
    import argparse
    argsparse = argparse.ArgumentParser(description=&#39;Number of users&#39;)
    argsparse.add_argument(&#39;--prefix&#39;,
                           help=&#39;Username prefix&#39;, default=False)
    argsparse.add_argument(&#39;--password&#39;,
                           help=&#39;New Password&#39;, default=False)
 
    args = argsparse.parse_args()

    client = SoftLayer.Client()
  
    users = get_target_users(args.prefix)

    for user in users:
        password =  args.password
        print &#39;User: &#39; + user[&#39;username&#39;] + &#39; Password: &#39; + password 
        # status 1021 disables the user
        template = {
            &#39;id&#39;: user[&#39;id&#39;],
            &#39;userStatusId&#39;: 1021
        }

        # Cancel any servers the user created
        servers = client[&#39;User_Customer&#39;].getVirtualGuests(id=user[&#39;id&#39;])
        result = True
        for virt in servers: 
            # the &amp;quot;,&amp;quot; and the end of print removes the automatic newline
            print(&amp;quot;\tCanceling host... &amp;quot; + virt[&#39;fullyQualifiedDomainName&#39;] + &amp;quot; (&amp;quot; + str(virt[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
            try:
                result = client[&#39;Virtual_Guest&#39;].deleteObject(id=virt[&#39;id&#39;])
                print_result(result,virt)
            except SoftLayer.exceptions.SoftLayerAPIError as error:
                print(&amp;quot;\tException, host might already be canceling...&amp;quot;)
                pp(error)

        print(&amp;quot;\tChanging password for...&amp;quot; + user[&#39;username&#39;] + &amp;quot; (&amp;quot; + str(user[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;User_Customer&#39;].updatePassword(password, id=user[&#39;id&#39;])
        print_result(result,user)
 
    sshkeys = get_target_keys(args.prefix)
    print &#39;SSH Key Removal&#39;
    for key in sshkeys:
        print(&amp;quot;Deleting key... &amp;quot; + key[&#39;label&#39;] + &amp;quot; (&amp;quot; + str(key[&#39;id&#39;]) + &amp;quot;)\t&amp;quot;),
        result = client[&#39;SoftLayer_Security_Ssh_Key&#39;].deleteObject(id=key[&#39;id&#39;])
        print_result(result,key)

    print &#39;Complete&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set user permissions</title>
      <link>https://softlayer.github.io/ruby/set_permission/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/set_permission/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the SoftLayer API are grabbed from the config file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new
user_service = client[&#39;User_Customer&#39;]

# List the user permissions
USER_ID = 172536 # Change me. User id of user to inspect.
pp user_service.object_with_id(USER_ID).getPermissions

# add permission
new_permission = { keyName: &#39;TICKET_ADD&#39; }
result = user_service.object_with_id(USER_ID).addPortalPermission(new_permission)
unless result
  puts &#39;Failed to add permission&#39;
  exit 1
end

# list user permissions again
pp user_service.object_with_id(USER_ID).getPermissions
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set user permissions</title>
      <link>https://softlayer.github.io/python/set_permission/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/set_permission/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp

class setPermissions():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self, user_id):
        permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id)
        print(&amp;quot;=== OLD PERMISSIONS ===&amp;quot;)
        self.printPermissions(permissions)
        setperm = {&#39;keyName&#39;: &amp;quot;TICKET_ADD&amp;quot;}
        self.client[&#39;User_Customer&#39;].addPortalPermission(setperm, id=user_id)
        permissions = self.client[&#39;User_Customer&#39;].getPermissions(id=user_id)
        print(&amp;quot;=== NEW PERMISSIONS ===&amp;quot;)
        self.printPermissions(permissions)

    def getUsers(self):
        users = self.client[&#39;Account&#39;].getUsers()
        print(&amp;quot;ID - USERNAME - E-MAIL&amp;quot;)
        for user in users:
            print(&amp;quot;%s - %s - %s &amp;quot; % (user[&#39;id&#39;], user[&#39;username&#39;], user[&#39;email&#39;]))

    def printPermissions(sefl, permissions):
        for permission in permissions:
            print(&amp;quot;%s&amp;quot; % permission[&#39;keyName&#39;])

if __name__ == &amp;quot;__main__&amp;quot;:
    main = setPermissions()
    # CHANGE ME
    my_user = 439723
    main.getUsers()
    main.main(my_user)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Change Passwords</title>
      <link>https://softlayer.github.io/python/change_multi_pass/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/change_multi_pass/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint

class example():

    def __init__(self):

        self.client = SoftLayer.Client()
        self.prefix = &amp;quot;PREFIX&amp;quot;
        self.password= &amp;quot;qweASDzxc!23&amp;quot;

    def main(self):
        pp = pprint.PrettyPrinter(indent=4)
        users = self.get_target_users(prefix=self.prefix)
        for user in users:
            print &amp;quot;Changing password for: &amp;quot; + str(user[&#39;id&#39;]) + &amp;quot; &amp;quot; + user[&#39;username&#39;]
            result = self.client[&#39;User_Customer&#39;].updatePassword(self.password, id=user[&#39;id&#39;])
        # pp.pprint(result)

    def get_target_users(self, prefix):
        _filter = {
            &#39;users&#39;: {
                &#39;username&#39;: {
                    &#39;operation&#39;: &#39;*= %s&#39; % (prefix)
                }
            }
        }

        _mask = &amp;quot;mask[id,username]&amp;quot;

        _users = self.client[&#39;Account&#39;].getUsers(filter=_filter, mask=_mask)
        return _users

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    main.main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Place quote order</title>
      <link>https://softlayer.github.io/python/order_quote/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/order_quote/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import SoftLayer
from pprint import pprint as pp
 
quote_id = 12345

client = SoftLayer.Client()

def getOrderContainer(quote_id):
    container = client[&#39;Billing_Order_Quote&#39;].getRecalculatedOrderContainer(id=quote_id)
    return container[&#39;orderContainers&#39;][0]
 
def getQuotes():
    quotes = client[&#39;SoftLayer_Account&#39;].getActiveQuotes()
    pp(quotes)

getQuotes()
guests = {&#39;hostname&#39;: &#39;quotetest&#39;, &#39;domain&#39;: &#39;example.com&#39;}
container = getOrderContainer(quote_id)
container[&#39;quantity&#39;] = 1
container[&#39;virtualGuests&#39;] = []
# You will need to add a hostname and domain entry for each server on the order
# if quantity was 5, you would need to add 5 guests here
container[&#39;virtualGuests&#39;].append(guests)
container[&#39;presetId&#39;] = None
result = client[&#39;Product_Order&#39;].verifyOrder(container)

pp(result)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
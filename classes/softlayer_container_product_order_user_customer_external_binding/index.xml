<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Softlayer_container_product_order_user_customer_external_binding on SoftLayer API</title>
    <link>https://softlayer.github.io/classes/softlayer_container_product_order_user_customer_external_binding/</link>
    <description>Recent content in Softlayer_container_product_order_user_customer_external_binding on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/classes/softlayer_container_product_order_user_customer_external_binding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Order an external authentication</title>
      <link>https://softlayer.github.io/python/order_external_auth/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/python/order_external_auth/</guid>
      <description>import SoftLayer import json class example(): def __init__(self): self.client = SoftLayer.Client() # Generate the order template used to place the order def _generateOrder(self, userId, keyName, package, credential=None): # Retrieve the package object in order to know its ID pkg_filter = {&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;: package}} package_list = self.client[&amp;#39;Product_Package&amp;#39;].getAllObjects(filter=pkg_filter) package_id = package_list[0][&amp;#39;id&amp;#39;] # Retrive the available price of external auth item itm_filter = {&amp;#34;itemPrices&amp;#34;:{&amp;#34;item&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:keyName}}}} prices = self.client[&amp;#39;Product_Package&amp;#39;].getItemPrices(filter=itm_filter, id=package_id) # Build skeleton of order template orderTemplate = { &amp;#39;complexType&amp;#39;: &amp;#39;SoftLayer_Container_Product_Order_User_Customer_External_Binding&amp;#39;, &amp;#39;packageId&amp;#39;: package_id, &amp;#39;prices&amp;#39;:[{&amp;#39;id&amp;#39;: prices[0][&amp;#39;id&amp;#39;]}], &amp;#39;userId&amp;#39;: userId, &amp;#39;externalId&amp;#39;: credentialId } return orderTemplate def orderExternalAuth(self, userId, keyName, credential=None): # package used to order an External Auth.</description>
    </item>
    
    <item>
      <title>SoftLayer_Container_Product_Order_User_Customer_External_Binding</title>
      <link>https://softlayer.github.io/reference/datatypes/SoftLayer_Container_Product_Order_User_Customer_External_Binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/reference/datatypes/SoftLayer_Container_Product_Order_User_Customer_External_Binding/</guid>
      <description>SoftLayer_Container_Product_Order_User_Customer_External_Binding Datatype   Description This container type is used for placing orders for external authentication, such as phone-based authentication.
associatedMethods  SoftLayer_Product_Order::verifyOrder SoftLayer_Product_Order::placeOrder     Local bigDataOrderFlag  Flag for identifying an order for Big Data Deployment.  Type: boolean
  billingInformation  Billing Information associated with an order. For existing customers this information is completely ignored. Do not send this information for existing customers.  Type: SoftLayer_Container_Product_Order_Billing_Information</description>
    </item>
    
  </channel>
</rss>
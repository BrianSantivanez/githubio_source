<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Softlayer_virtual_guest on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/classes/softlayer_virtual_guest/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Fri, 04 Aug 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Migrate a VSI between dedicated hosts</title>
      <link>https://softlayer.github.io/python/migratededicatedinstance/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/migratededicatedinstance/</guid>
      <description>&lt;p&gt;This script will kick of an immediate migration of the Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
@author Ryan TIffany
&amp;quot;&amp;quot;&amp;quot;
import SoftLayer
from pprint import pprint as pp

destinationHostId = 987654
vsiId = 1234567
client = SoftLayer.Client()

migrateGuest = client[&#39;SoftLayer_Virtual_Guest&#39;].migrateDedicatedHost(destinationHostId, id=vsiId)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrate a VSI between dedicated hosts</title>
      <link>https://softlayer.github.io/ruby/migratededicatedinstance/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/migratededicatedinstance/</guid>
      <description>&lt;p&gt;This script will kick of an immediate migration of the Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39; 
require &#39;pp&#39; 

# Connect to SoftLayer
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

destinationHostId = 10001
vsiId = 37167483

migrateGuest = client[&#39;SoftLayer_Virtual_Guest&#39;].object_with_id(vsiId).migrateDedicatedHost(destinationHostId)
pp migrateGuest
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/python/getkvmdetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getkvmdetails/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
@author Ryan Tiffany
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&amp;quot;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=31678643)
pp(getDetails)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/rest/getkvmdetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getkvmdetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getObject&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/[device_id]/getObject?objectMask=mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example Response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;accountId&amp;quot;: xxxxx,
    &amp;quot;consoleIpAddressRecord&amp;quot;: {
        &amp;quot;ipAddress&amp;quot;: {
            &amp;quot;ipAddress&amp;quot;: &amp;quot;10.3.2.143&amp;quot;
        },
        &amp;quot;port&amp;quot;: 5902
    },
    &amp;quot;createDate&amp;quot;: &amp;quot;2017-05-02T11:00:54-06:00&amp;quot;,
    &amp;quot;dedicatedAccountHostOnlyFlag&amp;quot;: false,
    &amp;quot;domain&amp;quot;: &amp;quot;cdetest.info&amp;quot;,
    &amp;quot;fullyQualifiedDomainName&amp;quot;: &amp;quot;kube.cdetest.info&amp;quot;,
    &amp;quot;globalIdentifier&amp;quot;: &amp;quot;1c02e7d5-7a4e-4324-9ff2-xxxxxxxx&amp;quot;,
    &amp;quot;hostname&amp;quot;: &amp;quot;kube&amp;quot;,
    &amp;quot;id&amp;quot;: 31678643,
    &amp;quot;lastPowerStateId&amp;quot;: null,
    &amp;quot;lastVerifiedDate&amp;quot;: null,
    &amp;quot;managedResourceFlag&amp;quot;: false,
    &amp;quot;maxCpu&amp;quot;: 2,
    &amp;quot;maxCpuUnits&amp;quot;: &amp;quot;CORE&amp;quot;,
    &amp;quot;maxMemory&amp;quot;: 4096,
    &amp;quot;metricPollDate&amp;quot;: null,
    &amp;quot;modifyDate&amp;quot;: &amp;quot;2017-05-02T11:10:50-06:00&amp;quot;,
    &amp;quot;operatingSystem&amp;quot;: {
        &amp;quot;hardwareId&amp;quot;: null,
        &amp;quot;id&amp;quot;: 15948205,
        &amp;quot;manufacturerLicenseInstance&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;passwords&amp;quot;: [
            {
                &amp;quot;createDate&amp;quot;: &amp;quot;2017-05-02T11:04:32-06:00&amp;quot;,
                &amp;quot;id&amp;quot;: 17502747,
                &amp;quot;modifyDate&amp;quot;: &amp;quot;2017-05-02T11:04:32-06:00&amp;quot;,
                &amp;quot;password&amp;quot;: &amp;quot;redacted&amp;quot;,
                &amp;quot;port&amp;quot;: null,
                &amp;quot;software&amp;quot;: null,
                &amp;quot;softwareId&amp;quot;: 15948205,
                &amp;quot;username&amp;quot;: &amp;quot;root&amp;quot;
            }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/ruby/getkvmdetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getkvmdetails/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
virtual_server_id = 31678643

mask = &#39;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&#39;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].object_mask(mask).object_with_id(virtual_server_id).getObject
pp getDetails
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/python/getverbosevsidetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/getverbosevsidetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
import pprint
from pprint import pprint as pp

client = SoftLayer.Client()

mask = &amp;quot;mask[id, fullyQualifiedDomainName, billingItem[id, item[id, description], category[name, id],children[id, item[id, description], category[name, id]]]]&amp;quot;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(mask=mask,id=26961063)
pp(getDetails)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/rest/getverbosevsidetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/rest/getverbosevsidetails/</guid>
      <description>&lt;p&gt;Operation: &lt;code&gt;GET&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Method: &lt;a href=&#34;http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/getObject&#34;&gt;&lt;code&gt;SoftLayer_Virtual_Guest::getObject()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: SoftLayer_Virtual_Guest/getObject&lt;/p&gt;

&lt;p&gt;Example CURL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://$SOFTLAYER_USERNAME:$SOFTLAYER_API_KEY@api.softlayer.com/rest/v3/SoftLayer_Virtual_Guest/$virtualGuestId/getObject.json?objectMask=mask[billingItem[item,category,children[item,category]]]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/ruby/getverbosevsidetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getverbosevsidetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

virtual_server_id = 26961063
object_mask = &#39;mask[id,fullyQualifiedDomainName,billingItem[id,item[id,description],category[name,id],children[id,item[id,description],category[name,id]]]]&#39;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].object_mask(object_mask).object_with_id(virtual_server_id).getObject
pp getDetails
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Virtual Guest</title>
      <link>https://softlayer.github.io/go/createvsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/createvsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

func main() {

          sess := session.New()
          doCreateVMTest(sess)
}


func doCreateVMTest(sess *session.Session) {
    service := services.GetVirtualGuestService(sess)

    // Create a Virtual_Guest instance as a template
    vGuestTemplate := datatypes.Virtual_Guest{}

    //Set Creation values - use helpers from the sl package to set pointer values
    vGuestTemplate.Hostname = sl.String(&amp;quot;sample&amp;quot;)
    vGuestTemplate.Domain = sl.String(&amp;quot;example.com&amp;quot;)
    vGuestTemplate.MaxMemory = sl.Int(4096)
    vGuestTemplate.StartCpus = sl.Int(1)
    vGuestTemplate.Datacenter = &amp;amp;datatypes.Location{Name: sl.String(&amp;quot;wdc01&amp;quot;)}
    vGuestTemplate.OperatingSystemReferenceCode = sl.String(&amp;quot;UBUNTU_LATEST&amp;quot;)
    vGuestTemplate.LocalDiskFlag = sl.Bool(true)

    vGuest, err := service.Mask(&amp;quot;id;domain&amp;quot;).CreateObject(&amp;amp;vGuestTemplate)
    if err != nil {
        fmt.Printf(&amp;quot;%s\n&amp;quot;, err)
        return
    } else {
        fmt.Printf(&amp;quot;\nNew Virtual Guest created with ID %d\n&amp;quot;, *vGuest.Id)
        fmt.Printf(&amp;quot;Domain: %s\n&amp;quot;, *vGuest.Domain)
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring Examples</title>
      <link>https://softlayer.github.io/python/monitoring/</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/monitoring/</guid>
      <description>&lt;p&gt;ResponseStatus codes and what they mean.
&lt;a href=&#34;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Monitor_Version1_Query_Result&#34;&gt;http://sldn.softlayer.com/reference/datatypes/SoftLayer_Network_Monitor_Version1_Query_Result&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0: CRITICAL&lt;/li&gt;
&lt;li&gt;1: Warning&lt;/li&gt;
&lt;li&gt;2: OK&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4 - 5: Unknown Status, Contact Support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information:
&lt;a href=&#34;https://stackoverflow.com/questions/37662607/python-api-monitoring-manager&#34;&gt;https://stackoverflow.com/questions/37662607/python-api-monitoring-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example gets the status of your Basic and Advanced monitoring.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):

        self.client = SoftLayer.Client()

    def main(self):
        return True

    def getBasicStatus(self, server_id):
        mask = &amp;quot;mask[fullyQualifiedDomainName, networkMonitors[lastResult]]&amp;quot;
        server = self.client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(id=server_id, mask=mask )
        pp(server)

    def getAdvancedStatus(self, server_id):
        mask = &amp;quot;mask[fullyQualifiedDomainName, monitoringAgents[configurationValues[definition]]]&amp;quot;
        server = self.client[&#39;SoftLayer_Virtual_Guest&#39;].getObject(id=server_id, mask=mask )
        pp(server)

if __name__ == &amp;quot;__main__&amp;quot;:
    server = 24880113
    main = example()
    main.getBasicStatus(server)
    main.getAdvancedStatus(server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example configures the CPU monitor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
Configure the section &#39;CPU&#39; from the &#39;Cpu, Disk, and Memory Monitoring Agent&#39; agent.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Monitoring_Agent/applyConfigurationValues
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Monitoring_Agent_Configuration_Value

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# The IP address of the server or VSI to configure.
ipAddres = &amp;quot;159.8.52.188&amp;quot;

configuration = {
    &#39;Graph System CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph Total CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph User CPU Usage&#39;: &amp;quot;True&amp;quot;,
    &#39;Graph I/O Wait CPU Usage&#39;: &amp;quot;True&amp;quot;,
    &#39;Processor Queue Length Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Error Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Error Alarm Threshold&#39;: &amp;quot;99&amp;quot;,
    &#39;CPU Usage Warning Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;CPU Usage Warning Alarm Threshold&#39;: &amp;quot;82&amp;quot;,
    &#39;Processor Queue Length Alarm&#39;: &amp;quot;True&amp;quot;,
    &#39;Max Queue Length&#39;: &amp;quot;4&amp;quot;
}

# The agent&#39;s name we wish to configure.
agentName = &#39;Cpu, Disk, and Memory Monitoring Agent&#39;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
monitoringService = client[&#39;SoftLayer_Monitoring_Agent&#39;]

# Getting the monitoring agents installed in the server or VSI.
try:
    objectMask = &#39;mask[monitoringAgents[configurationValues[definition]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# Getting the agent to configure.
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;name&#39;] == agentName]
if len(agents) == 0:
    print(&amp;quot;Unable to find the agent: &amp;quot; + agentName)
    exit(1)
agent = agents[0]

# Creating an SoftLayer_Monitoring_Agent_Configuration_Value skeleton
# which contains the configuration for the agent.
configurationValues = []
for item in configuration.keys():
    itemFound = False
    for value in agent[&#39;configurationValues&#39;]:
        if value[&#39;definition&#39;][&#39;name&#39;].strip().upper() == item.strip().upper():
            itemFound = True
            configurationValue = value
            configurationValue[&#39;value&#39;] = configuration[item].strip().upper()
            configurationValues.append(configurationValue)
            break
    if not itemFound:
        print(&amp;quot;The configuration: &amp;quot; + item + &amp;quot; is not available for the agent.&amp;quot;)


# Calling the SoftLayer_Monitoring_Agent::applyConfigurationValues method
# to apply the changes in the agent.
# Note: In case there is no changes in the agent configuration the method
# will return error.
try:
    result = monitoringService.applyConfigurationValues(configurationValues, id=agent[&#39;id&#39;])
    print(json.dumps(result, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to apply the configuration in the monitoring agent.&amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example GETs the monitoring configuration&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
Get the configuration of the monitoring agent in a server or VSI.

Important manual pages:
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/datatypes/SoftLayer_Monitoring_Agent/
http://sldn.softlayer.com/article/Object-Masks

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

ipAddres = &amp;quot;169.54.54.164&amp;quot;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]

try:
    objectMask = &#39;mask[monitoringAgents[configurationTemplate[configurationSections[subSections]],&#39; \
                 &#39;configurationValues[id, value, profileId, agentId, configurationDefinitionId,&#39; \
                 &#39;profile, definition[attributes, section, valueType]]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# We will get the configuration of the active agents
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;statusName&#39;] == &amp;quot;Active&amp;quot;]
server[&#39;monitoringAgents&#39;] = agents

configs = []
for agent in server[&#39;monitoringAgents&#39;]:
    config = {}
    config[&#39;agent&#39;] = agent[&#39;name&#39;]
    config[&#39;id&#39;] = agent[&#39;id&#39;]
    sections = []
    for section in agent[&#39;configurationTemplate&#39;][&#39;configurationSections&#39;]:
        sect = {}
        subsects = []
        hasProfile = False
        profileIds = []
        confs = []
        for subsection in section[&#39;subSections&#39;]:
            values = [value for value in agent[&#39;configurationValues&#39;] if
                      value[&#39;definition&#39;][&#39;sectionId&#39;] == subsection[&#39;id&#39;]]
            for value in values:
                conf = {}
                if value[&#39;profileId&#39;] == &amp;quot;&amp;quot;:
                    conf[value[&#39;definition&#39;][&#39;name&#39;]] = value[&#39;value&#39;]
                    confs.append(conf)
                else:
                    hasProfile = True
                    profileIds.append(value[&#39;profileId&#39;])      
        sect[&#39;name&#39;] = section[&#39;name&#39;]
        if not hasProfile:
            sect[&#39;configuration&#39;] = confs
            sections.append(sect)
        else:
            profileIds = list(set(profileIds))
            profiles = []
            for profileId in profileIds:
                profile = {}
                valueConfs = []
                valueProfiles = [value for value in agent[&#39;configurationValues&#39;] if
                                 value[&#39;profileId&#39;] == profileId]
                profile[&#39;name&#39;] = valueProfiles[0][&#39;profile&#39;][&#39;name&#39;]
                for valueProfile in valueProfiles:
                    value = {}
                    value[valueProfile[&#39;definition&#39;][&#39;name&#39;]] = valueProfile[&#39;value&#39;]
                    valueConfs.append(value)
                profile[&#39;configuration&#39;] = valueConfs
                profiles.append(profile)
            sect[&#39;profiles&#39;] = profiles
            sections.append(sect)
    config[&#39;sections&#39;] = sections
    configs.append(config)
print(json.dumps(configs, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example views the results of the monitoring&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
View the reports for the  &amp;quot;CPU&amp;quot; section from the
&#39;Cpu, Disk, and Memory Monitoring Agent&#39; monitor agent.

Important manual pages
http://sldn.softlayer.com/reference/services/SoftLayer_Virtual_Guest/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Server/findByIpAddress
http://sldn.softlayer.com/reference/services/SoftLayer_Monitoring_Agent/getGraphData
http://sldn.softlayer.com/reference/services/Monitoring_Agent_Configuration_Value/getMetricDataType

License: http://sldn.softlayer.com/article/License
Author: SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt;
&amp;quot;&amp;quot;&amp;quot;

import SoftLayer
import json

# The IP address of the server or VSI to configure.
ipAddres = &amp;quot;159.8.52.188&amp;quot;

startDate = &#39;2016-01-02&#39;
endDate = &#39;2016-01-08&#39;

# Set &amp;quot;True&amp;quot; the reports you wish to see.
reports = {
    &#39;Graph System CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph Total CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph User CPU Usage&#39;: &amp;quot;False&amp;quot;,
    &#39;Graph I/O Wait CPU Usage&#39;: &amp;quot;True&amp;quot;,
}

# The agent&#39;s name we wish to see the reports.
agentName = &#39;Cpu, Disk, and Memory Monitoring Agent&#39;

client = SoftLayer.Client()
vsiService = client[&#39;SoftLayer_Virtual_Guest&#39;]
hardwareService = client[&#39;SoftLayer_Hardware_Server&#39;]
monitoringService = client[&#39;SoftLayer_Monitoring_Agent&#39;]
agentConfigurationService = client[&#39;Monitoring_Agent_Configuration_Value&#39;]

# Getting the monitoring agents installed in the server or VSI.
try:
    # Setting an object mask to retrieve information about the monitoring agents.
    objectMask = &#39;mask[monitoringAgents[configurationValues[definition]]]&#39;
    server = vsiService.findByIpAddress(ipAddres, mask=objectMask)
    if not &#39;id&#39; in server:
        server = hardwareService.findByIpAddress(ipAddres, mask=objectMask)
        if not &#39;id&#39; in server:
            print(&amp;quot;There is no a Server or VSI with the IP address: &amp;quot; + ipAddres)
            exit(1)
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the server &amp;quot;
          % (e.faultCode, e.faultString))
    exit(1)

# Getting the agent to see the reports.
agents = [agent for agent in server[&#39;monitoringAgents&#39;] if agent[&#39;name&#39;] == agentName]
if len(agents) == 0:
    print(&amp;quot;Unable to find the agent: &amp;quot; + agentName)
    exit(1)
agent = agents[0]

# Creating the list of SoftLayer_Container_Metric_Data_Type objects
metricDataTypes = []
for item in reports.keys():
    if reports[item].strip().upper() == &amp;quot;TRUE&amp;quot;:
        itemFound = False
        for value in agent[&#39;configurationValues&#39;]:
            if value[&#39;definition&#39;][&#39;name&#39;].strip().upper() == item.strip().upper():
                itemFound = True
                if value[&#39;value&#39;].strip().upper() == &amp;quot;TRUE&amp;quot;:
                    try:
                        metrics = agentConfigurationService.getMetricDataType(id=value[&#39;id&#39;])
                        metricDataTypes.append(metrics)
                    except SoftLayer.SoftLayerAPIError as e:
                        print(&amp;quot;Unable to get the metrics. &amp;quot; % (e.faultCode, e.faultString))
                else:
                    print(&amp;quot;The report: &amp;quot; + item + &amp;quot; is disable for the agent. Please review the agent configuration.&amp;quot;)
                    exit(1)
                break
        if not itemFound:
            print(&amp;quot;The configuration: &amp;quot; + item + &amp;quot; is not available for the agent.&amp;quot;)

# Getting the reports.
try:
    data = monitoringService.getGraphData(metricDataTypes, startDate, endDate, id=agent[&#39;id&#39;])
    print(json.dumps(data, sort_keys=True, indent=2, separators=(&#39;,&#39;, &#39;: &#39;)))
except SoftLayer.SoftLayerAPIError as e:
    print(&amp;quot;Unable to get the report. &amp;quot;  % (e.faultCode, e.faultString))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>https://softlayer.github.io/php/createvsi/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/createvsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);

$template = new stdClass();
$template-&amp;gt;location = 1441195;
$template-&amp;gt;datacenter-&amp;gt;name = &#39;dal10&#39;;
$template-&amp;gt;domain = &#39;example.com&#39;;
$template-&amp;gt;startCpus = 2;
$template-&amp;gt;maxMemory = 2048;
$template-&amp;gt;operatingSystemReferenceCode = &#39;CENTOS_6_64&#39;;
$template-&amp;gt;hostname = &#39;testphp&#39;;
$template-&amp;gt;localDiskFlag = True;
$template-&amp;gt;hourlyBillingFlag = True;
$template-&amp;gt;dedicatedAccountHostOnlyFlag = False;
$template-&amp;gt;primaryBackendNetworkComponent = 1286783;
$template-&amp;gt;primaryNetworkComponent = 1286781;
$template-&amp;gt;privateNetworkOnlyFlag = False;

try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;,null, $apiUsername, $apiKey);
  $response = $client-&amp;gt;createObject($template);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a new virtual server with all options</title>
      <link>https://softlayer.github.io/ruby/createvsi/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/createvsi/</guid>
      <description>&lt;p&gt;When you are ready to place the order change &lt;code&gt;verifyOrder(productOrder)&lt;/code&gt; to &lt;code&gt;placeOrder(productOrder)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

productOrder = {
  &#39;virtualGuests&#39; =&amp;gt; [{
     &#39;hostname&#39; =&amp;gt; &#39;testRuby&#39;,
     &#39;domain&#39;   =&amp;gt; &#39;example.com&#39;,
     &#39;primaryBackendNetworkComponent&#39; =&amp;gt; { &#39;networkVlan&#39; =&amp;gt; { &#39;id&#39; =&amp;gt; 1286783 } }
  }],
  &#39;location&#39; =&amp;gt; 1441195,
  &#39;packageId&#39; =&amp;gt; 46,
  &#39;operatingSystemReferenceCode&#39; =&amp;gt; &#39;CENTOS_6_64&#39;, 
  &#39;useHourlyPricing&#39; =&amp;gt; false,
  &#39;prices&#39; =&amp;gt; [
     {&#39;id&#39; =&amp;gt; 1640 }, # 1 x 2.0 GHz Core
     {&#39;id&#39; =&amp;gt; 1644 }, # 1 GB RAM
     {&#39;id&#39; =&amp;gt; 13945 }, # CENTOS_6_64
     {&#39;id&#39; =&amp;gt; 1639 }, # 100 GB (SAN) First Disk
     {&#39;id&#39; =&amp;gt; 2277 }, # 100 GB (SAN) Second Disk
     {&#39;id&#39; =&amp;gt; 50367 }, # 250 GB Bandwidth
     {&#39;id&#39; =&amp;gt; 274 }, # 1 Gbps Public &amp;amp; Private Network Uplinks
     {&#39;id&#39; =&amp;gt; 21 }, # 1 IP Address
     {&#39;id&#39; =&amp;gt; 420 }, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
     {&#39;id&#39; =&amp;gt; 56 }, # Host Ping and TCP Service Monitoring
     {&#39;id&#39; =&amp;gt; 57 }, # Email and Ticket
     {&#39;id&#39; =&amp;gt; 418 }, # NESSUS_VULNERABILITY_ASSESSMENT_REPORTING
     {&#39;id&#39; =&amp;gt; 905 }, # REBOOT_REMOTE_CONSOLE
     {&#39;id&#39; =&amp;gt; 58 }  # AUTOMATED_NOTIFICATION
  ]
}

order = client[&#39;Product_Order&#39;].verifyOrder(productOrder)

pp order

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>https://softlayer.github.io/php/attach_detach/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/php/attach_detach/</guid>
      <description>&lt;p&gt;Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.&lt;/p&gt;

&lt;p&gt;Running this on a disk that is already attached will move the disk to the new guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/* You can use the getenv() module to pull your exported Username
and API key to keep from having to store them in your files */

require_once &#39;./vendor/autoload.php&#39;;
$apiUsername = getenv(&#39;SOFTLAYER_USERNAME&#39;);
$apiKey = getenv(&#39;SOFTLAYER_API_KEY&#39;);
$guest_id = 22983449;
$storage_id = 20309395;


try {
  $client = \SoftLayer\SoapClient::getClient(&#39;SoftLayer_Virtual_Guest&#39;, $guest_id, $apiUsername, $apiKey);
  $response = $client-&amp;gt;attachDiskImage($storage_id);

  print_r($response);

 } catch(Exception $e) {
     echo &#39;Cannot compute. Error is: &#39; . $e-&amp;gt;getMessage();
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To detach the disk simply change &lt;code&gt;$client-&amp;gt;attachDiskImage($storage_id)&lt;/code&gt; to &lt;code&gt;$client-&amp;gt;detachDiskImage($storage_id)&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Attach and Detach a Block Device to a Virtual_Guest</title>
      <link>https://softlayer.github.io/ruby/attach_detach/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/attach_detach/</guid>
      <description>&lt;p&gt;Attaching a currently detached portable block device to a given guest. The disk image will need to be migrated to the host the guest is on, so make sure to check if that host has enough disk space (with checkHostDiskAvailability) before attaching. This is only required for guests with local storage guests. SAN based guests don&amp;rsquo;t need that step.&lt;/p&gt;

&lt;p&gt;Running this on a disk that is already attached will move the disk to the new guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Credentials to the API are read from a configuration file by default.
# See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
disk_id = 87654321
guest_id = 1234567

attach = client[&#39;SoftLayer_Virtual_Guest&#39;]
item = attach.object_with_id(guest_id).attachDiskImage(disk_id)

pp item
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To detach the disk simply change &lt;code&gt;attachDiskImage(disk_id)&lt;/code&gt; to &lt;code&gt;detachDiskImage(disk_id)&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Hardware and Virtual Servers</title>
      <link>https://softlayer.github.io/python/upgrade_examples/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/python/upgrade_examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()

    &amp;quot;&amp;quot;&amp;quot;
    Prints out what can be upgraded on a server by category.
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeItemPrices(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeItemPrices(id=hardware_id)
        last_id = 0
        for item in result:
            now_id = item[&#39;categories&#39;][0][&#39;id&#39;]
            if now_id != last_id:
                print(&amp;quot;%s (%s)&amp;quot; % (item[&#39;categories&#39;][0][&#39;name&#39;], item[&#39;categories&#39;][0][&#39;id&#39;]))
            last_id = now_id
            print(&amp;quot;\t %s (%s)&amp;quot; % (item[&#39;item&#39;][&#39;description&#39;], item[&#39;id&#39;]))


    &amp;quot;&amp;quot;&amp;quot;
    Get the available maintenance windows that exist for a server.
    &amp;quot;now&amp;quot; is still always an option
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeTimes(self, hardware_id, beginDate, endDate):
        # getLocation doesn&#39;t return an id that is useful for getMaintenanceWindows
        # Needs to be the datacenter ID, not the location id...
        _mask = &amp;quot;mask[datacenter]&amp;quot;
        server = self.client[&#39;SoftLayer_Hardware_Server&#39;].getObject(id=hardware_id,mask=_mask)
        pp(server)
        location_id = server[&#39;datacenter&#39;][&#39;id&#39;]
        provision_service = self.client[&#39;SoftLayer_Provisioning_Maintenance_Window&#39;]
        windows = provision_service.getMaintenanceWindows(beginDate, endDate, location_id, 1)
        pp(windows)


    &amp;quot;&amp;quot;&amp;quot;
    Upgrades the network speed 1Gbps (price id = 274)
    MAINTENANCE_WINDOW requires both the time, AND the id of the maintenance window. Virtual Server upgrades do not require the ID, just bare metal.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeServer(self, hardware_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Hardware_Server_Upgrade&#39;,
            &#39;hardware&#39; : [{&#39;id&#39; : hardware_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-30T00:00:00-06:00&#39;
                },
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW_ID&#39;, 
                    &#39;value&#39; : 7
                }
            ],
            &#39;prices&#39;: [{&#39;id&#39; : 274}]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Adds a 10G disk (price id = 2255) to the second (id=82) and third (id=92)
    disk slots on the VSI. The price for both is the same, you just need to specify
    the propery category for each disk.
    &amp;quot;&amp;quot;&amp;quot;
    def upgradeVSI(self, vsi_id, place_order=False):
        product_client = self.client[&#39;SoftLayer_Product_Order&#39;]
        upgrade = {
            &#39;complexType&#39; : &#39;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&#39;,
            &#39;virtualGuests&#39; : [{&#39;id&#39; : vsi_id}],
            &#39;properties&#39; : [
                {
                    &#39;name&#39; : &#39;MAINTENANCE_WINDOW&#39;, 
                    &#39;value&#39; : &#39;2016-03-23 16:00:00&#39;
                }
            ],
            &#39;prices&#39;: [
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 82}],
                    &#39;id&#39; : 2255
                },
                {
                    &#39;categories&#39; : [{&#39;id&#39; : 92}],
                    &#39;id&#39; : 2255
                }
            ]
        }
        pp(upgrade)
        print(&amp;quot;Verifying Order....&amp;quot;)
        result = product_client.verifyOrder(upgrade)
        pp(result)
        if place_order:
            print(&amp;quot;PLACING ORDER....&amp;quot;)
            place_result = product_client.placeOrder(upgrade)
            pp(place_result)


    &amp;quot;&amp;quot;&amp;quot;
    Gets some information about any current upgrade requests for a server
    &amp;quot;&amp;quot;&amp;quot;
    def getUpgradeInfo(self, hardware_id, service=&#39;SoftLayer_Hardware_Server&#39;):
        result = self.client[service].getUpgradeRequest(id=hardware_id)
        pp(result)

if __name__ == &amp;quot;__main__&amp;quot;:
    main = example()
    server_id = 662657
    # main.getUpgradeItemPrices(server_id)
    # main.getUpgradeTimes(server_id, &#39;2016-03-30 00:00:00&#39;, &#39;2016-03-31 20:00:00&#39;)
    # main.upgradeServer(server_id, True)
    vsi_id = 13106845
    # main.getUpgradeItemPrices(vsi_id,&#39;SoftLayer_Virtual_Guest&#39;)
    # main.upgradeVSI(vsi_id, True)
    main.getUpgradeInfo(vsi_id,&#39;SoftLayer_Virtual_Guest&#39; )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
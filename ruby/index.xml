<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Ruby on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/ruby/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Wed, 13 Sep 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Ordering Raid</title>
      <link>https://softlayer.github.io/ruby/orderingraid/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/orderingraid/</guid>
      <description>

&lt;p&gt;As a SoftLayer user, you have probably seen the beautiful RAID Configurator that greets you when you order a server on the SoftLayer website.&lt;/p&gt;

&lt;p&gt;It allows you to do anything you like, from a straight RAID configuration involving all drives in a single disk array, to a much more intricate configuration with nearly any mix of disks and RAID types.&lt;/p&gt;

&lt;p&gt;However beautiful and practical the interface, sometimes you want to script this process, and the SoftLayer mantra of &amp;ldquo;Anything you can do in the Web interface, you can do on the API&amp;rdquo; also rings true in this case.&lt;/p&gt;

&lt;h2 id=&#34;single-raid-group&#34;&gt;Single RAID group&lt;/h2&gt;

&lt;p&gt;If all your drives are the same and you simply want a single RAID group, be it RAID 0,1,5 or 10, you can achieve this by ordering the corresponding disk controller.&lt;/p&gt;

&lt;p&gt;When building your order template you will see that RAID-enabled servers are listed with multiple disk controllers. Here&amp;rsquo;s an example of the relevant price IDs from package 53 (Intel Xeon 3200 Series):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Category &amp;quot;Disk Controller&amp;quot;:
     876 -- Non-RAID
     877 -- RAID 0
     878 -- RAID 1
     879 -- RAID 5
     880 -- RAID 10
     22482 -- RAID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So ordering an Intel 3260 server with RAID 10 through the API could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rubygems&#39;
require &#39;softlayer_api&#39;
 
$SL_API_USERNAME = &amp;quot; PLEASE SET ME &amp;quot;
$SL_API_KEY = &amp;quot; PLEASE SET ME TOO &amp;quot;
 
client = SoftLayer::Service.new(&amp;quot;SoftLayer_Product_Order&amp;quot;);
 
order = {
 :complexType =&amp;gt; &#39;SoftLayer_Container_Product_Order_Hardware_Server&#39;,
 :quantity =&amp;gt; 1,
 :hardware =&amp;gt; [{:hostname =&amp;gt; &#39;raidtest&#39;, :domain =&amp;gt; &#39;example.com&#39;}],
 :location =&amp;gt; 168642, # San Jose 1
 :packageId =&amp;gt; 53, # Intel Xeon 3200 Series
 :prices =&amp;gt; [
  {:id =&amp;gt; 2050}, # Single Processor Quad Core Xeon 3460 - 2.80GHz (Lynnfield) - 1 x 8MB cache w/HT
  {:id =&amp;gt; 17438}, # -- Ubuntu Linux 12.04.0 LTS Precise Pangolin - Minimal Install (64 bit)
  {:id =&amp;gt; 21004}, # 4 GB DDR3 Registered 1333
  {:id =&amp;gt; 880}, # Disk controller -- RAID 10 
  {:id =&amp;gt; 1257}, # First hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 728}, # 0 GB Bandwidth
  {:id =&amp;gt; 898}, # 100 Mbps Private Network
  {:id =&amp;gt; 906}, # Reboot / KVM over IP  
  {:id =&amp;gt; 420}, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
  {:id =&amp;gt; 55}, # Host Ping
  {:id =&amp;gt; 418}, # Nessus Vulnerability Assessment &amp;amp; Reporting
  {:id =&amp;gt; 57}, # Notification -- Email and Ticket
  {:id =&amp;gt; 58} # Response -- Automated Notification
 ]
}
 
result = client.verifyOrder(order)
## Uncomment when you are ready to order
# client.placeOrder(order)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multiple-raid-groups&#34;&gt;Multiple RAID groups&lt;/h2&gt;

&lt;p&gt;When ordering multiple RAID groups you need to order the Disk Controller type called RAID, and specify your RAID groups in an attribute in the order template called storageGroups.
storageGroups is of the type &lt;a href=&#34;https://sldn.softlayer.com/reference/datatypes/SoftLayer_Container_Product_Order_Storage_Group&#34;&gt;SoftLayer_Container_Product_Order_Storage_Group&lt;/a&gt; and the most important attributes can be explained as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;arrayTypeId: Integer - Required
Can be retrieved from &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Configuration_Storage_Group_Array_Type&#34;&gt;SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
hardDrives: Array of integers - Required
Array of drives to take part in the given raid array. 0 = first drive, 1 = second drive, etc&lt;/p&gt;

&lt;p&gt;hotSpareDrives: array of integers - Optional
On raid types where hot spare is allowed, you can specify which drives to use as hot spare.
Raid types that allow hot spare can be retrieved from &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Configuration_Storage_Group_Array_Type&#34;&gt;SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;partitionTemplateId: integer - Optional
To be used on the array where the operating system is to be installed.
Partition Template IDs for the relevant operating system can be retrieved from
&lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Component_Partition_OperatingSystem/getPartitionTemplates&#34;&gt;SoftLayer_Hardware_Component_Partition_OperatingSystem::getPartitionTemplates&lt;/a&gt;
use &lt;a href=&#34;https://sldn.softlayer.com/reference/services/SoftLayer_Hardware_Component_Partition_OperatingSystem&#34;&gt;SoftLayer_Hardware_Component_Partition_OperatingSystem::getAllObjects&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to get a list of operating system groups that has partition templates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s say, for example, you want to have a server with a single SSD drive for the operating system, also hosting a large 12GB swap partition, and a separate RAID array with 3 striped 147GB SAS Drives.&lt;/p&gt;

&lt;p&gt;The first thing we&amp;rsquo;ll need to do is specify the controller and drives we want in our order template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{:id =&amp;gt; 22482}, # Disk controller -- RAID
{:id =&amp;gt; 13756}, # First hard drive -- 50GB SSD
{:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
{:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
{:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To configure the RAID groups we need to populate storageGroups
The disks will be addressed in the order of their placement and template, starting at disk 0.
So for the first disk that we want to be on its own we will use arrayTypeId 9, which is JBOD, and specify partitionTemplateId 226 which specifies a 12GB Swap partition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{
        :arrayTypeId =&amp;gt; 9, # JBOD -- Other types available from SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects
        :hardDrives =&amp;gt; [0], # First Hard Drive (50GB SSD)
        :partitionTemplateId =&amp;gt; 226 # Custom partition template - 12GB Swap
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the second group we specify arrayTypeId 1, which is RAID 0 - Striped&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{
        :arrayTypeId =&amp;gt; 1, # RAID 0 -- Other types available from SoftLayer_Configuration_Storage_Group_Array_Type::getAllObjects
        :hardDrives =&amp;gt; [1,2,3] # Second, third and fourth hard drives (147GB SAS)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All together, the order will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rubygems&#39;
require &#39;softlayer_api&#39;
 
$SL_API_USERNAME = &amp;quot; PLEASE SET ME &amp;quot;
$SL_API_KEY = &amp;quot; PLEASE SET ME TOO &amp;quot;
 
client = SoftLayer::Service.new(&amp;quot;SoftLayer_Product_Order&amp;quot;);
 
order = {
 :complexType =&amp;gt; &#39;SoftLayer_Container_Product_Order_Hardware_Server&#39;,
 :quantity =&amp;gt; 1,
 :hardware =&amp;gt; [{:hostname =&amp;gt; &#39;raidtest&#39;, :domain =&amp;gt; &#39;example.com&#39;}],
 :location =&amp;gt; 168642, # San Jose 1
 :packageId =&amp;gt; 53, # Intel Xeon 3200 Series
 :prices =&amp;gt; [
  {:id =&amp;gt; 2050}, # Single Processor Quad Core Xeon 3460 - 2.80GHz (Lynnfield) - 1 x 8MB cache w/HT
  {:id =&amp;gt; 17438}, # -- Ubuntu Linux 12.04.0 LTS Precise Pangolin - Minimal Install (64 bit)
  {:id =&amp;gt; 21004}, # 4 GB DDR3 Registered 1333
  {:id =&amp;gt; 22482}, # Disk controller -- RAID
  {:id =&amp;gt; 13756}, # First hard drive -- 50GB SSD
  {:id =&amp;gt; 1256}, # Second hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Third hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 825}, # Fourth hard drive -- 147GB SA-SCSI 10K RPM
  {:id =&amp;gt; 728}, # 0 GB Bandwidth
  {:id =&amp;gt; 898}, # 100 Mbps Private Network
  {:id =&amp;gt; 906}, # Reboot / KVM over IP  
  {:id =&amp;gt; 420}, # Unlimited SSL VPN Users &amp;amp; 1 PPTP VPN User per account
  {:id =&amp;gt; 55}, # Host Ping
  {:id =&amp;gt; 418}, # Nessus Vulnerability Assessment &amp;amp; Reporting
  {:id =&amp;gt; 57}, # Notification -- Email and Ticket
  {:id =&amp;gt; 58} # Response -- Automated Notification
 ],
 
 :storageGroups =&amp;gt; [
     { # RAID Array 1
        :arrayTypeId =&amp;gt; 9, # JBOD
        :hardDrives =&amp;gt; [0], # First Hard Drive (50GB SSD)
        :partitionTemplateId =&amp;gt; 226 # Custom partition template - 12GB Swap
     },
     { # RAID Array 2
        :arrayTypeId =&amp;gt; 1, # RAID 0
        :hardDrives =&amp;gt; [1,2,3] # Second, third and fourth hard drives (147GB SAS)
     }
  ]
}

 
result = client.verifyOrder(order)
## Uncomment when you&#39;re ready to order
# client.placeOrder(order)
Links and other useful information
order_multiple_raid_groups.rb
order_single_raid_group.rb
get_package_options.rb (command line tool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//hansKristian&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;These getAllObjects() calls don&amp;rsquo;t show up in the documentation on SLDN, however they do still work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Add and remove rules in a Security group</title>
      <link>https://softlayer.github.io/ruby/addremovesecuritygrouprules/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/addremovesecuritygrouprules/</guid>
      <description>

&lt;p&gt;The Security Group offering is currently in Beta. The use of this feature is restricted to select users. When the Beta period is over, security groups will be available for all users. Contact sgbeta@us.ibm.com using ‘Security Groups’ in the subject line with any questions.&lt;/p&gt;

&lt;h3 id=&#34;adding-rules&#34;&gt;Adding Rules&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
secGroupId = 84301

# Create an object template to create the item.
objectTemplate = {
	&#39;direction&#39; =&amp;gt; &#39;ingress&#39;,
	&#39;protocol&#39; =&amp;gt; &#39;tcp&#39;,
	&#39;portRangeMin&#39; =&amp;gt; 22,
	&#39;portRangeMax&#39; =&amp;gt; 22,
	&#39;ethertype&#39; =&amp;gt; &#39;IPv4&#39;,
	&#39;remoteIp&#39; =&amp;gt; &#39;0.0.0.0/0&#39;
}

newRules = client[&#39;SoftLayer_Network_SecurityGroup&#39;].object_with_id(secGroupId).addRules([objectTemplate])
pp newRules
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;removing-rules&#34;&gt;Removing rules&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
secGroupId = 45101

# Create an object template to create the item.
objectTemplate = [ 48501, 48401 ]

remove = client[&#39;SoftLayer_Network_SecurityGroup&#39;].object_with_id(secGroupId).removeRules(objectTemplate)
pp remove
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a Security group</title>
      <link>https://softlayer.github.io/ruby/createsecuritygroup/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/createsecuritygroup/</guid>
      <description>&lt;p&gt;The Security Group offering is currently in Beta. The use of this feature is restricted to select users. When the Beta period is over, security groups will be available for all users. Contact sgbeta@us.ibm.com using ‘Security Groups’ in the subject line with any questions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
objectTemplate = { 
	&#39;name&#39; =&amp;gt; &#39;rubyExampleCreation&#39;,
    	&#39;description&#39; =&amp;gt; &#39;Sec Group created via ruby&#39;
}

createGroup = client[&#39;SoftLayer_Network_SecurityGroup&#39;].createObjects([objectTemplate])

pp createGroup
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Dedicated Host Allocation</title>
      <link>https://softlayer.github.io/ruby/getdedicatedhostallocation/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getdedicatedhostallocation/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39; 
require &#39;pp&#39; 

# Connect to SoftLayer
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

dedicated_host_id = 10501

getAllocStats = client[&#39;SoftLayer_Virtual_DedicatedHost&#39;].object_with_id(dedicated_host_id).getAllocationStatus

pp getAllocStats
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Dedicated Host Guests</title>
      <link>https://softlayer.github.io/ruby/getdedicatedhostguests/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getdedicatedhostguests/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39; 
require &#39;pp&#39; 

# Connect to SoftLayer
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

dedicated_host_id = 10501

getGuests = client[&#39;SoftLayer_Virtual_DedicatedHost&#39;].object_with_id(dedicated_host_id).getGuests
pp getGuests
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Security Group Details</title>
      <link>https://softlayer.github.io/ruby/getsecuritygroupdetails/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getsecuritygroupdetails/</guid>
      <description>&lt;p&gt;The Security Group offering is currently in Beta. The use of this feature is restricted to select users. When the Beta period is over, security groups will be available for all users. Contact sgbeta@us.ibm.com using ‘Security Groups’ in the subject line with any questions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
secGroupId = 70501

getAll = client[&#39;SoftLayer_Network_SecurityGroup&#39;].object_with_id(secGroupId).getAllObjects
pp getAll
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Migrate a VSI between dedicated hosts</title>
      <link>https://softlayer.github.io/ruby/migratededicatedinstance/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/migratededicatedinstance/</guid>
      <description>&lt;p&gt;This script will kick of an immediate migration of the Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39; 
require &#39;pp&#39; 

# Connect to SoftLayer
client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

destinationHostId = 10001
vsiId = 37167483

migrateGuest = client[&#39;SoftLayer_Virtual_Guest&#39;].object_with_id(vsiId).migrateDedicatedHost(destinationHostId)
pp migrateGuest
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Virtual Console Virtual Guest</title>
      <link>https://softlayer.github.io/ruby/getkvmdetails/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getkvmdetails/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;=begin
@author Ryan Tiffany
=end

require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
virtual_server_id = 31678643

mask = &#39;mask[consoleIpAddressRecord[ipAddress[ipAddress],port],operatingSystem[passwords]]&#39;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].object_mask(mask).object_with_id(virtual_server_id).getObject
pp getDetails
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Show storage on all Virtual Guests</title>
      <link>https://softlayer.github.io/ruby/listvsiblockdevicesizes/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/listvsiblockdevicesizes/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

# Create a SoftLayer API client object
client = SoftLayer::Client.new()

account_service = client[&#39;SoftLayer_Account&#39;]

# We will retrieve the additional information for each VSI:
mask = &#39;mask[id,hostname,blockDevices[id,mountType,diskImage[capacity]]]&#39;
begin
  # getVirtualGuests() will get all the VSIs that an account has.
  result = account_service.object_mask(mask).getVirtualGuests
  pp result
rescue StandardError =&amp;gt; exception
  puts &amp;quot;Unable to  get the VSIs: #{exception}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Notifications</title>
      <link>https://softlayer.github.io/ruby/getnotifications/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getnotifications/</guid>
      <description>&lt;p&gt;Retrieves all notifications that were created on January 1, 2016.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

theDate = &#39;01/01/2017 01:00:00&#39;
theFilter = {
                &#39;startDate&#39;=&amp;gt; { 
                    &#39;operation&#39;=&amp;gt; &#39;greaterThanDate&#39;,
                    &#39;options&#39;=&amp;gt; [
                        {&#39;name&#39;=&amp;gt; &#39;date&#39;, &#39;value&#39; =&amp;gt; [theDate]}
                    ]
                }
            }



getresults = client[&#39;SoftLayer_Notification_Occurrence_Event&#39;].getAllObjects(filter=theFilter)
pp getresults
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reload with SSH keys</title>
      <link>https://softlayer.github.io/ruby/reloadwithsshhardware/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/reloadwithsshhardware/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

imageId = 1234567
sshKey1 = 876543
sshKey2 = 456789
serverId = 1154265
        config = {
            &#39;imageTemplateId&#39;=&amp;gt; imageId, 
            &#39;sshKeyIds&#39; =&amp;gt; [sshKey1, sshKey2]
        }

setclient = client[&#39;Hardware_Server&#39;]
reload = setclient.object_with_id(serverId).reloadOperatingSystem(&#39;FORCE&#39;, config)
pp reload	        
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Order a Netscaler</title>
      <link>https://softlayer.github.io/ruby/ordernetscaler/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/ordernetscaler/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

config = { 
    &#39;orderContainers&#39; =&amp;gt; [
        {&amp;quot;hardware&amp;quot; =&amp;gt; [{
            &amp;quot;primaryBackendNetworkComponent&amp;quot; =&amp;gt; {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1211234
                },
                &amp;quot;primaryNetworkComponent&amp;quot; =&amp;gt; {
                    # REPLACE THIS
                    &amp;quot;networkVlanId&amp;quot; =&amp;gt; 1212456
                }
            }],
            # REPLACE THIS with your location
            &amp;quot;location&amp;quot; =&amp;gt; &amp;quot;DALLAS09&amp;quot;,
            &amp;quot;packageId&amp;quot; =&amp;gt; 192,
            &amp;quot;quantity&amp;quot; =&amp;gt; 1,
            # Price IDS for Netscaler and 2 IPs
            &amp;quot;prices&amp;quot; =&amp;gt; [
                {&amp;quot;id&amp;quot; =&amp;gt; 44964},
                {&amp;quot;id&amp;quot; =&amp;gt; 17238}
            ]
            }]
        }

order = client[&#39;Product_Order&#39;].verifyOrder(config)

pp order    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reloading a server with a custom partition scheme</title>
      <link>https://softlayer.github.io/ruby/reloadcustompartition/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/reloadcustompartition/</guid>
      <description>&lt;p&gt;The following code allows you to reload a Bare Metal server with a custom partitioning scheme. You simply need to change the serverId and the partitions to suit your needs. Note that one partition must be marked as the &amp;lsquo;grow&amp;rsquo; partition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)
server_id = 1154505

config = { 

    &#39;upgradeHardDriveFirmware&#39; =&amp;gt; 0,
        &#39;upgradeBios&#39; =&amp;gt; 0,
        &#39;hardDrives&#39; =&amp;gt; [
            {
                &#39;complexType&#39; =&amp;gt; &amp;quot;SoftLayer_Hardware_Component_HardDrive&amp;quot;,
                &#39;partitions&#39; =&amp;gt; [
                    { &#39;name&#39; =&amp;gt; { &amp;quot;/&amp;quot; =&amp;gt; { &amp;quot;minimumSize&amp;quot; =&amp;gt; &amp;quot;100&amp;quot;} } },
                    { &#39;name&#39; =&amp;gt; { &amp;quot;/boot&amp;quot; =&amp;gt; { &amp;quot;minimumSize&amp;quot; =&amp;gt; &amp;quot;.25&amp;quot; } } },
                    { &#39;name&#39; =&amp;gt; { &amp;quot;/swap0&amp;quot; =&amp;gt; { &amp;quot;minimumSize&amp;quot; =&amp;gt; &amp;quot;32&amp;quot;} } },
                    { &#39;name&#39; =&amp;gt; { &amp;quot;/tmp&amp;quot; =&amp;gt; { &amp;quot;minimumSize&amp;quot; =&amp;gt; &amp;quot;100&amp;quot;} } },
                    { &#39;name&#39; =&amp;gt; { &amp;quot;/var&amp;quot; =&amp;gt; { &amp;quot;minimumSize&amp;quot; =&amp;gt; &amp;quot;100&amp;quot;} } },
                    { &#39;name&#39; =&amp;gt; { &amp;quot;/remove&amp;quot; =&amp;gt; { &amp;quot;minimumSize&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;grow&amp;quot; =&amp;gt; &amp;quot;1&amp;quot; } } } 
                ]
            }
        ]
     }

setclient = client[&#39;Hardware_Server&#39;]
reload = setclient.object_with_id(server_id).reloadOperatingSystem(&#39;FORCE&#39;, config)

pp reload

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Bare Metal Server</title>
      <link>https://softlayer.github.io/ruby/getverbosebmdetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getverbosebmdetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Bare Metal Server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

hardware_id = 26961063
object_mask = &#39;mask[id,fullyQualifiedDomainName,billingItem[id,item[id,description],category[name,id],children[id,item[id,description],category[name,id]]]]&#39;

getDetails = client[&#39;SoftLayer_Hardware&#39;].object_mask(object_mask).object_with_id(hardware_id).getObject
pp getDetails

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get verbose details about a Virtual Guest</title>
      <link>https://softlayer.github.io/ruby/getverbosevsidetails/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/ruby/getverbosevsidetails/</guid>
      <description>&lt;p&gt;This script will get the Packages, Categories, and items associated with a Virtual Guest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;softlayer_api&#39;
require &#39;pp&#39;

client = SoftLayer::Client.new(:timeout =&amp;gt; 120)

virtual_server_id = 26961063
object_mask = &#39;mask[id,fullyQualifiedDomainName,billingItem[id,item[id,description],category[name,id],children[id,item[id,description],category[name,id]]]]&#39;

getDetails = client[&#39;SoftLayer_Virtual_Guest&#39;].object_mask(object_mask).object_with_id(virtual_server_id).getObject
pp getDetails
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
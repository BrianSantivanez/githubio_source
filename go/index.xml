<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Go on SoftLayer API Examples </title>
    <link>https://softlayer.github.io/go/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 07 Nov 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Creating a Virtual Guest</title>
      <link>https://softlayer.github.io/go/createvsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/createvsi/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

func main() {

          sess := session.New()
          doCreateVMTest(sess)
}


func doCreateVMTest(sess *session.Session) {
    service := services.GetVirtualGuestService(sess)

    // Create a Virtual_Guest instance as a template
    vGuestTemplate := datatypes.Virtual_Guest{}

    //Set Creation values - use helpers from the sl package to set pointer values
    vGuestTemplate.Hostname = sl.String(&amp;quot;sample&amp;quot;)
    vGuestTemplate.Domain = sl.String(&amp;quot;example.com&amp;quot;)
    vGuestTemplate.MaxMemory = sl.Int(4096)
    vGuestTemplate.StartCpus = sl.Int(1)
    vGuestTemplate.Datacenter = &amp;amp;datatypes.Location{Name: sl.String(&amp;quot;wdc01&amp;quot;)}
    vGuestTemplate.OperatingSystemReferenceCode = sl.String(&amp;quot;UBUNTU_LATEST&amp;quot;)
    vGuestTemplate.LocalDiskFlag = sl.Bool(true)

    vGuest, err := service.Mask(&amp;quot;id;domain&amp;quot;).CreateObject(&amp;amp;vGuestTemplate)
    if err != nil {
        fmt.Printf(&amp;quot;%s\n&amp;quot;, err)
        return
    } else {
        fmt.Printf(&amp;quot;\nNew Virtual Guest created with ID %d\n&amp;quot;, *vGuest.Id)
        fmt.Printf(&amp;quot;Domain: %s\n&amp;quot;, *vGuest.Domain)
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Listing Virtual Guests</title>
      <link>https://softlayer.github.io/go/listvsis/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/listvsis/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

func main() {

          sess := session.New()
          doListAccountVMsTest(sess)
}

func doListAccountVMsTest(sess *session.Session) {
    // Get the Account service
    service := services.GetAccountService(sess)

    // List VMs
    vms, err := service.Mask(&amp;quot;id;hostname;domain&amp;quot;).Limit(10).GetVirtualGuests()
    if err != nil {
        fmt.Printf(&amp;quot;Error retrieving Virtual Guests from Account: %s\n&amp;quot;, err)
        return
    } else {
        fmt.Println(&amp;quot;VMs under Account:&amp;quot;)
    }

    for _, vm := range vms {
        fmt.Printf(&amp;quot;\t[%d]%s.%s\n&amp;quot;, *vm.Id, *vm.Hostname, *vm.Domain)
    }
}

func handleError(err error) {
    apiErr := err.(sl.Error)
    fmt.Printf(
        &amp;quot;Exception: %s\nMessage: %s\nHTTP Status Code: %d\n&amp;quot;,
        apiErr.Exception,
        apiErr.Message,
        apiErr.StatusCode)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_cancel/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_cancel/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

var guestId = 24438563

func main() {
    // Create a session
    sess := session.New()

    // Get the virtual guest service
    service := services.GetVirtualGuestService(sess)

    // Set the object ID and delete the guest
    success, err := service.Id(guestId).DeleteObject()

    if err != nil {
        log.Fatal(err)
    } else if success == false {
        log.Fatal(&amp;quot;Error deleting virtual guest&amp;quot;)
    } else {
        fmt.Println(&amp;quot;Virtual Guest deleted successfully&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Execute Remote Script</title>
      <link>https://softlayer.github.io/go/execute_remote_script/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/execute_remote_script/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

var remoteScriptURL = &amp;quot;http://example.com/scripts/preparevm&amp;quot;

func main() {
    // Create a session
    sess := session.New()

    // Get the VirtualGuest service
    service := services.GetVirtualGuestService(sess)

    // Execute the script on VM with ID 12345678
    err := service.Id(12345678).ExecuteRemoteScript(&amp;amp;remoteScriptURL)

    if err != nil {
        log.Fatal(err)
    } else {
        fmt.Println(&amp;quot;Remote script sent for execution&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get Operating System Reference Codes</title>
      <link>https://softlayer.github.io/go/os_reference_codes/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/os_reference_codes/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

func main() {
    // Create a session
    sess := session.New()

    // Invoke the &#39;GetCreateObjectOptions&#39; method from the Virtual_Guest service
    opts, err := services.GetVirtualGuestService(sess).GetCreateObjectOptions()
    if err != nil {
        log.Fatal(err)
    }

    // Available properties for inspection:
    //opts.BlockDevices
    //opts.Datacenters
    //opts.Memory
    //opts.NetworkComponents
    //opts.OperatingSystems
    //opts.Processors

    // Print all available OS reference codes:
    for _, os := range opts.OperatingSystems {
        fmt.Println(*os.Template.OperatingSystemReferenceCode)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get disk usage metrics for a time range</title>
      <link>https://softlayer.github.io/go/account_disk_usage_metrics/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/account_disk_usage_metrics/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

func main() {
    // Create a session
    sess := session.New()

    // Account service has the method we need
    service := services.GetAccountService(sess)

    // Range: most recent 24 hours
    //
    // Time values are wrapped within an sl.Time type, to facilitate json marshaling
    tEnd := sl.Time(time.Now())
    tStart := sl.Time(tEnd.AddDate(0, 0, -1))

    data, err := service.GetDiskUsageMetricDataByDate(tStart, tEnd)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Printf(&amp;quot;Number of elements returned: %d\n&amp;quot;, len(data))

    for _, d := range data {
        fmt.Printf(&amp;quot;Counter: %.f, Time: %s, Type: %s\n&amp;quot;, *d.Counter, *d.DateTime, *d.Type)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Handle API errors</title>
      <link>https://softlayer.github.io/go/errors/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/errors/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

var invalidId = 0

func main() {
    // Create a session
    sess := session.New()

    // Call DeleteObject on an invalid virtual guest
    _, err := services.GetVirtualGuestService(sess).
        Id(invalidId).
        DeleteObject()

    // Check the error.  In this instance, a 404 is handled by the application.  
  // Anything else is a no-go.
    if err != nil {
        // Try to type assert the error and look for http status code 404
        if apiErr, ok := err.(sl.Error); ok &amp;amp;&amp;amp; apiErr.StatusCode == 404 {
            fmt.Println(&amp;quot;Virtual Guest not found (already deleted?)&amp;quot;)
        } else {
            log.Fatal(&amp;quot;Unhandled error:&amp;quot;, err)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List Account VMs</title>
      <link>https://softlayer.github.io/go/vm_list/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_list/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

func main() {
  // Create a session, using credentials from the environment or a .softlayer file
    sess := session.New()

  // Get an instance of the Account service
    service := services.GetAccountService(sess)

  // invoke the GetVirtualGuests API method
    vms, err := service.Mask(&amp;quot;id;hostname;domain&amp;quot;).GetVirtualGuests()
    if err != nil {
        fmt.Printf(&amp;quot;Error retrieving Virtual Guests from Account: %s\n&amp;quot;, err)
    } else {
        fmt.Println(&amp;quot;VMs under Account:&amp;quot;)

    for _, vm := range vms {
      fmt.Printf(&amp;quot;\t[%d]%s.%s\n&amp;quot;, *vm.Id, *vm.Hostname, *vm.Domain)
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Look up an SSH key</title>
      <link>https://softlayer.github.io/go/sshkey_lookup/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/sshkey_lookup/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/filter&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
)

// The key to look up
const label = &amp;quot;Test Public Key&amp;quot;

func main() {
    sess := session.New()
    service := services.GetAccountService(sess)

    keys, err := service.
        Filter(filter.Build(
            filter.Path(&amp;quot;sshKeys.label&amp;quot;).Eq(label))).
        Mask(&amp;quot;id,label,key,fingerprint,notes&amp;quot;).
        GetSshKeys()

    if err != nil {
        log.Fatal(&amp;quot;Error retrieving SSH key: &amp;quot;, err)
    }

    if len(keys) == 0 {
        log.Fatal(&amp;quot;No ssh key found labeled &amp;quot;, label)
    }

    if len(keys) &amp;gt; 1 {
        log.Fatal(&amp;quot;More than one ssh key found labeled &amp;quot;, label)
    }

    key := keys[0]

    fmt.Printf(&amp;quot;Public Key [%s] found:\n&amp;quot;, label)

    fmt.Println(&amp;quot;\tID:&amp;quot;, *key.Id)
    fmt.Println(&amp;quot;\tFingerprint:&amp;quot;, *key.Fingerprint)
    fmt.Println(&amp;quot;\tKey:&amp;quot;, *key.Key)

    notes := &amp;quot;&amp;quot;
    if key.Notes != nil {
        notes = *key.Notes
    }

    fmt.Println(&amp;quot;\tNotes:&amp;quot;, notes)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Manage (Create, Add Permissions, Delete) User</title>
      <link>https://softlayer.github.io/go/user_customer_manage/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/user_customer_manage/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

var sess *session.Session

func main() {
    sess = session.New()

    newUser := datatypes.User_Customer{
        Username:     sl.String(&amp;quot;johnsmith&amp;quot;),
        FirstName:    sl.String(&amp;quot;John&amp;quot;),
        LastName:     sl.String(&amp;quot;Smith&amp;quot;),
        Email:        sl.String(&amp;quot;johnsmith@example.com&amp;quot;),
        CompanyName:  sl.String(&amp;quot;Example Co.&amp;quot;),
        Address1:     sl.String(&amp;quot;123 Oak St.&amp;quot;),
        City:         sl.String(&amp;quot;Champaign&amp;quot;),
        State:        sl.String(&amp;quot;IL&amp;quot;),
        Country:      sl.String(&amp;quot;US&amp;quot;),
        TimezoneId:   getTimezoneID(&amp;quot;EST&amp;quot;),
        UserStatusId: getUserStatusID(&amp;quot;ACTIVE&amp;quot;),
    }

    password := &amp;quot;password&amp;quot;

    userID, err := createUser(&amp;amp;newUser, password)
    if err != nil {
        log.Fatal(&amp;quot;Could not create user:&amp;quot;, err)
    }

    fmt.Printf(&amp;quot;New user ID: %d\n&amp;quot;, userID)

    // For permissions, it&#39;s sufficient to send just the keynames to SoftLayer
    permissions := []datatypes.User_Customer_CustomerPermission_Permission{
        {KeyName: sl.String(&amp;quot;TICKET_ADD&amp;quot;)},
        {KeyName: sl.String(&amp;quot;TICKET_VIEW&amp;quot;)},
        {KeyName: sl.String(&amp;quot;SERVER_ADD&amp;quot;)},
        {KeyName: sl.String(&amp;quot;VIRTUAL_GUEST_VIEW&amp;quot;)},
    }

    err = addUserPermissions(userID, permissions)
    if err != nil {
        log.Fatal(&amp;quot;Could not add user permissions:&amp;quot;, err)
    }

    fmt.Println(&amp;quot;Portal permissions added&amp;quot;)

    err = deleteUser(userID)
    if err != nil {
        log.Fatal(&amp;quot;Could not delete user:&amp;quot;, err)
    }

    fmt.Printf(&amp;quot;User %d deleted&amp;quot;, userID)

}

func createUser(user *datatypes.User_Customer, password string) (int, error) {
    // Create the user, specifying the portal password (3rd argument - VPN
    // password - is optional, and not specified here)
    obj, err := services.GetUserCustomerService(sess).
        CreateObject(
            user,
            &amp;amp;password,
            nil)

    if err != nil {
        return -1, err
    }

    return *obj.Id, nil
}

func addUserPermissions(userID int, permissions []datatypes.User_Customer_CustomerPermission_Permission) error {
    _, err := services.GetUserCustomerService(sess).
        Id(userID).
        AddBulkPortalPermission(permissions)

    return err
}

// Delete user is accomplished by setting the user&#39;s status to CANCEL_PENDING
func deleteUser(userID int) error {
    _, err := services.GetUserCustomerService(sess).
        Id(userID).
        EditObject(&amp;amp;datatypes.User_Customer{
            UserStatusId: getUserStatusID(&amp;quot;CANCEL_PENDING&amp;quot;),
        })

    return err
}

// helper function to get a user status ID from a keyname (e.g., ACTIVE)
func getUserStatusID(key string) *int {
    statuses, err := services.GetUserCustomerStatusService(sess).GetAllObjects()
    if err != nil {
        log.Fatal(err)
    }

    for _, status := range statuses {
        if *status.KeyName == key {
            return status.Id
        }
    }

    log.Fatal(&amp;quot;Unable to locate user status matching [%s]&amp;quot;, key)

    return nil
}

// helper function to get a timezone ID from a keyname (e.g., EST)
func getTimezoneID(key string) *int {
    timezones, err := services.GetLocaleTimezoneService(sess).GetAllObjects()
    if err != nil {
        log.Fatal(err)
    }

    for _, tz := range timezones {
        if *tz.ShortName == key {
            return tz.Id
        }
    }

    log.Fatal(&amp;quot;Unable to locate timezone matching [%s]&amp;quot;, key)

    return nil
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Provision a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_provision/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_provision/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/services&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

// A virtual guest template
//
// (use convenience functions to get pointers from literals, as needed)
var vGuestTemplate = datatypes.Virtual_Guest{
    Hostname:                     sl.String(&amp;quot;sample&amp;quot;),
    Domain:                       sl.String(&amp;quot;example.com&amp;quot;),
    MaxMemory:                    sl.Int(4096),
    StartCpus:                    sl.Int(1),
    Datacenter:                   &amp;amp;datatypes.Location{Name: sl.String(&amp;quot;wdc01&amp;quot;)},
    OperatingSystemReferenceCode: sl.String(&amp;quot;UBUNTU_LATEST&amp;quot;),
    LocalDiskFlag:                sl.Bool(true),
}

func main() {
    // Create a session
    sess := session.New()

    service := services.GetVirtualGuestService(sess)

    // Create the virtual guest from the template
    //
    // We also specify an (optional) object mask, to read back some values
    vGuest, err := service.Mask(&amp;quot;id,hostname,domain&amp;quot;).CreateObject(&amp;amp;vGuestTemplate)
    if err != nil {
        log.Fatal(err)
    } else {
        fmt.Printf(
            &amp;quot;\nNew Virtual Guest with ID %d being provisioned\n&amp;quot;, *vGuest.Id)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_upgrade/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>https://softlayer.github.io/go/vm_upgrade/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/softlayer/softlayer-go/datatypes&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/helpers/product&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/helpers/virtual&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/session&amp;quot;
    &amp;quot;github.com/softlayer/softlayer-go/sl&amp;quot;
)

const guestID = 123456

func main() {
    sess := session.New()

    // Create a minimal Virtual_Guest object to pass to the upgrade helper
    guestToUpgrade := datatypes.Virtual_Guest{
        Id: sl.Int(guestID),
    }

    // Upgrade to 4 Core, 8 GB
    upgradeOptions := map[string]float64{
        product.CPUCategoryCode:    float64(4),
        product.MemoryCategoryCode: float64(8),
    }

    receipt, err := virtual.UpgradeVirtualGuest(sess, &amp;amp;guestToUpgrade, upgradeOptions)
    if err != nil {
        log.Fatal(&amp;quot;Couldn&#39;t upgrade virtual guest:&amp;quot;, err)
    }

    fmt.Printf(&amp;quot;Virtual Guest upgrade submitted.  Order ID: %s\n&amp;quot;, *receipt.OrderId)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on SoftLayer API</title>
    <link>https://softlayer.github.io/go/</link>
    <description>Recent content in Go on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Nov 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://softlayer.github.io/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a Virtual Guest</title>
      <link>https://softlayer.github.io/go/createVsi/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/createVsi/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) func main() { sess := session.New() doCreateVMTest(sess) } func doCreateVMTest(sess *session.Session) { service := services.GetVirtualGuestService(sess) // Create a Virtual_Guest instance as a template  vGuestTemplate := datatypes.Virtual_Guest{} //Set Creation values - use helpers from the sl package to set pointer values  vGuestTemplate.Hostname = sl.String(&amp;#34;sample&amp;#34;) vGuestTemplate.Domain = sl.String(&amp;#34;example.com&amp;#34;) vGuestTemplate.MaxMemory = sl.Int(4096) vGuestTemplate.StartCpus = sl.Int(1) vGuestTemplate.Datacenter = &amp;amp;datatypes.Location{Name: sl.String(&amp;#34;wdc01&amp;#34;)} vGuestTemplate.OperatingSystemReferenceCode = sl.</description>
    </item>
    
    <item>
      <title>Listing Virtual Guests</title>
      <link>https://softlayer.github.io/go/listvsis/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/listvsis/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) func main() { sess := session.New() doListAccountVMsTest(sess) } func doListAccountVMsTest(sess *session.Session) { // Get the Account service  service := services.GetAccountService(sess) // List VMs  vms, err := service.Mask(&amp;#34;id;hostname;domain&amp;#34;).Limit(10).GetVirtualGuests() if err != nil { fmt.Printf(&amp;#34;Error retrieving Virtual Guests from Account: %s\n&amp;#34;, err) return } else { fmt.Println(&amp;#34;VMs under Account:&amp;#34;) } for _, vm := range vms { fmt.Printf(&amp;#34;\t[%d]%s.%s\n&amp;#34;, *vm.Id, *vm.Hostname, *vm.Domain) } } func handleError(err error) { apiErr := err.</description>
    </item>
    
    <item>
      <title>Cancel a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_cancel/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/vm_cancel/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; ) var guestId = 24438563 func main() { // Create a session  sess := session.New() // Get the virtual guest service  service := services.GetVirtualGuestService(sess) // Set the object ID and delete the guest  success, err := service.Id(guestId).DeleteObject() if err != nil { log.Fatal(err) } else if success == false { log.Fatal(&amp;#34;Error deleting virtual guest&amp;#34;) } else { fmt.Println(&amp;#34;Virtual Guest deleted successfully&amp;#34;) } }</description>
    </item>
    
    <item>
      <title>Execute Remote Script</title>
      <link>https://softlayer.github.io/go/execute_remote_script/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/execute_remote_script/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; ) var remoteScriptURL = &amp;#34;http://example.com/scripts/preparevm&amp;#34; func main() { // Create a session  sess := session.New() // Get the VirtualGuest service  service := services.GetVirtualGuestService(sess) // Execute the script on VM with ID 12345678  err := service.Id(12345678).ExecuteRemoteScript(&amp;amp;remoteScriptURL) if err != nil { log.Fatal(err) } else { fmt.Println(&amp;#34;Remote script sent for execution&amp;#34;) } }</description>
    </item>
    
    <item>
      <title>Get Operating System Reference Codes</title>
      <link>https://softlayer.github.io/go/os_reference_codes/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/os_reference_codes/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; ) func main() { // Create a session  sess := session.New() // Invoke the &amp;#39;GetCreateObjectOptions&amp;#39; method from the Virtual_Guest service  opts, err := services.GetVirtualGuestService(sess).GetCreateObjectOptions() if err != nil { log.Fatal(err) } // Available properties for inspection:  //opts.BlockDevices  //opts.Datacenters  //opts.Memory  //opts.NetworkComponents  //opts.OperatingSystems  //opts.Processors  // Print all available OS reference codes:  for _, os := range opts.</description>
    </item>
    
    <item>
      <title>Get disk usage metrics for a time range</title>
      <link>https://softlayer.github.io/go/account_disk_usage_metrics/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/account_disk_usage_metrics/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) func main() { // Create a session  sess := session.New() // Account service has the method we need  service := services.GetAccountService(sess) // Range: most recent 24 hours  //  // Time values are wrapped within an sl.Time type, to facilitate json marshaling  tEnd := sl.Time(time.Now()) tStart := sl.Time(tEnd.AddDate(0, 0, -1)) data, err := service.GetDiskUsageMetricDataByDate(tStart, tEnd) if err !</description>
    </item>
    
    <item>
      <title>Handle API errors</title>
      <link>https://softlayer.github.io/go/errors/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/errors/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) var invalidId = 0 func main() { // Create a session  sess := session.New() // Call DeleteObject on an invalid virtual guest  _, err := services.GetVirtualGuestService(sess). Id(invalidId). DeleteObject() // Check the error. In this instance, a 404 is handled by the application.  // Anything else is a no-go.  if err != nil { // Try to type assert the error and look for http status code 404  if apiErr, ok := err.</description>
    </item>
    
    <item>
      <title>List Account VMs</title>
      <link>https://softlayer.github.io/go/vm_list/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/vm_list/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; ) func main() { // Create a session, using credentials from the environment or a .softlayer file  sess := session.New() // Get an instance of the Account service  service := services.GetAccountService(sess) // invoke the GetVirtualGuests API method  vms, err := service.Mask(&amp;#34;id;hostname;domain&amp;#34;).GetVirtualGuests() if err != nil { fmt.Printf(&amp;#34;Error retrieving Virtual Guests from Account: %s\n&amp;#34;, err) } else { fmt.Println(&amp;#34;VMs under Account:&amp;#34;) for _, vm := range vms { fmt.</description>
    </item>
    
    <item>
      <title>Look up an SSH key</title>
      <link>https://softlayer.github.io/go/sshkey_lookup/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/sshkey_lookup/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/filter&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; ) // The key to look up const label = &amp;#34;Test Public Key&amp;#34; func main() { sess := session.New() service := services.GetAccountService(sess) keys, err := service. Filter(filter.Build( filter.Path(&amp;#34;sshKeys.label&amp;#34;).Eq(label))). Mask(&amp;#34;id,label,key,fingerprint,notes&amp;#34;). GetSshKeys() if err != nil { log.Fatal(&amp;#34;Error retrieving SSH key: &amp;#34;, err) } if len(keys) == 0 { log.Fatal(&amp;#34;No ssh key found labeled &amp;#34;, label) } if len(keys) &amp;gt; 1 { log.Fatal(&amp;#34;More than one ssh key found labeled &amp;#34;, label) } key := keys[0] fmt.</description>
    </item>
    
    <item>
      <title>Manage (Create, Add Permissions, Delete) User</title>
      <link>https://softlayer.github.io/go/user_customer_manage/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/user_customer_manage/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) var sess *session.Session func main() { sess = session.New() newUser := datatypes.User_Customer{ Username: sl.String(&amp;#34;johnsmith&amp;#34;), FirstName: sl.String(&amp;#34;John&amp;#34;), LastName: sl.String(&amp;#34;Smith&amp;#34;), Email: sl.String(&amp;#34;johnsmith@example.com&amp;#34;), CompanyName: sl.String(&amp;#34;Example Co.&amp;#34;), Address1: sl.String(&amp;#34;123 Oak St.&amp;#34;), City: sl.String(&amp;#34;Champaign&amp;#34;), State: sl.String(&amp;#34;IL&amp;#34;), Country: sl.String(&amp;#34;US&amp;#34;), TimezoneId: getTimezoneID(&amp;#34;EST&amp;#34;), UserStatusId: getUserStatusID(&amp;#34;ACTIVE&amp;#34;), } password := &amp;#34;password&amp;#34; userID, err := createUser(&amp;amp;newUser, password) if err != nil { log.Fatal(&amp;#34;Could not create user:&amp;#34;, err) } fmt.Printf(&amp;#34;New user ID: %d\n&amp;#34;, userID) // For permissions, it&amp;#39;s sufficient to send just the keynames to SoftLayer  permissions := []datatypes.</description>
    </item>
    
    <item>
      <title>Provision a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_provision/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/vm_provision/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) // A virtual guest template // // (use convenience functions to get pointers from literals, as needed) var vGuestTemplate = datatypes.Virtual_Guest{ Hostname: sl.String(&amp;#34;sample&amp;#34;), Domain: sl.String(&amp;#34;example.com&amp;#34;), MaxMemory: sl.Int(4096), StartCpus: sl.Int(1), Datacenter: &amp;amp;datatypes.Location{Name: sl.String(&amp;#34;wdc01&amp;#34;)}, OperatingSystemReferenceCode: sl.String(&amp;#34;UBUNTU_LATEST&amp;#34;), LocalDiskFlag: sl.Bool(true), } func main() { // Create a session  sess := session.New() service := services.GetVirtualGuestService(sess) // Create the virtual guest from the template  //  // We also specify an (optional) object mask, to read back some values  vGuest, err := service.</description>
    </item>
    
    <item>
      <title>Upgrade a virtual guest</title>
      <link>https://softlayer.github.io/go/vm_upgrade/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://softlayer.github.io/go/vm_upgrade/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/helpers/product&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/helpers/virtual&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) const guestID = 123456 func main() { sess := session.New() // Create a minimal Virtual_Guest object to pass to the upgrade helper  guestToUpgrade := datatypes.Virtual_Guest{ Id: sl.Int(guestID), } // Upgrade to 4 Core, 8 GB  upgradeOptions := map[string]float64{ product.CPUCategoryCode: float64(4), product.MemoryCategoryCode: float64(8), } receipt, err := virtual.UpgradeVirtualGuest(sess, &amp;amp;guestToUpgrade, upgradeOptions) if err != nil { log.Fatal(&amp;#34;Couldn&amp;#39;t upgrade virtual guest:&amp;#34;, err) } fmt.</description>
    </item>
    
  </channel>
</rss>